
RN4020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002960  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08002b00  08002b00  00012b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002ce8  08002ce8  00012ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002cf0  08002cf0  00012cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002cf4  08002cf4  00012cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  08002cf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000184  200001dc  08002ed4  000201dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000360  08002ed4  00020360  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000a03a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001f69  00000000  00000000  0002a246  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002dda  00000000  00000000  0002c1af  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000698  00000000  00000000  0002ef90  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000800  00000000  00000000  0002f628  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003946  00000000  00000000  0002fe28  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002827  00000000  00000000  0003376e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00035f95  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000019c4  00000000  00000000  00036014  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002ae8 	.word	0x08002ae8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08002ae8 	.word	0x08002ae8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000590:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000592:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <HAL_InitTick+0x3c>)
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_InitTick+0x40>)
{
 8000596:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000598:	7818      	ldrb	r0, [r3, #0]
 800059a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059e:	fbb3 f3f0 	udiv	r3, r3, r0
 80005a2:	6810      	ldr	r0, [r2, #0]
 80005a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005a8:	f000 f896 	bl	80006d8 <HAL_SYSTICK_Config>
 80005ac:	4604      	mov	r4, r0
 80005ae:	b958      	cbnz	r0, 80005c8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005b0:	2d0f      	cmp	r5, #15
 80005b2:	d809      	bhi.n	80005c8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005b4:	4602      	mov	r2, r0
 80005b6:	4629      	mov	r1, r5
 80005b8:	f04f 30ff 	mov.w	r0, #4294967295
 80005bc:	f000 f84a 	bl	8000654 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <HAL_InitTick+0x44>)
 80005c2:	4620      	mov	r0, r4
 80005c4:	601d      	str	r5, [r3, #0]
 80005c6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005c8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005ca:	bd38      	pop	{r3, r4, r5, pc}
 80005cc:	20000008 	.word	0x20000008
 80005d0:	20000000 	.word	0x20000000
 80005d4:	20000004 	.word	0x20000004

080005d8 <HAL_Init>:
{
 80005d8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <HAL_Init+0x30>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005e2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005ea:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005f2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f4:	2003      	movs	r0, #3
 80005f6:	f000 f81b 	bl	8000630 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f7ff ffc8 	bl	8000590 <HAL_InitTick>
  HAL_MspInit();
 8000600:	f001 f85e 	bl	80016c0 <HAL_MspInit>
}
 8000604:	2000      	movs	r0, #0
 8000606:	bd08      	pop	{r3, pc}
 8000608:	40023c00 	.word	0x40023c00

0800060c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800060c:	4a03      	ldr	r2, [pc, #12]	; (800061c <HAL_IncTick+0x10>)
 800060e:	4b04      	ldr	r3, [pc, #16]	; (8000620 <HAL_IncTick+0x14>)
 8000610:	6811      	ldr	r1, [r2, #0]
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	440b      	add	r3, r1
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	2000024c 	.word	0x2000024c
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000624:	4b01      	ldr	r3, [pc, #4]	; (800062c <HAL_GetTick+0x8>)
 8000626:	6818      	ldr	r0, [r3, #0]
}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	2000024c 	.word	0x2000024c

08000630 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000630:	4a07      	ldr	r2, [pc, #28]	; (8000650 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000632:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000634:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000638:	041b      	lsls	r3, r3, #16
 800063a:	0c1b      	lsrs	r3, r3, #16
 800063c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000640:	0200      	lsls	r0, r0, #8
 8000642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000646:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800064a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800064c:	60d3      	str	r3, [r2, #12]
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000654:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000656:	b530      	push	{r4, r5, lr}
 8000658:	68dc      	ldr	r4, [r3, #12]
 800065a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800065e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000662:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000664:	2b04      	cmp	r3, #4
 8000666:	bf28      	it	cs
 8000668:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800066a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800066c:	f04f 0501 	mov.w	r5, #1
 8000670:	fa05 f303 	lsl.w	r3, r5, r3
 8000674:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000678:	bf8c      	ite	hi
 800067a:	3c03      	subhi	r4, #3
 800067c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067e:	4019      	ands	r1, r3
 8000680:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000682:	fa05 f404 	lsl.w	r4, r5, r4
 8000686:	3c01      	subs	r4, #1
 8000688:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800068a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068c:	ea42 0201 	orr.w	r2, r2, r1
 8000690:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000694:	bfad      	iteet	ge
 8000696:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069a:	f000 000f 	andlt.w	r0, r0, #15
 800069e:	4b06      	ldrlt	r3, [pc, #24]	; (80006b8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	bfb5      	itete	lt
 80006a6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ac:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	bf00      	nop
 80006b4:	e000ed00 	.word	0xe000ed00
 80006b8:	e000ed14 	.word	0xe000ed14

080006bc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006bc:	2800      	cmp	r0, #0
 80006be:	db08      	blt.n	80006d2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006c0:	0942      	lsrs	r2, r0, #5
 80006c2:	2301      	movs	r3, #1
 80006c4:	f000 001f 	and.w	r0, r0, #31
 80006c8:	fa03 f000 	lsl.w	r0, r3, r0
 80006cc:	4b01      	ldr	r3, [pc, #4]	; (80006d4 <HAL_NVIC_EnableIRQ+0x18>)
 80006ce:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006d2:	4770      	bx	lr
 80006d4:	e000e100 	.word	0xe000e100

080006d8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006d8:	3801      	subs	r0, #1
 80006da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006de:	d20a      	bcs.n	80006f6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e2:	4a07      	ldr	r2, [pc, #28]	; (8000700 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006e4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e6:	21f0      	movs	r1, #240	; 0xf0
 80006e8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006ec:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ee:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006f0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006f6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	e000e010 	.word	0xe000e010
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000704:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000708:	2b02      	cmp	r3, #2
 800070a:	d003      	beq.n	8000714 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800070c:	2380      	movs	r3, #128	; 0x80
 800070e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000710:	2001      	movs	r0, #1
 8000712:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000714:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000716:	2305      	movs	r3, #5
 8000718:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800071c:	6813      	ldr	r3, [r2, #0]
 800071e:	f023 0301 	bic.w	r3, r3, #1
 8000722:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000724:	2000      	movs	r0, #0
}
 8000726:	4770      	bx	lr

08000728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800072c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800072e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000730:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80008d0 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000734:	4a64      	ldr	r2, [pc, #400]	; (80008c8 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000736:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000738:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 800073c:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800073e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000740:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000744:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8000748:	42b7      	cmp	r7, r6
 800074a:	f040 80ad 	bne.w	80008a8 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800074e:	684c      	ldr	r4, [r1, #4]
 8000750:	f024 0a10 	bic.w	sl, r4, #16
 8000754:	f1ba 0f02 	cmp.w	sl, #2
 8000758:	d116      	bne.n	8000788 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 800075a:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800075e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000762:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000766:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800076a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800076e:	f04f 0e0f 	mov.w	lr, #15
 8000772:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000776:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800077a:	690d      	ldr	r5, [r1, #16]
 800077c:	fa05 f50b 	lsl.w	r5, r5, fp
 8000780:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000784:	f8cc 5020 	str.w	r5, [ip, #32]
 8000788:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800078c:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800078e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000792:	fa05 f50c 	lsl.w	r5, r5, ip
 8000796:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000798:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800079c:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007a0:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007a4:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007a8:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ac:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007b0:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 80007b2:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007b6:	d815      	bhi.n	80007e4 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 80007b8:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007bc:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007c0:	68cd      	ldr	r5, [r1, #12]
 80007c2:	fa05 fa0c 	lsl.w	sl, r5, ip
 80007c6:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 80007ca:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 80007ce:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007d2:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007d6:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 80007da:	fa0e fe03 	lsl.w	lr, lr, r3
 80007de:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 80007e2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80007e4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007e6:	9d00      	ldr	r5, [sp, #0]
 80007e8:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007ea:	688f      	ldr	r7, [r1, #8]
 80007ec:	fa07 f70c 	lsl.w	r7, r7, ip
 80007f0:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80007f2:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007f4:	00e5      	lsls	r5, r4, #3
 80007f6:	d557      	bpl.n	80008a8 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f8:	f04f 0b00 	mov.w	fp, #0
 80007fc:	f8cd b00c 	str.w	fp, [sp, #12]
 8000800:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000804:	4d31      	ldr	r5, [pc, #196]	; (80008cc <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800080a:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800080e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000812:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000816:	9703      	str	r7, [sp, #12]
 8000818:	9f03      	ldr	r7, [sp, #12]
 800081a:	f023 0703 	bic.w	r7, r3, #3
 800081e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000822:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000826:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800082a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800082e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000832:	f04f 0e0f 	mov.w	lr, #15
 8000836:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800083a:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800083c:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000840:	d039      	beq.n	80008b6 <HAL_GPIO_Init+0x18e>
 8000842:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000846:	42a8      	cmp	r0, r5
 8000848:	d037      	beq.n	80008ba <HAL_GPIO_Init+0x192>
 800084a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800084e:	42a8      	cmp	r0, r5
 8000850:	d035      	beq.n	80008be <HAL_GPIO_Init+0x196>
 8000852:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000856:	42a8      	cmp	r0, r5
 8000858:	d033      	beq.n	80008c2 <HAL_GPIO_Init+0x19a>
 800085a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800085e:	42a8      	cmp	r0, r5
 8000860:	bf14      	ite	ne
 8000862:	2507      	movne	r5, #7
 8000864:	2504      	moveq	r5, #4
 8000866:	fa05 f50c 	lsl.w	r5, r5, ip
 800086a:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800086e:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000870:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000872:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000874:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000878:	bf0c      	ite	eq
 800087a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800087c:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800087e:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000880:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000882:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000886:	bf0c      	ite	eq
 8000888:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800088a:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800088c:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800088e:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000890:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000894:	bf0c      	ite	eq
 8000896:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000898:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800089a:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800089c:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800089e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80008a0:	bf54      	ite	pl
 80008a2:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80008a4:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80008a6:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008a8:	3301      	adds	r3, #1
 80008aa:	2b10      	cmp	r3, #16
 80008ac:	f47f af47 	bne.w	800073e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80008b0:	b005      	add	sp, #20
 80008b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008b6:	465d      	mov	r5, fp
 80008b8:	e7d5      	b.n	8000866 <HAL_GPIO_Init+0x13e>
 80008ba:	2501      	movs	r5, #1
 80008bc:	e7d3      	b.n	8000866 <HAL_GPIO_Init+0x13e>
 80008be:	2502      	movs	r5, #2
 80008c0:	e7d1      	b.n	8000866 <HAL_GPIO_Init+0x13e>
 80008c2:	2503      	movs	r5, #3
 80008c4:	e7cf      	b.n	8000866 <HAL_GPIO_Init+0x13e>
 80008c6:	bf00      	nop
 80008c8:	40013c00 	.word	0x40013c00
 80008cc:	40020000 	.word	0x40020000
 80008d0:	40023800 	.word	0x40023800

080008d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008d4:	b10a      	cbz	r2, 80008da <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80008d6:	6181      	str	r1, [r0, #24]
 80008d8:	4770      	bx	lr
 80008da:	0409      	lsls	r1, r1, #16
 80008dc:	e7fb      	b.n	80008d6 <HAL_GPIO_WritePin+0x2>
	...

080008e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008e4:	4604      	mov	r4, r0
 80008e6:	b918      	cbnz	r0, 80008f0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80008e8:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80008ea:	b002      	add	sp, #8
 80008ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008f0:	6803      	ldr	r3, [r0, #0]
 80008f2:	07dd      	lsls	r5, r3, #31
 80008f4:	d410      	bmi.n	8000918 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008f6:	6823      	ldr	r3, [r4, #0]
 80008f8:	0798      	lsls	r0, r3, #30
 80008fa:	d458      	bmi.n	80009ae <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008fc:	6823      	ldr	r3, [r4, #0]
 80008fe:	071a      	lsls	r2, r3, #28
 8000900:	f100 809a 	bmi.w	8000a38 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000904:	6823      	ldr	r3, [r4, #0]
 8000906:	075b      	lsls	r3, r3, #29
 8000908:	f100 80b8 	bmi.w	8000a7c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800090c:	69a2      	ldr	r2, [r4, #24]
 800090e:	2a00      	cmp	r2, #0
 8000910:	f040 8119 	bne.w	8000b46 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000914:	2000      	movs	r0, #0
 8000916:	e7e8      	b.n	80008ea <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000918:	4ba6      	ldr	r3, [pc, #664]	; (8000bb4 <HAL_RCC_OscConfig+0x2d4>)
 800091a:	689a      	ldr	r2, [r3, #8]
 800091c:	f002 020c 	and.w	r2, r2, #12
 8000920:	2a04      	cmp	r2, #4
 8000922:	d007      	beq.n	8000934 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000924:	689a      	ldr	r2, [r3, #8]
 8000926:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800092a:	2a08      	cmp	r2, #8
 800092c:	d10a      	bne.n	8000944 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	0259      	lsls	r1, r3, #9
 8000932:	d507      	bpl.n	8000944 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000934:	4b9f      	ldr	r3, [pc, #636]	; (8000bb4 <HAL_RCC_OscConfig+0x2d4>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	039a      	lsls	r2, r3, #14
 800093a:	d5dc      	bpl.n	80008f6 <HAL_RCC_OscConfig+0x16>
 800093c:	6863      	ldr	r3, [r4, #4]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d1d9      	bne.n	80008f6 <HAL_RCC_OscConfig+0x16>
 8000942:	e7d1      	b.n	80008e8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000944:	6863      	ldr	r3, [r4, #4]
 8000946:	4d9b      	ldr	r5, [pc, #620]	; (8000bb4 <HAL_RCC_OscConfig+0x2d4>)
 8000948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800094c:	d111      	bne.n	8000972 <HAL_RCC_OscConfig+0x92>
 800094e:	682b      	ldr	r3, [r5, #0]
 8000950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000954:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000956:	f7ff fe65 	bl	8000624 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800095a:	4d96      	ldr	r5, [pc, #600]	; (8000bb4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800095c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800095e:	682b      	ldr	r3, [r5, #0]
 8000960:	039b      	lsls	r3, r3, #14
 8000962:	d4c8      	bmi.n	80008f6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000964:	f7ff fe5e 	bl	8000624 <HAL_GetTick>
 8000968:	1b80      	subs	r0, r0, r6
 800096a:	2864      	cmp	r0, #100	; 0x64
 800096c:	d9f7      	bls.n	800095e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800096e:	2003      	movs	r0, #3
 8000970:	e7bb      	b.n	80008ea <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000972:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000976:	d104      	bne.n	8000982 <HAL_RCC_OscConfig+0xa2>
 8000978:	682b      	ldr	r3, [r5, #0]
 800097a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800097e:	602b      	str	r3, [r5, #0]
 8000980:	e7e5      	b.n	800094e <HAL_RCC_OscConfig+0x6e>
 8000982:	682a      	ldr	r2, [r5, #0]
 8000984:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000988:	602a      	str	r2, [r5, #0]
 800098a:	682a      	ldr	r2, [r5, #0]
 800098c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000990:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000992:	2b00      	cmp	r3, #0
 8000994:	d1df      	bne.n	8000956 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8000996:	f7ff fe45 	bl	8000624 <HAL_GetTick>
 800099a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800099c:	682b      	ldr	r3, [r5, #0]
 800099e:	039f      	lsls	r7, r3, #14
 80009a0:	d5a9      	bpl.n	80008f6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009a2:	f7ff fe3f 	bl	8000624 <HAL_GetTick>
 80009a6:	1b80      	subs	r0, r0, r6
 80009a8:	2864      	cmp	r0, #100	; 0x64
 80009aa:	d9f7      	bls.n	800099c <HAL_RCC_OscConfig+0xbc>
 80009ac:	e7df      	b.n	800096e <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009ae:	4b81      	ldr	r3, [pc, #516]	; (8000bb4 <HAL_RCC_OscConfig+0x2d4>)
 80009b0:	689a      	ldr	r2, [r3, #8]
 80009b2:	f012 0f0c 	tst.w	r2, #12
 80009b6:	d007      	beq.n	80009c8 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009b8:	689a      	ldr	r2, [r3, #8]
 80009ba:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009be:	2a08      	cmp	r2, #8
 80009c0:	d111      	bne.n	80009e6 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	025e      	lsls	r6, r3, #9
 80009c6:	d40e      	bmi.n	80009e6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009c8:	4b7a      	ldr	r3, [pc, #488]	; (8000bb4 <HAL_RCC_OscConfig+0x2d4>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	0795      	lsls	r5, r2, #30
 80009ce:	d502      	bpl.n	80009d6 <HAL_RCC_OscConfig+0xf6>
 80009d0:	68e2      	ldr	r2, [r4, #12]
 80009d2:	2a01      	cmp	r2, #1
 80009d4:	d188      	bne.n	80008e8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	6921      	ldr	r1, [r4, #16]
 80009da:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80009de:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80009e2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009e4:	e78a      	b.n	80008fc <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80009e6:	68e2      	ldr	r2, [r4, #12]
 80009e8:	4b73      	ldr	r3, [pc, #460]	; (8000bb8 <HAL_RCC_OscConfig+0x2d8>)
 80009ea:	b1b2      	cbz	r2, 8000a1a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80009ec:	2201      	movs	r2, #1
 80009ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009f0:	f7ff fe18 	bl	8000624 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009f4:	4d6f      	ldr	r5, [pc, #444]	; (8000bb4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80009f6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009f8:	682b      	ldr	r3, [r5, #0]
 80009fa:	0798      	lsls	r0, r3, #30
 80009fc:	d507      	bpl.n	8000a0e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009fe:	682b      	ldr	r3, [r5, #0]
 8000a00:	6922      	ldr	r2, [r4, #16]
 8000a02:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a06:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a0a:	602b      	str	r3, [r5, #0]
 8000a0c:	e776      	b.n	80008fc <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a0e:	f7ff fe09 	bl	8000624 <HAL_GetTick>
 8000a12:	1b80      	subs	r0, r0, r6
 8000a14:	2802      	cmp	r0, #2
 8000a16:	d9ef      	bls.n	80009f8 <HAL_RCC_OscConfig+0x118>
 8000a18:	e7a9      	b.n	800096e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000a1a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a1c:	f7ff fe02 	bl	8000624 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a20:	4d64      	ldr	r5, [pc, #400]	; (8000bb4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000a22:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a24:	682b      	ldr	r3, [r5, #0]
 8000a26:	0799      	lsls	r1, r3, #30
 8000a28:	f57f af68 	bpl.w	80008fc <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a2c:	f7ff fdfa 	bl	8000624 <HAL_GetTick>
 8000a30:	1b80      	subs	r0, r0, r6
 8000a32:	2802      	cmp	r0, #2
 8000a34:	d9f6      	bls.n	8000a24 <HAL_RCC_OscConfig+0x144>
 8000a36:	e79a      	b.n	800096e <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a38:	6962      	ldr	r2, [r4, #20]
 8000a3a:	4b60      	ldr	r3, [pc, #384]	; (8000bbc <HAL_RCC_OscConfig+0x2dc>)
 8000a3c:	b17a      	cbz	r2, 8000a5e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000a3e:	2201      	movs	r2, #1
 8000a40:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a42:	f7ff fdef 	bl	8000624 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a46:	4d5b      	ldr	r5, [pc, #364]	; (8000bb4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a48:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a4a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a4c:	079f      	lsls	r7, r3, #30
 8000a4e:	f53f af59 	bmi.w	8000904 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a52:	f7ff fde7 	bl	8000624 <HAL_GetTick>
 8000a56:	1b80      	subs	r0, r0, r6
 8000a58:	2802      	cmp	r0, #2
 8000a5a:	d9f6      	bls.n	8000a4a <HAL_RCC_OscConfig+0x16a>
 8000a5c:	e787      	b.n	800096e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000a5e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a60:	f7ff fde0 	bl	8000624 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a64:	4d53      	ldr	r5, [pc, #332]	; (8000bb4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a66:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a68:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a6a:	0798      	lsls	r0, r3, #30
 8000a6c:	f57f af4a 	bpl.w	8000904 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a70:	f7ff fdd8 	bl	8000624 <HAL_GetTick>
 8000a74:	1b80      	subs	r0, r0, r6
 8000a76:	2802      	cmp	r0, #2
 8000a78:	d9f6      	bls.n	8000a68 <HAL_RCC_OscConfig+0x188>
 8000a7a:	e778      	b.n	800096e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a7c:	4b4d      	ldr	r3, [pc, #308]	; (8000bb4 <HAL_RCC_OscConfig+0x2d4>)
 8000a7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a80:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000a84:	d128      	bne.n	8000ad8 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a86:	9201      	str	r2, [sp, #4]
 8000a88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a8a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a8e:	641a      	str	r2, [r3, #64]	; 0x40
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a96:	9301      	str	r3, [sp, #4]
 8000a98:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a9a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a9c:	4d48      	ldr	r5, [pc, #288]	; (8000bc0 <HAL_RCC_OscConfig+0x2e0>)
 8000a9e:	682b      	ldr	r3, [r5, #0]
 8000aa0:	05d9      	lsls	r1, r3, #23
 8000aa2:	d51b      	bpl.n	8000adc <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000aa4:	68a3      	ldr	r3, [r4, #8]
 8000aa6:	4d43      	ldr	r5, [pc, #268]	; (8000bb4 <HAL_RCC_OscConfig+0x2d4>)
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d127      	bne.n	8000afc <HAL_RCC_OscConfig+0x21c>
 8000aac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000aae:	f043 0301 	orr.w	r3, r3, #1
 8000ab2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000ab4:	f7ff fdb6 	bl	8000624 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ab8:	4d3e      	ldr	r5, [pc, #248]	; (8000bb4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000aba:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000abc:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ac0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ac2:	079b      	lsls	r3, r3, #30
 8000ac4:	d539      	bpl.n	8000b3a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000ac6:	2e00      	cmp	r6, #0
 8000ac8:	f43f af20 	beq.w	800090c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000acc:	4a39      	ldr	r2, [pc, #228]	; (8000bb4 <HAL_RCC_OscConfig+0x2d4>)
 8000ace:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000ad0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad6:	e719      	b.n	800090c <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000ad8:	2600      	movs	r6, #0
 8000ada:	e7df      	b.n	8000a9c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000adc:	682b      	ldr	r3, [r5, #0]
 8000ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ae2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000ae4:	f7ff fd9e 	bl	8000624 <HAL_GetTick>
 8000ae8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aea:	682b      	ldr	r3, [r5, #0]
 8000aec:	05da      	lsls	r2, r3, #23
 8000aee:	d4d9      	bmi.n	8000aa4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000af0:	f7ff fd98 	bl	8000624 <HAL_GetTick>
 8000af4:	1bc0      	subs	r0, r0, r7
 8000af6:	2802      	cmp	r0, #2
 8000af8:	d9f7      	bls.n	8000aea <HAL_RCC_OscConfig+0x20a>
 8000afa:	e738      	b.n	800096e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000afc:	2b05      	cmp	r3, #5
 8000afe:	d104      	bne.n	8000b0a <HAL_RCC_OscConfig+0x22a>
 8000b00:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b02:	f043 0304 	orr.w	r3, r3, #4
 8000b06:	672b      	str	r3, [r5, #112]	; 0x70
 8000b08:	e7d0      	b.n	8000aac <HAL_RCC_OscConfig+0x1cc>
 8000b0a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b0c:	f022 0201 	bic.w	r2, r2, #1
 8000b10:	672a      	str	r2, [r5, #112]	; 0x70
 8000b12:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b14:	f022 0204 	bic.w	r2, r2, #4
 8000b18:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d1ca      	bne.n	8000ab4 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000b1e:	f7ff fd81 	bl	8000624 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b22:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b26:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b28:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b2a:	0798      	lsls	r0, r3, #30
 8000b2c:	d5cb      	bpl.n	8000ac6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b2e:	f7ff fd79 	bl	8000624 <HAL_GetTick>
 8000b32:	1bc0      	subs	r0, r0, r7
 8000b34:	4540      	cmp	r0, r8
 8000b36:	d9f7      	bls.n	8000b28 <HAL_RCC_OscConfig+0x248>
 8000b38:	e719      	b.n	800096e <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b3a:	f7ff fd73 	bl	8000624 <HAL_GetTick>
 8000b3e:	1bc0      	subs	r0, r0, r7
 8000b40:	4540      	cmp	r0, r8
 8000b42:	d9bd      	bls.n	8000ac0 <HAL_RCC_OscConfig+0x1e0>
 8000b44:	e713      	b.n	800096e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b46:	4d1b      	ldr	r5, [pc, #108]	; (8000bb4 <HAL_RCC_OscConfig+0x2d4>)
 8000b48:	68ab      	ldr	r3, [r5, #8]
 8000b4a:	f003 030c 	and.w	r3, r3, #12
 8000b4e:	2b08      	cmp	r3, #8
 8000b50:	f43f aeca 	beq.w	80008e8 <HAL_RCC_OscConfig+0x8>
 8000b54:	4e1b      	ldr	r6, [pc, #108]	; (8000bc4 <HAL_RCC_OscConfig+0x2e4>)
 8000b56:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b58:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000b5a:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b5c:	d134      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000b5e:	f7ff fd61 	bl	8000624 <HAL_GetTick>
 8000b62:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b64:	682b      	ldr	r3, [r5, #0]
 8000b66:	0199      	lsls	r1, r3, #6
 8000b68:	d41e      	bmi.n	8000ba8 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b6a:	6a22      	ldr	r2, [r4, #32]
 8000b6c:	69e3      	ldr	r3, [r4, #28]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b72:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b76:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b78:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b7c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b7e:	4c0d      	ldr	r4, [pc, #52]	; (8000bb4 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b80:	0852      	lsrs	r2, r2, #1
 8000b82:	3a01      	subs	r2, #1
 8000b84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b88:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b8e:	f7ff fd49 	bl	8000624 <HAL_GetTick>
 8000b92:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b94:	6823      	ldr	r3, [r4, #0]
 8000b96:	019a      	lsls	r2, r3, #6
 8000b98:	f53f aebc 	bmi.w	8000914 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b9c:	f7ff fd42 	bl	8000624 <HAL_GetTick>
 8000ba0:	1b40      	subs	r0, r0, r5
 8000ba2:	2802      	cmp	r0, #2
 8000ba4:	d9f6      	bls.n	8000b94 <HAL_RCC_OscConfig+0x2b4>
 8000ba6:	e6e2      	b.n	800096e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ba8:	f7ff fd3c 	bl	8000624 <HAL_GetTick>
 8000bac:	1bc0      	subs	r0, r0, r7
 8000bae:	2802      	cmp	r0, #2
 8000bb0:	d9d8      	bls.n	8000b64 <HAL_RCC_OscConfig+0x284>
 8000bb2:	e6dc      	b.n	800096e <HAL_RCC_OscConfig+0x8e>
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	42470000 	.word	0x42470000
 8000bbc:	42470e80 	.word	0x42470e80
 8000bc0:	40007000 	.word	0x40007000
 8000bc4:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000bc8:	f7ff fd2c 	bl	8000624 <HAL_GetTick>
 8000bcc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bce:	682b      	ldr	r3, [r5, #0]
 8000bd0:	019b      	lsls	r3, r3, #6
 8000bd2:	f57f ae9f 	bpl.w	8000914 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bd6:	f7ff fd25 	bl	8000624 <HAL_GetTick>
 8000bda:	1b00      	subs	r0, r0, r4
 8000bdc:	2802      	cmp	r0, #2
 8000bde:	d9f6      	bls.n	8000bce <HAL_RCC_OscConfig+0x2ee>
 8000be0:	e6c5      	b.n	800096e <HAL_RCC_OscConfig+0x8e>
 8000be2:	bf00      	nop

08000be4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000be4:	4913      	ldr	r1, [pc, #76]	; (8000c34 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000be6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000be8:	688b      	ldr	r3, [r1, #8]
 8000bea:	f003 030c 	and.w	r3, r3, #12
 8000bee:	2b04      	cmp	r3, #4
 8000bf0:	d003      	beq.n	8000bfa <HAL_RCC_GetSysClockFreq+0x16>
 8000bf2:	2b08      	cmp	r3, #8
 8000bf4:	d003      	beq.n	8000bfe <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000bf6:	4810      	ldr	r0, [pc, #64]	; (8000c38 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000bf8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000bfa:	4810      	ldr	r0, [pc, #64]	; (8000c3c <HAL_RCC_GetSysClockFreq+0x58>)
 8000bfc:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bfe:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c00:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c02:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c04:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c08:	bf14      	ite	ne
 8000c0a:	480c      	ldrne	r0, [pc, #48]	; (8000c3c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c0c:	480a      	ldreq	r0, [pc, #40]	; (8000c38 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c0e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c12:	bf18      	it	ne
 8000c14:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c16:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c1a:	fba1 0100 	umull	r0, r1, r1, r0
 8000c1e:	f7ff fb2f 	bl	8000280 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c22:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <HAL_RCC_GetSysClockFreq+0x50>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000c2e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c32:	bd08      	pop	{r3, pc}
 8000c34:	40023800 	.word	0x40023800
 8000c38:	00f42400 	.word	0x00f42400
 8000c3c:	007a1200 	.word	0x007a1200

08000c40 <HAL_RCC_ClockConfig>:
{
 8000c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c44:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c46:	4604      	mov	r4, r0
 8000c48:	b910      	cbnz	r0, 8000c50 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c50:	4b44      	ldr	r3, [pc, #272]	; (8000d64 <HAL_RCC_ClockConfig+0x124>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	f002 020f 	and.w	r2, r2, #15
 8000c58:	428a      	cmp	r2, r1
 8000c5a:	d328      	bcc.n	8000cae <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c5c:	6821      	ldr	r1, [r4, #0]
 8000c5e:	078f      	lsls	r7, r1, #30
 8000c60:	d42d      	bmi.n	8000cbe <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c62:	07c8      	lsls	r0, r1, #31
 8000c64:	d440      	bmi.n	8000ce8 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c66:	4b3f      	ldr	r3, [pc, #252]	; (8000d64 <HAL_RCC_ClockConfig+0x124>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	f002 020f 	and.w	r2, r2, #15
 8000c6e:	4295      	cmp	r5, r2
 8000c70:	d366      	bcc.n	8000d40 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c72:	6822      	ldr	r2, [r4, #0]
 8000c74:	0751      	lsls	r1, r2, #29
 8000c76:	d46c      	bmi.n	8000d52 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c78:	0713      	lsls	r3, r2, #28
 8000c7a:	d507      	bpl.n	8000c8c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c7c:	4a3a      	ldr	r2, [pc, #232]	; (8000d68 <HAL_RCC_ClockConfig+0x128>)
 8000c7e:	6921      	ldr	r1, [r4, #16]
 8000c80:	6893      	ldr	r3, [r2, #8]
 8000c82:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c86:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c8a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c8c:	f7ff ffaa 	bl	8000be4 <HAL_RCC_GetSysClockFreq>
 8000c90:	4b35      	ldr	r3, [pc, #212]	; (8000d68 <HAL_RCC_ClockConfig+0x128>)
 8000c92:	4a36      	ldr	r2, [pc, #216]	; (8000d6c <HAL_RCC_ClockConfig+0x12c>)
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c9a:	5cd3      	ldrb	r3, [r2, r3]
 8000c9c:	40d8      	lsrs	r0, r3
 8000c9e:	4b34      	ldr	r3, [pc, #208]	; (8000d70 <HAL_RCC_ClockConfig+0x130>)
 8000ca0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f7ff fc74 	bl	8000590 <HAL_InitTick>
  return HAL_OK;
 8000ca8:	2000      	movs	r0, #0
 8000caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cae:	b2ca      	uxtb	r2, r1
 8000cb0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f003 030f 	and.w	r3, r3, #15
 8000cb8:	4299      	cmp	r1, r3
 8000cba:	d1c6      	bne.n	8000c4a <HAL_RCC_ClockConfig+0xa>
 8000cbc:	e7ce      	b.n	8000c5c <HAL_RCC_ClockConfig+0x1c>
 8000cbe:	4b2a      	ldr	r3, [pc, #168]	; (8000d68 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cc0:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cc4:	bf1e      	ittt	ne
 8000cc6:	689a      	ldrne	r2, [r3, #8]
 8000cc8:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000ccc:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cce:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cd0:	bf42      	ittt	mi
 8000cd2:	689a      	ldrmi	r2, [r3, #8]
 8000cd4:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000cd8:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cda:	689a      	ldr	r2, [r3, #8]
 8000cdc:	68a0      	ldr	r0, [r4, #8]
 8000cde:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000ce2:	4302      	orrs	r2, r0
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	e7bc      	b.n	8000c62 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ce8:	6862      	ldr	r2, [r4, #4]
 8000cea:	4b1f      	ldr	r3, [pc, #124]	; (8000d68 <HAL_RCC_ClockConfig+0x128>)
 8000cec:	2a01      	cmp	r2, #1
 8000cee:	d11d      	bne.n	8000d2c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cf6:	d0a8      	beq.n	8000c4a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cf8:	4e1b      	ldr	r6, [pc, #108]	; (8000d68 <HAL_RCC_ClockConfig+0x128>)
 8000cfa:	68b3      	ldr	r3, [r6, #8]
 8000cfc:	f023 0303 	bic.w	r3, r3, #3
 8000d00:	4313      	orrs	r3, r2
 8000d02:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000d04:	f7ff fc8e 	bl	8000624 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d08:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d0c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d0e:	68b3      	ldr	r3, [r6, #8]
 8000d10:	6862      	ldr	r2, [r4, #4]
 8000d12:	f003 030c 	and.w	r3, r3, #12
 8000d16:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d1a:	d0a4      	beq.n	8000c66 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d1c:	f7ff fc82 	bl	8000624 <HAL_GetTick>
 8000d20:	1bc0      	subs	r0, r0, r7
 8000d22:	4540      	cmp	r0, r8
 8000d24:	d9f3      	bls.n	8000d0e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000d26:	2003      	movs	r0, #3
}
 8000d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d2c:	1e91      	subs	r1, r2, #2
 8000d2e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d30:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d32:	d802      	bhi.n	8000d3a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d34:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d38:	e7dd      	b.n	8000cf6 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d3a:	f013 0f02 	tst.w	r3, #2
 8000d3e:	e7da      	b.n	8000cf6 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d40:	b2ea      	uxtb	r2, r5
 8000d42:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 030f 	and.w	r3, r3, #15
 8000d4a:	429d      	cmp	r5, r3
 8000d4c:	f47f af7d 	bne.w	8000c4a <HAL_RCC_ClockConfig+0xa>
 8000d50:	e78f      	b.n	8000c72 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d52:	4905      	ldr	r1, [pc, #20]	; (8000d68 <HAL_RCC_ClockConfig+0x128>)
 8000d54:	68e0      	ldr	r0, [r4, #12]
 8000d56:	688b      	ldr	r3, [r1, #8]
 8000d58:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d5c:	4303      	orrs	r3, r0
 8000d5e:	608b      	str	r3, [r1, #8]
 8000d60:	e78a      	b.n	8000c78 <HAL_RCC_ClockConfig+0x38>
 8000d62:	bf00      	nop
 8000d64:	40023c00 	.word	0x40023c00
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	08002b2b 	.word	0x08002b2b
 8000d70:	20000008 	.word	0x20000008

08000d74 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000d7e:	5cd3      	ldrb	r3, [r2, r3]
 8000d80:	4a03      	ldr	r2, [pc, #12]	; (8000d90 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000d82:	6810      	ldr	r0, [r2, #0]
}
 8000d84:	40d8      	lsrs	r0, r3
 8000d86:	4770      	bx	lr
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	08002b3b 	.word	0x08002b3b
 8000d90:	20000008 	.word	0x20000008

08000d94 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000d96:	4a05      	ldr	r2, [pc, #20]	; (8000dac <HAL_RCC_GetPCLK2Freq+0x18>)
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000d9e:	5cd3      	ldrb	r3, [r2, r3]
 8000da0:	4a03      	ldr	r2, [pc, #12]	; (8000db0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000da2:	6810      	ldr	r0, [r2, #0]
}
 8000da4:	40d8      	lsrs	r0, r3
 8000da6:	4770      	bx	lr
 8000da8:	40023800 	.word	0x40023800
 8000dac:	08002b3b 	.word	0x08002b3b
 8000db0:	20000008 	.word	0x20000008

08000db4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000db4:	6803      	ldr	r3, [r0, #0]
 8000db6:	68da      	ldr	r2, [r3, #12]
 8000db8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000dbc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000dbe:	695a      	ldr	r2, [r3, #20]
 8000dc0:	f022 0201 	bic.w	r2, r2, #1
 8000dc4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000dc6:	2320      	movs	r3, #32
 8000dc8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8000dcc:	4770      	bx	lr
	...

08000dd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000dd4:	6806      	ldr	r6, [r0, #0]
 8000dd6:	68c2      	ldr	r2, [r0, #12]
 8000dd8:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000dda:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000ddc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000de0:	4313      	orrs	r3, r2
 8000de2:	6133      	str	r3, [r6, #16]
{
 8000de4:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000de6:	6883      	ldr	r3, [r0, #8]
 8000de8:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8000dea:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000dec:	4303      	orrs	r3, r0
 8000dee:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8000df0:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000df4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8000df6:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000dfa:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000e00:	6973      	ldr	r3, [r6, #20]
 8000e02:	69a2      	ldr	r2, [r4, #24]
 8000e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e08:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000e0a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000e0e:	6173      	str	r3, [r6, #20]
 8000e10:	4b7a      	ldr	r3, [pc, #488]	; (8000ffc <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000e12:	d17c      	bne.n	8000f0e <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000e14:	429e      	cmp	r6, r3
 8000e16:	d003      	beq.n	8000e20 <UART_SetConfig+0x50>
 8000e18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e1c:	429e      	cmp	r6, r3
 8000e1e:	d144      	bne.n	8000eaa <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000e20:	f7ff ffb8 	bl	8000d94 <HAL_RCC_GetPCLK2Freq>
 8000e24:	2519      	movs	r5, #25
 8000e26:	fb05 f300 	mul.w	r3, r5, r0
 8000e2a:	6860      	ldr	r0, [r4, #4]
 8000e2c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000e30:	0040      	lsls	r0, r0, #1
 8000e32:	fbb3 f3f0 	udiv	r3, r3, r0
 8000e36:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e3a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000e3e:	f7ff ffa9 	bl	8000d94 <HAL_RCC_GetPCLK2Freq>
 8000e42:	6863      	ldr	r3, [r4, #4]
 8000e44:	4368      	muls	r0, r5
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	fbb0 f7f3 	udiv	r7, r0, r3
 8000e4c:	f7ff ffa2 	bl	8000d94 <HAL_RCC_GetPCLK2Freq>
 8000e50:	6863      	ldr	r3, [r4, #4]
 8000e52:	4368      	muls	r0, r5
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e5a:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e5e:	fb09 7313 	mls	r3, r9, r3, r7
 8000e62:	00db      	lsls	r3, r3, #3
 8000e64:	3332      	adds	r3, #50	; 0x32
 8000e66:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8000e70:	f7ff ff90 	bl	8000d94 <HAL_RCC_GetPCLK2Freq>
 8000e74:	6862      	ldr	r2, [r4, #4]
 8000e76:	4368      	muls	r0, r5
 8000e78:	0052      	lsls	r2, r2, #1
 8000e7a:	fbb0 faf2 	udiv	sl, r0, r2
 8000e7e:	f7ff ff89 	bl	8000d94 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000e82:	6863      	ldr	r3, [r4, #4]
 8000e84:	4368      	muls	r0, r5
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e8c:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e90:	fb09 a313 	mls	r3, r9, r3, sl
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	3332      	adds	r3, #50	; 0x32
 8000e98:	fbb3 f3f9 	udiv	r3, r3, r9
 8000e9c:	f003 0307 	and.w	r3, r3, #7
 8000ea0:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000ea2:	443b      	add	r3, r7
 8000ea4:	60b3      	str	r3, [r6, #8]
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000eaa:	f7ff ff63 	bl	8000d74 <HAL_RCC_GetPCLK1Freq>
 8000eae:	2519      	movs	r5, #25
 8000eb0:	fb05 f300 	mul.w	r3, r5, r0
 8000eb4:	6860      	ldr	r0, [r4, #4]
 8000eb6:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000eba:	0040      	lsls	r0, r0, #1
 8000ebc:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ec0:	fbb3 f3f9 	udiv	r3, r3, r9
 8000ec4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000ec8:	f7ff ff54 	bl	8000d74 <HAL_RCC_GetPCLK1Freq>
 8000ecc:	6863      	ldr	r3, [r4, #4]
 8000ece:	4368      	muls	r0, r5
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	fbb0 f7f3 	udiv	r7, r0, r3
 8000ed6:	f7ff ff4d 	bl	8000d74 <HAL_RCC_GetPCLK1Freq>
 8000eda:	6863      	ldr	r3, [r4, #4]
 8000edc:	4368      	muls	r0, r5
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ee4:	fbb3 f3f9 	udiv	r3, r3, r9
 8000ee8:	fb09 7313 	mls	r3, r9, r3, r7
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	3332      	adds	r3, #50	; 0x32
 8000ef0:	fbb3 f3f9 	udiv	r3, r3, r9
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8000efa:	f7ff ff3b 	bl	8000d74 <HAL_RCC_GetPCLK1Freq>
 8000efe:	6862      	ldr	r2, [r4, #4]
 8000f00:	4368      	muls	r0, r5
 8000f02:	0052      	lsls	r2, r2, #1
 8000f04:	fbb0 faf2 	udiv	sl, r0, r2
 8000f08:	f7ff ff34 	bl	8000d74 <HAL_RCC_GetPCLK1Freq>
 8000f0c:	e7b9      	b.n	8000e82 <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	d002      	beq.n	8000f18 <UART_SetConfig+0x148>
 8000f12:	4b3b      	ldr	r3, [pc, #236]	; (8001000 <UART_SetConfig+0x230>)
 8000f14:	429e      	cmp	r6, r3
 8000f16:	d140      	bne.n	8000f9a <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000f18:	f7ff ff3c 	bl	8000d94 <HAL_RCC_GetPCLK2Freq>
 8000f1c:	6867      	ldr	r7, [r4, #4]
 8000f1e:	2519      	movs	r5, #25
 8000f20:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000f24:	fb05 f300 	mul.w	r3, r5, r0
 8000f28:	00bf      	lsls	r7, r7, #2
 8000f2a:	fbb3 f3f7 	udiv	r3, r3, r7
 8000f2e:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f32:	011f      	lsls	r7, r3, #4
 8000f34:	f7ff ff2e 	bl	8000d94 <HAL_RCC_GetPCLK2Freq>
 8000f38:	6863      	ldr	r3, [r4, #4]
 8000f3a:	4368      	muls	r0, r5
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	fbb0 f8f3 	udiv	r8, r0, r3
 8000f42:	f7ff ff27 	bl	8000d94 <HAL_RCC_GetPCLK2Freq>
 8000f46:	6863      	ldr	r3, [r4, #4]
 8000f48:	4368      	muls	r0, r5
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f50:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f54:	fb09 8313 	mls	r3, r9, r3, r8
 8000f58:	011b      	lsls	r3, r3, #4
 8000f5a:	3332      	adds	r3, #50	; 0x32
 8000f5c:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f60:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8000f64:	f7ff ff16 	bl	8000d94 <HAL_RCC_GetPCLK2Freq>
 8000f68:	6862      	ldr	r2, [r4, #4]
 8000f6a:	4368      	muls	r0, r5
 8000f6c:	0092      	lsls	r2, r2, #2
 8000f6e:	fbb0 faf2 	udiv	sl, r0, r2
 8000f72:	f7ff ff0f 	bl	8000d94 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000f76:	6863      	ldr	r3, [r4, #4]
 8000f78:	4368      	muls	r0, r5
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f80:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f84:	fb09 a313 	mls	r3, r9, r3, sl
 8000f88:	011b      	lsls	r3, r3, #4
 8000f8a:	3332      	adds	r3, #50	; 0x32
 8000f8c:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f90:	f003 030f 	and.w	r3, r3, #15
 8000f94:	ea43 0308 	orr.w	r3, r3, r8
 8000f98:	e783      	b.n	8000ea2 <UART_SetConfig+0xd2>
 8000f9a:	f7ff feeb 	bl	8000d74 <HAL_RCC_GetPCLK1Freq>
 8000f9e:	6867      	ldr	r7, [r4, #4]
 8000fa0:	2519      	movs	r5, #25
 8000fa2:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000fa6:	fb05 f300 	mul.w	r3, r5, r0
 8000faa:	00bf      	lsls	r7, r7, #2
 8000fac:	fbb3 f3f7 	udiv	r3, r3, r7
 8000fb0:	fbb3 f3f9 	udiv	r3, r3, r9
 8000fb4:	011f      	lsls	r7, r3, #4
 8000fb6:	f7ff fedd 	bl	8000d74 <HAL_RCC_GetPCLK1Freq>
 8000fba:	6863      	ldr	r3, [r4, #4]
 8000fbc:	4368      	muls	r0, r5
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	fbb0 f8f3 	udiv	r8, r0, r3
 8000fc4:	f7ff fed6 	bl	8000d74 <HAL_RCC_GetPCLK1Freq>
 8000fc8:	6863      	ldr	r3, [r4, #4]
 8000fca:	4368      	muls	r0, r5
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fd2:	fbb3 f3f9 	udiv	r3, r3, r9
 8000fd6:	fb09 8313 	mls	r3, r9, r3, r8
 8000fda:	011b      	lsls	r3, r3, #4
 8000fdc:	3332      	adds	r3, #50	; 0x32
 8000fde:	fbb3 f3f9 	udiv	r3, r3, r9
 8000fe2:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8000fe6:	f7ff fec5 	bl	8000d74 <HAL_RCC_GetPCLK1Freq>
 8000fea:	6862      	ldr	r2, [r4, #4]
 8000fec:	4368      	muls	r0, r5
 8000fee:	0092      	lsls	r2, r2, #2
 8000ff0:	fbb0 faf2 	udiv	sl, r0, r2
 8000ff4:	f7ff febe 	bl	8000d74 <HAL_RCC_GetPCLK1Freq>
 8000ff8:	e7bd      	b.n	8000f76 <UART_SetConfig+0x1a6>
 8000ffa:	bf00      	nop
 8000ffc:	40011000 	.word	0x40011000
 8001000:	40011400 	.word	0x40011400

08001004 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001006:	4604      	mov	r4, r0
 8001008:	460e      	mov	r6, r1
 800100a:	4617      	mov	r7, r2
 800100c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800100e:	6821      	ldr	r1, [r4, #0]
 8001010:	680b      	ldr	r3, [r1, #0]
 8001012:	ea36 0303 	bics.w	r3, r6, r3
 8001016:	d101      	bne.n	800101c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001018:	2000      	movs	r0, #0
}
 800101a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 800101c:	1c6b      	adds	r3, r5, #1
 800101e:	d0f7      	beq.n	8001010 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001020:	b995      	cbnz	r5, 8001048 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001022:	6823      	ldr	r3, [r4, #0]
 8001024:	68da      	ldr	r2, [r3, #12]
 8001026:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800102a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800102c:	695a      	ldr	r2, [r3, #20]
 800102e:	f022 0201 	bic.w	r2, r2, #1
 8001032:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001034:	2320      	movs	r3, #32
 8001036:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800103a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800103e:	2300      	movs	r3, #0
 8001040:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001044:	2003      	movs	r0, #3
 8001046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001048:	f7ff faec 	bl	8000624 <HAL_GetTick>
 800104c:	1bc0      	subs	r0, r0, r7
 800104e:	4285      	cmp	r5, r0
 8001050:	d2dd      	bcs.n	800100e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001052:	e7e6      	b.n	8001022 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001054 <HAL_UART_Init>:
{
 8001054:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001056:	4604      	mov	r4, r0
 8001058:	b340      	cbz	r0, 80010ac <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800105a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800105e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001062:	b91b      	cbnz	r3, 800106c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001064:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001068:	f000 fbec 	bl	8001844 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800106c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800106e:	2324      	movs	r3, #36	; 0x24
 8001070:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001074:	68d3      	ldr	r3, [r2, #12]
 8001076:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800107a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800107c:	4620      	mov	r0, r4
 800107e:	f7ff fea7 	bl	8000dd0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001082:	6823      	ldr	r3, [r4, #0]
 8001084:	691a      	ldr	r2, [r3, #16]
 8001086:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800108a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800108c:	695a      	ldr	r2, [r3, #20]
 800108e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001092:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001094:	68da      	ldr	r2, [r3, #12]
 8001096:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800109a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800109c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800109e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010a0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80010a2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80010a6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80010aa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80010ac:	2001      	movs	r0, #1
}
 80010ae:	bd10      	pop	{r4, pc}

080010b0 <HAL_UART_Transmit>:
{
 80010b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010b4:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80010b6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80010ba:	2b20      	cmp	r3, #32
{
 80010bc:	4604      	mov	r4, r0
 80010be:	460d      	mov	r5, r1
 80010c0:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80010c2:	d14f      	bne.n	8001164 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 80010c4:	2900      	cmp	r1, #0
 80010c6:	d04a      	beq.n	800115e <HAL_UART_Transmit+0xae>
 80010c8:	2a00      	cmp	r2, #0
 80010ca:	d048      	beq.n	800115e <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80010cc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d047      	beq.n	8001164 <HAL_UART_Transmit+0xb4>
 80010d4:	2301      	movs	r3, #1
 80010d6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010da:	2300      	movs	r3, #0
 80010dc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80010de:	2321      	movs	r3, #33	; 0x21
 80010e0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80010e4:	f7ff fa9e 	bl	8000624 <HAL_GetTick>
    huart->TxXferSize = Size;
 80010e8:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80010ec:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80010ee:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80010f2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	b96b      	cbnz	r3, 8001114 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80010f8:	463b      	mov	r3, r7
 80010fa:	4632      	mov	r2, r6
 80010fc:	2140      	movs	r1, #64	; 0x40
 80010fe:	4620      	mov	r0, r4
 8001100:	f7ff ff80 	bl	8001004 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001104:	b9b0      	cbnz	r0, 8001134 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8001106:	2320      	movs	r3, #32
 8001108:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800110c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001114:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001116:	3b01      	subs	r3, #1
 8001118:	b29b      	uxth	r3, r3
 800111a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800111c:	68a3      	ldr	r3, [r4, #8]
 800111e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001122:	4632      	mov	r2, r6
 8001124:	463b      	mov	r3, r7
 8001126:	f04f 0180 	mov.w	r1, #128	; 0x80
 800112a:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800112c:	d10e      	bne.n	800114c <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800112e:	f7ff ff69 	bl	8001004 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001132:	b110      	cbz	r0, 800113a <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001134:	2003      	movs	r0, #3
 8001136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800113a:	882b      	ldrh	r3, [r5, #0]
 800113c:	6822      	ldr	r2, [r4, #0]
 800113e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001142:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001144:	6923      	ldr	r3, [r4, #16]
 8001146:	b943      	cbnz	r3, 800115a <HAL_UART_Transmit+0xaa>
          pData += 2U;
 8001148:	3502      	adds	r5, #2
 800114a:	e7d2      	b.n	80010f2 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800114c:	f7ff ff5a 	bl	8001004 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001150:	2800      	cmp	r0, #0
 8001152:	d1ef      	bne.n	8001134 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001154:	6823      	ldr	r3, [r4, #0]
 8001156:	782a      	ldrb	r2, [r5, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	3501      	adds	r5, #1
 800115c:	e7c9      	b.n	80010f2 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800115e:	2001      	movs	r0, #1
 8001160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001164:	2002      	movs	r0, #2
}
 8001166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800116a <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800116a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800116e:	2b20      	cmp	r3, #32
 8001170:	d120      	bne.n	80011b4 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8001172:	b1e9      	cbz	r1, 80011b0 <HAL_UART_Receive_IT+0x46>
 8001174:	b1e2      	cbz	r2, 80011b0 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8001176:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800117a:	2b01      	cmp	r3, #1
 800117c:	d01a      	beq.n	80011b4 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 800117e:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8001180:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001182:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001184:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001186:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001188:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800118c:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 800118e:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001190:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8001192:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001196:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800119a:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800119c:	6951      	ldr	r1, [r2, #20]
 800119e:	f041 0101 	orr.w	r1, r1, #1
 80011a2:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80011a4:	68d1      	ldr	r1, [r2, #12]
 80011a6:	f041 0120 	orr.w	r1, r1, #32
 80011aa:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 80011ac:	4618      	mov	r0, r3
 80011ae:	4770      	bx	lr
      return HAL_ERROR;
 80011b0:	2001      	movs	r0, #1
 80011b2:	4770      	bx	lr
    return HAL_BUSY;
 80011b4:	2002      	movs	r0, #2
}
 80011b6:	4770      	bx	lr

080011b8 <HAL_UART_TxCpltCallback>:
 80011b8:	4770      	bx	lr

080011ba <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80011ba:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80011be:	2b22      	cmp	r3, #34	; 0x22
{
 80011c0:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80011c2:	d136      	bne.n	8001232 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80011c4:	6883      	ldr	r3, [r0, #8]
 80011c6:	6901      	ldr	r1, [r0, #16]
 80011c8:	6802      	ldr	r2, [r0, #0]
 80011ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011ce:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80011d0:	d123      	bne.n	800121a <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80011d2:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80011d4:	b9e9      	cbnz	r1, 8001212 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80011d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80011da:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80011de:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80011e0:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80011e2:	3c01      	subs	r4, #1
 80011e4:	b2a4      	uxth	r4, r4
 80011e6:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80011e8:	b98c      	cbnz	r4, 800120e <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80011ea:	6803      	ldr	r3, [r0, #0]
 80011ec:	68da      	ldr	r2, [r3, #12]
 80011ee:	f022 0220 	bic.w	r2, r2, #32
 80011f2:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80011f4:	68da      	ldr	r2, [r3, #12]
 80011f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011fa:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80011fc:	695a      	ldr	r2, [r3, #20]
 80011fe:	f022 0201 	bic.w	r2, r2, #1
 8001202:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001204:	2320      	movs	r3, #32
 8001206:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800120a:	f000 f9f7 	bl	80015fc <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 800120e:	2000      	movs	r0, #0
}
 8001210:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	f823 2b01 	strh.w	r2, [r3], #1
 8001218:	e7e1      	b.n	80011de <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 800121a:	b921      	cbnz	r1, 8001226 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800121c:	1c59      	adds	r1, r3, #1
 800121e:	6852      	ldr	r2, [r2, #4]
 8001220:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001222:	701a      	strb	r2, [r3, #0]
 8001224:	e7dc      	b.n	80011e0 <UART_Receive_IT+0x26>
 8001226:	6852      	ldr	r2, [r2, #4]
 8001228:	1c59      	adds	r1, r3, #1
 800122a:	6281      	str	r1, [r0, #40]	; 0x28
 800122c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001230:	e7f7      	b.n	8001222 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8001232:	2002      	movs	r0, #2
 8001234:	bd10      	pop	{r4, pc}

08001236 <HAL_UART_ErrorCallback>:
 8001236:	4770      	bx	lr

08001238 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001238:	6803      	ldr	r3, [r0, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800123c:	68d9      	ldr	r1, [r3, #12]
{
 800123e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8001240:	0716      	lsls	r6, r2, #28
{
 8001242:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001244:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8001246:	d107      	bne.n	8001258 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001248:	0696      	lsls	r6, r2, #26
 800124a:	d55a      	bpl.n	8001302 <HAL_UART_IRQHandler+0xca>
 800124c:	068d      	lsls	r5, r1, #26
 800124e:	d558      	bpl.n	8001302 <HAL_UART_IRQHandler+0xca>
}
 8001250:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001254:	f7ff bfb1 	b.w	80011ba <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001258:	f015 0501 	ands.w	r5, r5, #1
 800125c:	d102      	bne.n	8001264 <HAL_UART_IRQHandler+0x2c>
 800125e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001262:	d04e      	beq.n	8001302 <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001264:	07d3      	lsls	r3, r2, #31
 8001266:	d505      	bpl.n	8001274 <HAL_UART_IRQHandler+0x3c>
 8001268:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800126a:	bf42      	ittt	mi
 800126c:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800126e:	f043 0301 	orrmi.w	r3, r3, #1
 8001272:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001274:	0750      	lsls	r0, r2, #29
 8001276:	d504      	bpl.n	8001282 <HAL_UART_IRQHandler+0x4a>
 8001278:	b11d      	cbz	r5, 8001282 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800127a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800127c:	f043 0302 	orr.w	r3, r3, #2
 8001280:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001282:	0793      	lsls	r3, r2, #30
 8001284:	d504      	bpl.n	8001290 <HAL_UART_IRQHandler+0x58>
 8001286:	b11d      	cbz	r5, 8001290 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001288:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800128a:	f043 0304 	orr.w	r3, r3, #4
 800128e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001290:	0716      	lsls	r6, r2, #28
 8001292:	d504      	bpl.n	800129e <HAL_UART_IRQHandler+0x66>
 8001294:	b11d      	cbz	r5, 800129e <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001296:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001298:	f043 0308 	orr.w	r3, r3, #8
 800129c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800129e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d066      	beq.n	8001372 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80012a4:	0695      	lsls	r5, r2, #26
 80012a6:	d504      	bpl.n	80012b2 <HAL_UART_IRQHandler+0x7a>
 80012a8:	0688      	lsls	r0, r1, #26
 80012aa:	d502      	bpl.n	80012b2 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 80012ac:	4620      	mov	r0, r4
 80012ae:	f7ff ff84 	bl	80011ba <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80012b2:	6823      	ldr	r3, [r4, #0]
 80012b4:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80012b6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80012b8:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 80012ba:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80012bc:	d402      	bmi.n	80012c4 <HAL_UART_IRQHandler+0x8c>
 80012be:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80012c2:	d01a      	beq.n	80012fa <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 80012c4:	f7ff fd76 	bl	8000db4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80012c8:	6823      	ldr	r3, [r4, #0]
 80012ca:	695a      	ldr	r2, [r3, #20]
 80012cc:	0652      	lsls	r2, r2, #25
 80012ce:	d510      	bpl.n	80012f2 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80012d0:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80012d2:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80012d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012d8:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80012da:	b150      	cbz	r0, 80012f2 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80012dc:	4b25      	ldr	r3, [pc, #148]	; (8001374 <HAL_UART_IRQHandler+0x13c>)
 80012de:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80012e0:	f7ff fa10 	bl	8000704 <HAL_DMA_Abort_IT>
 80012e4:	2800      	cmp	r0, #0
 80012e6:	d044      	beq.n	8001372 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80012e8:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80012ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80012ee:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80012f0:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80012f2:	4620      	mov	r0, r4
 80012f4:	f7ff ff9f 	bl	8001236 <HAL_UART_ErrorCallback>
 80012f8:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80012fa:	f7ff ff9c 	bl	8001236 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012fe:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001300:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001302:	0616      	lsls	r6, r2, #24
 8001304:	d527      	bpl.n	8001356 <HAL_UART_IRQHandler+0x11e>
 8001306:	060d      	lsls	r5, r1, #24
 8001308:	d525      	bpl.n	8001356 <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800130a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800130e:	2a21      	cmp	r2, #33	; 0x21
 8001310:	d12f      	bne.n	8001372 <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001312:	68a2      	ldr	r2, [r4, #8]
 8001314:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001318:	6a22      	ldr	r2, [r4, #32]
 800131a:	d117      	bne.n	800134c <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800131c:	8811      	ldrh	r1, [r2, #0]
 800131e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001322:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001324:	6921      	ldr	r1, [r4, #16]
 8001326:	b979      	cbnz	r1, 8001348 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8001328:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800132a:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 800132c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800132e:	3a01      	subs	r2, #1
 8001330:	b292      	uxth	r2, r2
 8001332:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001334:	b9ea      	cbnz	r2, 8001372 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001336:	68da      	ldr	r2, [r3, #12]
 8001338:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800133c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800133e:	68da      	ldr	r2, [r3, #12]
 8001340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001348:	3201      	adds	r2, #1
 800134a:	e7ee      	b.n	800132a <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800134c:	1c51      	adds	r1, r2, #1
 800134e:	6221      	str	r1, [r4, #32]
 8001350:	7812      	ldrb	r2, [r2, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	e7ea      	b.n	800132c <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001356:	0650      	lsls	r0, r2, #25
 8001358:	d50b      	bpl.n	8001372 <HAL_UART_IRQHandler+0x13a>
 800135a:	064a      	lsls	r2, r1, #25
 800135c:	d509      	bpl.n	8001372 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800135e:	68da      	ldr	r2, [r3, #12]
 8001360:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001364:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001366:	2320      	movs	r3, #32
 8001368:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800136c:	4620      	mov	r0, r4
 800136e:	f7ff ff23 	bl	80011b8 <HAL_UART_TxCpltCallback>
 8001372:	bd70      	pop	{r4, r5, r6, pc}
 8001374:	08001379 	.word	0x08001379

08001378 <UART_DMAAbortOnError>:
{
 8001378:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800137a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 800137c:	2300      	movs	r3, #0
 800137e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001380:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001382:	f7ff ff58 	bl	8001236 <HAL_UART_ErrorCallback>
 8001386:	bd08      	pop	{r3, pc}

08001388 <MX_GPIO_Init>:
        * EXTI
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8001388:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138a:	2214      	movs	r2, #20
{
 800138c:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138e:	eb0d 0002 	add.w	r0, sp, r2
 8001392:	2100      	movs	r1, #0
 8001394:	f000 fb12 	bl	80019bc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001398:	2400      	movs	r4, #0
 800139a:	4b29      	ldr	r3, [pc, #164]	; (8001440 <MX_GPIO_Init+0xb8>)
 800139c:	9401      	str	r4, [sp, #4]
 800139e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013a0:	4e28      	ldr	r6, [pc, #160]	; (8001444 <MX_GPIO_Init+0xbc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a2:	f042 0204 	orr.w	r2, r2, #4
 80013a6:	631a      	str	r2, [r3, #48]	; 0x30
 80013a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013aa:	f002 0204 	and.w	r2, r2, #4
 80013ae:	9201      	str	r2, [sp, #4]
 80013b0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013b2:	9402      	str	r4, [sp, #8]
 80013b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013ba:	631a      	str	r2, [r3, #48]	; 0x30
 80013bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013be:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80013c2:	9202      	str	r2, [sp, #8]
 80013c4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c6:	9403      	str	r4, [sp, #12]
 80013c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013ca:	f042 0201 	orr.w	r2, r2, #1
 80013ce:	631a      	str	r2, [r3, #48]	; 0x30
 80013d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013d2:	f002 0201 	and.w	r2, r2, #1
 80013d6:	9203      	str	r2, [sp, #12]
 80013d8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013da:	9404      	str	r4, [sp, #16]
 80013dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013de:	f042 0202 	orr.w	r2, r2, #2
 80013e2:	631a      	str	r2, [r3, #48]	; 0x30
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013ea:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ec:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013ee:	4630      	mov	r0, r6
 80013f0:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f2:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013f4:	f7ff fa6e 	bl	80008d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013fc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013fe:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <MX_GPIO_Init+0xc0>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001402:	4812      	ldr	r0, [pc, #72]	; (800144c <MX_GPIO_Init+0xc4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001404:	9306      	str	r3, [sp, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001406:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800140a:	f7ff f98d 	bl	8000728 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 800140e:	2320      	movs	r3, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001410:	a905      	add	r1, sp, #20
 8001412:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = LD2_Pin;
 8001414:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001416:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800141c:	f7ff f984 	bl	8000728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001420:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001424:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001426:	2312      	movs	r3, #18
 8001428:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142a:	2303      	movs	r3, #3
 800142c:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001430:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001432:	4807      	ldr	r0, [pc, #28]	; (8001450 <MX_GPIO_Init+0xc8>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001434:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001436:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001438:	f7ff f976 	bl	8000728 <HAL_GPIO_Init>

}
 800143c:	b00a      	add	sp, #40	; 0x28
 800143e:	bd70      	pop	{r4, r5, r6, pc}
 8001440:	40023800 	.word	0x40023800
 8001444:	40020000 	.word	0x40020000
 8001448:	10210000 	.word	0x10210000
 800144c:	40020800 	.word	0x40020800
 8001450:	40020400 	.word	0x40020400

08001454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001454:	b530      	push	{r4, r5, lr}
 8001456:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001458:	2230      	movs	r2, #48	; 0x30
 800145a:	2100      	movs	r1, #0
 800145c:	a808      	add	r0, sp, #32
 800145e:	f000 faad 	bl	80019bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001462:	2100      	movs	r1, #0
 8001464:	2214      	movs	r2, #20
 8001466:	a803      	add	r0, sp, #12
 8001468:	f000 faa8 	bl	80019bc <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800146c:	2400      	movs	r4, #0
 800146e:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <SystemClock_Config+0x8c>)
 8001470:	9401      	str	r4, [sp, #4]
 8001472:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001474:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001478:	641a      	str	r2, [r3, #64]	; 0x40
 800147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800147c:	4a19      	ldr	r2, [pc, #100]	; (80014e4 <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001482:	9301      	str	r3, [sp, #4]
 8001484:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001486:	9402      	str	r4, [sp, #8]
 8001488:	6813      	ldr	r3, [r2, #0]
 800148a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800148e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	6813      	ldr	r3, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001496:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001498:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800149c:	9302      	str	r3, [sp, #8]
 800149e:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014a0:	2301      	movs	r3, #1
 80014a2:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014a4:	2310      	movs	r3, #16
 80014a6:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014a8:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014aa:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80014ae:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014b0:	2304      	movs	r3, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014b2:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014b4:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b6:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014b8:	2307      	movs	r3, #7
 80014ba:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014bc:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014be:	950e      	str	r5, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c0:	f7ff fa0e 	bl	80008e0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c4:	230f      	movs	r3, #15
 80014c6:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014c8:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014ce:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d0:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d2:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014d4:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014d6:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014d8:	f7ff fbb2 	bl	8000c40 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80014dc:	b015      	add	sp, #84	; 0x54
 80014de:	bd30      	pop	{r4, r5, pc}
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40007000 	.word	0x40007000

080014e8 <main>:
{
 80014e8:	b508      	push	{r3, lr}
  HAL_Init();
 80014ea:	f7ff f875 	bl	80005d8 <HAL_Init>
  SystemClock_Config();
 80014ee:	f7ff ffb1 	bl	8001454 <SystemClock_Config>
  MX_GPIO_Init();
 80014f2:	f7ff ff49 	bl	8001388 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014f6:	f000 f989 	bl	800180c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80014fa:	f000 f96b 	bl	80017d4 <MX_USART1_UART_Init>
  RN4020_Init();
 80014fe:	f000 f811 	bl	8001524 <RN4020_Init>
    RN4020_Process();
 8001502:	f000 f855 	bl	80015b0 <RN4020_Process>
 8001506:	e7fc      	b.n	8001502 <main+0x1a>

08001508 <_write>:
/*
 * Override _write function.
 *
 * Note: use usart2 instead of usart1 for debugging.
 */
int _write(int file, char *ptr, int len) {
 8001508:	b510      	push	{r4, lr}
  //HAL_UART_Transmit(&huart1, (uint8_t *) ptr, (uint16_t) len, 0xFFFFFFFF);
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, (uint16_t) len, 0xFFFFFFFF);
 800150a:	f04f 33ff 	mov.w	r3, #4294967295
int _write(int file, char *ptr, int len) {
 800150e:	4614      	mov	r4, r2
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, (uint16_t) len, 0xFFFFFFFF);
 8001510:	4802      	ldr	r0, [pc, #8]	; (800151c <_write+0x14>)
 8001512:	b292      	uxth	r2, r2
 8001514:	f7ff fdcc 	bl	80010b0 <HAL_UART_Transmit>
  return len;
}
 8001518:	4620      	mov	r0, r4
 800151a:	bd10      	pop	{r4, pc}
 800151c:	2000031c 	.word	0x2000031c

08001520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001520:	4770      	bx	lr
	...

08001524 <RN4020_Init>:

/**
 * Initialize interface to RN4020
 */
void RN4020_Init(void) {
  HAL_UART_Receive_IT(&huart1, &uart_rx_data, 1);
 8001524:	2201      	movs	r2, #1
 8001526:	4902      	ldr	r1, [pc, #8]	; (8001530 <RN4020_Init+0xc>)
 8001528:	4802      	ldr	r0, [pc, #8]	; (8001534 <RN4020_Init+0x10>)
 800152a:	f7ff be1e 	b.w	800116a <HAL_UART_Receive_IT>
 800152e:	bf00      	nop
 8001530:	200002d8 	.word	0x200002d8
 8001534:	200002dc 	.word	0x200002dc

08001538 <sendData>:
}

/**
 * Send byte array (max. 20 bytes) to a BLE central via RN4020 module
 */
void sendData(uint8_t *data, int len) {
 8001538:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800153c:	4607      	mov	r7, r0
 800153e:	460c      	mov	r4, r1
  char ascii_hex_buf[2];

  strcpy(send_buf, NOTIFY_COMMAND);
 8001540:	4816      	ldr	r0, [pc, #88]	; (800159c <sendData+0x64>)
 8001542:	4917      	ldr	r1, [pc, #92]	; (80015a0 <sendData+0x68>)
 8001544:	4d17      	ldr	r5, [pc, #92]	; (80015a4 <sendData+0x6c>)
  for (int i = 0; i < len; i++) {
    sprintf(ascii_hex_buf, "%02x", data[i]);
 8001546:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80015ac <sendData+0x74>
  strcpy(send_buf, NOTIFY_COMMAND);
 800154a:	f000 fac7 	bl	8001adc <strcpy>
  for (int i = 0; i < len; i++) {
 800154e:	463e      	mov	r6, r7
 8001550:	1bf3      	subs	r3, r6, r7
 8001552:	429c      	cmp	r4, r3
 8001554:	f105 0502 	add.w	r5, r5, #2
 8001558:	dc11      	bgt.n	800157e <sendData+0x46>
    send_buf[37+i*2] = ascii_hex_buf[0];
    send_buf[37+i*2+1] = ascii_hex_buf[1];
  }
  send_buf[37+len*2] = '\n';
 800155a:	4910      	ldr	r1, [pc, #64]	; (800159c <sendData+0x64>)

  HAL_UART_Transmit(&huart1, (uint8_t *)send_buf, 37+len*2+1, 0xffff);
 800155c:	4812      	ldr	r0, [pc, #72]	; (80015a8 <sendData+0x70>)
  send_buf[37+len*2] = '\n';
 800155e:	eb01 0344 	add.w	r3, r1, r4, lsl #1
 8001562:	220a      	movs	r2, #10
 8001564:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  HAL_UART_Transmit(&huart1, (uint8_t *)send_buf, 37+len*2+1, 0xffff);
 8001568:	f104 0213 	add.w	r2, r4, #19
 800156c:	0052      	lsls	r2, r2, #1
 800156e:	b292      	uxth	r2, r2
 8001570:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001574:	f7ff fd9c 	bl	80010b0 <HAL_UART_Transmit>
}
 8001578:	b002      	add	sp, #8
 800157a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sprintf(ascii_hex_buf, "%02x", data[i]);
 800157e:	f816 2b01 	ldrb.w	r2, [r6], #1
 8001582:	4641      	mov	r1, r8
 8001584:	a801      	add	r0, sp, #4
 8001586:	f000 fa85 	bl	8001a94 <siprintf>
    send_buf[37+i*2] = ascii_hex_buf[0];
 800158a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800158e:	f805 3c02 	strb.w	r3, [r5, #-2]
    send_buf[37+i*2+1] = ascii_hex_buf[1];
 8001592:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001596:	f805 3c01 	strb.w	r3, [r5, #-1]
 800159a:	e7d9      	b.n	8001550 <sendData+0x18>
 800159c:	20000274 	.word	0x20000274
 80015a0:	08002b00 	.word	0x08002b00
 80015a4:	20000299 	.word	0x20000299
 80015a8:	200002dc 	.word	0x200002dc
 80015ac:	08002b26 	.word	0x08002b26

080015b0 <RN4020_Process>:

/**
 * Include this process in the infinite loop of main.c.
 */
void RN4020_Process(void) {
 80015b0:	b530      	push	{r4, r5, lr}
  uint8_t data[20] = { 0 };
  if (command_received) {
 80015b2:	4c0e      	ldr	r4, [pc, #56]	; (80015ec <RN4020_Process+0x3c>)
void RN4020_Process(void) {
 80015b4:	b087      	sub	sp, #28
  uint8_t data[20] = { 0 };
 80015b6:	2214      	movs	r2, #20
 80015b8:	2100      	movs	r1, #0
 80015ba:	a801      	add	r0, sp, #4
 80015bc:	f000 f9fe 	bl	80019bc <memset>
  if (command_received) {
 80015c0:	7823      	ldrb	r3, [r4, #0]
 80015c2:	b18b      	cbz	r3, 80015e8 <RN4020_Process+0x38>
  data[len] = '\0';
 80015c4:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <RN4020_Process+0x40>)
 80015c6:	480b      	ldr	r0, [pc, #44]	; (80015f4 <RN4020_Process+0x44>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2500      	movs	r5, #0
 80015cc:	541d      	strb	r5, [r3, r0]
  printf("%s\n", data);
 80015ce:	f000 fa59 	bl	8001a84 <puts>
    /* ADD CODE HERE START */
    receiveData(data_buf, data_len);
    data[0] = cnt++;
 80015d2:	4a09      	ldr	r2, [pc, #36]	; (80015f8 <RN4020_Process+0x48>)
 80015d4:	7813      	ldrb	r3, [r2, #0]
 80015d6:	f88d 3004 	strb.w	r3, [sp, #4]
 80015da:	1c59      	adds	r1, r3, #1
 80015dc:	7011      	strb	r1, [r2, #0]
    sendData(data, 1);
 80015de:	a801      	add	r0, sp, #4
 80015e0:	2101      	movs	r1, #1
 80015e2:	f7ff ffa9 	bl	8001538 <sendData>
    /* ADD CODE HERE END */
    command_received = false;
 80015e6:	7025      	strb	r5, [r4, #0]
  }
}
 80015e8:	b007      	add	sp, #28
 80015ea:	bd30      	pop	{r4, r5, pc}
 80015ec:	200001f9 	.word	0x200001f9
 80015f0:	20000270 	.word	0x20000270
 80015f4:	20000250 	.word	0x20000250
 80015f8:	200001f8 	.word	0x200001f8

080015fc <HAL_UART_RxCpltCallback>:

/**
 * Receive data from RN4020 via usart1.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 80015fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  static int idx = 0;
  static uint8_t uart_rx_buf[BUFSIZE];
  char ascii_hex_buf[3];
  if (!command_received) {
 8001600:	4a28      	ldr	r2, [pc, #160]	; (80016a4 <HAL_UART_RxCpltCallback+0xa8>)
 8001602:	7813      	ldrb	r3, [r2, #0]
 8001604:	4690      	mov	r8, r2
 8001606:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 800160a:	bb5b      	cbnz	r3, 8001664 <HAL_UART_RxCpltCallback+0x68>
    if (uart_rx_data == '\n') {
 800160c:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <HAL_UART_RxCpltCallback+0xac>)
 800160e:	4e27      	ldr	r6, [pc, #156]	; (80016ac <HAL_UART_RxCpltCallback+0xb0>)
 8001610:	7819      	ldrb	r1, [r3, #0]
 8001612:	4c27      	ldr	r4, [pc, #156]	; (80016b0 <HAL_UART_RxCpltCallback+0xb4>)
      uart_rx_buf[idx] = '\0';
 8001614:	6832      	ldr	r2, [r6, #0]
    if (uart_rx_data == '\n') {
 8001616:	290a      	cmp	r1, #10
 8001618:	d13f      	bne.n	800169a <HAL_UART_RxCpltCallback+0x9e>
      uart_rx_buf[idx] = '\0';
 800161a:	54a5      	strb	r5, [r4, r2]
      //printf("uart_rx_buf: %s\n", uart_rx_buf);
      // Receive NOTIFY in the form of "WV,XXXX,DDDD." from RN4020.
      if (uart_rx_buf[0] == 'W' && uart_rx_buf[1] == 'V' && uart_rx_buf[2] == ',') {
 800161c:	7821      	ldrb	r1, [r4, #0]
 800161e:	2957      	cmp	r1, #87	; 0x57
 8001620:	d119      	bne.n	8001656 <HAL_UART_RxCpltCallback+0x5a>
 8001622:	7861      	ldrb	r1, [r4, #1]
 8001624:	2956      	cmp	r1, #86	; 0x56
 8001626:	d116      	bne.n	8001656 <HAL_UART_RxCpltCallback+0x5a>
 8001628:	78a1      	ldrb	r1, [r4, #2]
 800162a:	292c      	cmp	r1, #44	; 0x2c
 800162c:	d113      	bne.n	8001656 <HAL_UART_RxCpltCallback+0x5a>
        data_len = idx - 10;
 800162e:	4f21      	ldr	r7, [pc, #132]	; (80016b4 <HAL_UART_RxCpltCallback+0xb8>)
        // Convert ASCII HEX (XX) to uint8_t
        for (int i = 0; i < data_len / 2; i++) {
          ascii_hex_buf[0] = uart_rx_buf[8+i*2];
          ascii_hex_buf[1] = uart_rx_buf[8+i*2+1];
          ascii_hex_buf[2] = '\0';
          data_buf[i] = (uint8_t)strtol(ascii_hex_buf, NULL, 16);
 8001630:	f8df b088 	ldr.w	fp, [pc, #136]	; 80016bc <HAL_UART_RxCpltCallback+0xc0>
        data_len = idx - 10;
 8001634:	3a0a      	subs	r2, #10
 8001636:	603a      	str	r2, [r7, #0]
 8001638:	3408      	adds	r4, #8
        for (int i = 0; i < data_len / 2; i++) {
 800163a:	f04f 0902 	mov.w	r9, #2
          ascii_hex_buf[2] = '\0';
 800163e:	46aa      	mov	sl, r5
        for (int i = 0; i < data_len / 2; i++) {
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	fb93 f3f9 	sdiv	r3, r3, r9
 8001646:	429d      	cmp	r5, r3
 8001648:	f104 0402 	add.w	r4, r4, #2
 800164c:	db12      	blt.n	8001674 <HAL_UART_RxCpltCallback+0x78>
        }
        data_len = data_len/2;
 800164e:	603b      	str	r3, [r7, #0]
        command_received = true;
 8001650:	2301      	movs	r3, #1
 8001652:	f888 3000 	strb.w	r3, [r8]
      }
      idx = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	6033      	str	r3, [r6, #0]
    } else {
      uart_rx_buf[idx++] = uart_rx_data;
    }
    if (idx >= BUFSIZE) idx = 0;
 800165a:	6833      	ldr	r3, [r6, #0]
 800165c:	2b3f      	cmp	r3, #63	; 0x3f
 800165e:	bf84      	itt	hi
 8001660:	2300      	movhi	r3, #0
 8001662:	6033      	strhi	r3, [r6, #0]
  }
  HAL_UART_Receive_IT(&huart1, &uart_rx_data, 1);
 8001664:	2201      	movs	r2, #1
 8001666:	4910      	ldr	r1, [pc, #64]	; (80016a8 <HAL_UART_RxCpltCallback+0xac>)
 8001668:	4813      	ldr	r0, [pc, #76]	; (80016b8 <HAL_UART_RxCpltCallback+0xbc>)
 800166a:	f7ff fd7e 	bl	800116a <HAL_UART_Receive_IT>
}
 800166e:	b003      	add	sp, #12
 8001670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          ascii_hex_buf[0] = uart_rx_buf[8+i*2];
 8001674:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8001678:	f88d 3004 	strb.w	r3, [sp, #4]
          data_buf[i] = (uint8_t)strtol(ascii_hex_buf, NULL, 16);
 800167c:	2210      	movs	r2, #16
          ascii_hex_buf[1] = uart_rx_buf[8+i*2+1];
 800167e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8001682:	f88d 3005 	strb.w	r3, [sp, #5]
          data_buf[i] = (uint8_t)strtol(ascii_hex_buf, NULL, 16);
 8001686:	2100      	movs	r1, #0
 8001688:	a801      	add	r0, sp, #4
          ascii_hex_buf[2] = '\0';
 800168a:	f88d a006 	strb.w	sl, [sp, #6]
          data_buf[i] = (uint8_t)strtol(ascii_hex_buf, NULL, 16);
 800168e:	f000 faad 	bl	8001bec <strtol>
 8001692:	f80b 0005 	strb.w	r0, [fp, r5]
        for (int i = 0; i < data_len / 2; i++) {
 8001696:	3501      	adds	r5, #1
 8001698:	e7d2      	b.n	8001640 <HAL_UART_RxCpltCallback+0x44>
      uart_rx_buf[idx++] = uart_rx_data;
 800169a:	1c50      	adds	r0, r2, #1
 800169c:	6030      	str	r0, [r6, #0]
 800169e:	54a1      	strb	r1, [r4, r2]
 80016a0:	e7db      	b.n	800165a <HAL_UART_RxCpltCallback+0x5e>
 80016a2:	bf00      	nop
 80016a4:	200001f9 	.word	0x200001f9
 80016a8:	200002d8 	.word	0x200002d8
 80016ac:	200001fc 	.word	0x200001fc
 80016b0:	20000200 	.word	0x20000200
 80016b4:	20000270 	.word	0x20000270
 80016b8:	200002dc 	.word	0x200002dc
 80016bc:	20000250 	.word	0x20000250

080016c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c0:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <HAL_MspInit+0x3c>)
 80016c4:	2100      	movs	r1, #0
 80016c6:	9100      	str	r1, [sp, #0]
 80016c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016ce:	645a      	str	r2, [r3, #68]	; 0x44
 80016d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016d2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80016d6:	9200      	str	r2, [sp, #0]
 80016d8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016da:	9101      	str	r1, [sp, #4]
 80016dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016de:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016e2:	641a      	str	r2, [r3, #64]	; 0x40
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ea:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016ec:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ee:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016f0:	f7fe ff9e 	bl	8000630 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f4:	b003      	add	sp, #12
 80016f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80016fa:	bf00      	nop
 80016fc:	40023800 	.word	0x40023800

08001700 <NMI_Handler>:
 8001700:	4770      	bx	lr

08001702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001702:	e7fe      	b.n	8001702 <HardFault_Handler>

08001704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001704:	e7fe      	b.n	8001704 <MemManage_Handler>

08001706 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001706:	e7fe      	b.n	8001706 <BusFault_Handler>

08001708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001708:	e7fe      	b.n	8001708 <UsageFault_Handler>

0800170a <SVC_Handler>:
 800170a:	4770      	bx	lr

0800170c <DebugMon_Handler>:
 800170c:	4770      	bx	lr

0800170e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800170e:	4770      	bx	lr

08001710 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001710:	f7fe bf7c 	b.w	800060c <HAL_IncTick>

08001714 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001714:	4801      	ldr	r0, [pc, #4]	; (800171c <USART1_IRQHandler+0x8>)
 8001716:	f7ff bd8f 	b.w	8001238 <HAL_UART_IRQHandler>
 800171a:	bf00      	nop
 800171c:	200002dc 	.word	0x200002dc

08001720 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001720:	b570      	push	{r4, r5, r6, lr}
 8001722:	460e      	mov	r6, r1
 8001724:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001726:	460c      	mov	r4, r1
 8001728:	1ba3      	subs	r3, r4, r6
 800172a:	429d      	cmp	r5, r3
 800172c:	dc01      	bgt.n	8001732 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800172e:	4628      	mov	r0, r5
 8001730:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001732:	f3af 8000 	nop.w
 8001736:	f804 0b01 	strb.w	r0, [r4], #1
 800173a:	e7f5      	b.n	8001728 <_read+0x8>

0800173c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800173c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <_sbrk+0x2c>)
 8001740:	6819      	ldr	r1, [r3, #0]
{
 8001742:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001744:	b909      	cbnz	r1, 800174a <_sbrk+0xe>
		heap_end = &end;
 8001746:	4909      	ldr	r1, [pc, #36]	; (800176c <_sbrk+0x30>)
 8001748:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800174a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800174c:	4669      	mov	r1, sp
 800174e:	4402      	add	r2, r0
 8001750:	428a      	cmp	r2, r1
 8001752:	d906      	bls.n	8001762 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001754:	f000 f908 	bl	8001968 <__errno>
 8001758:	230c      	movs	r3, #12
 800175a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800175c:	f04f 30ff 	mov.w	r0, #4294967295
 8001760:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8001762:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001764:	bd08      	pop	{r3, pc}
 8001766:	bf00      	nop
 8001768:	20000240 	.word	0x20000240
 800176c:	20000360 	.word	0x20000360

08001770 <_close>:

int _close(int file)
{
	return -1;
}
 8001770:	f04f 30ff 	mov.w	r0, #4294967295
 8001774:	4770      	bx	lr

08001776 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800177a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800177c:	2000      	movs	r0, #0
 800177e:	4770      	bx	lr

08001780 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001780:	2001      	movs	r0, #1
 8001782:	4770      	bx	lr

08001784 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001784:	2000      	movs	r0, #0
 8001786:	4770      	bx	lr

08001788 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001788:	490f      	ldr	r1, [pc, #60]	; (80017c8 <SystemInit+0x40>)
 800178a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800178e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001796:	4b0d      	ldr	r3, [pc, #52]	; (80017cc <SystemInit+0x44>)
 8001798:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800179a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800179c:	f042 0201 	orr.w	r2, r2, #1
 80017a0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80017a2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80017aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80017ae:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80017b0:	4a07      	ldr	r2, [pc, #28]	; (80017d0 <SystemInit+0x48>)
 80017b2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017ba:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80017bc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80017c2:	608b      	str	r3, [r1, #8]
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000ed00 	.word	0xe000ed00
 80017cc:	40023800 	.word	0x40023800
 80017d0:	24003010 	.word	0x24003010

080017d4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80017d4:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 80017d6:	480b      	ldr	r0, [pc, #44]	; (8001804 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <MX_USART1_UART_Init+0x34>)
 80017da:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80017de:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017e2:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017e4:	2300      	movs	r3, #0
 80017e6:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017e8:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017ea:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017ec:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ee:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017f2:	f7ff fc2f 	bl	8001054 <HAL_UART_Init>
 80017f6:	b118      	cbz	r0, 8001800 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 80017f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80017fc:	f7ff be90 	b.w	8001520 <Error_Handler>
 8001800:	bd08      	pop	{r3, pc}
 8001802:	bf00      	nop
 8001804:	200002dc 	.word	0x200002dc
 8001808:	40011000 	.word	0x40011000

0800180c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800180c:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 800180e:	480b      	ldr	r0, [pc, #44]	; (800183c <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <MX_USART2_UART_Init+0x34>)
 8001812:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8001816:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800181a:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800181c:	2300      	movs	r3, #0
 800181e:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001820:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001822:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001824:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001826:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001828:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800182a:	f7ff fc13 	bl	8001054 <HAL_UART_Init>
 800182e:	b118      	cbz	r0, 8001838 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8001830:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001834:	f7ff be74 	b.w	8001520 <Error_Handler>
 8001838:	bd08      	pop	{r3, pc}
 800183a:	bf00      	nop
 800183c:	2000031c 	.word	0x2000031c
 8001840:	40004400 	.word	0x40004400

08001844 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001844:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001846:	2214      	movs	r2, #20
{
 8001848:	b08a      	sub	sp, #40	; 0x28
 800184a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	2100      	movs	r1, #0
 800184e:	eb0d 0002 	add.w	r0, sp, r2
 8001852:	f000 f8b3 	bl	80019bc <memset>
  if(uartHandle->Instance==USART1)
 8001856:	6823      	ldr	r3, [r4, #0]
 8001858:	4a2a      	ldr	r2, [pc, #168]	; (8001904 <HAL_UART_MspInit+0xc0>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d12e      	bne.n	80018bc <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800185e:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <HAL_UART_MspInit+0xc4>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001860:	482a      	ldr	r0, [pc, #168]	; (800190c <HAL_UART_MspInit+0xc8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001862:	2400      	movs	r4, #0
 8001864:	9401      	str	r4, [sp, #4]
 8001866:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001868:	f042 0210 	orr.w	r2, r2, #16
 800186c:	645a      	str	r2, [r3, #68]	; 0x44
 800186e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001870:	f002 0210 	and.w	r2, r2, #16
 8001874:	9201      	str	r2, [sp, #4]
 8001876:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001878:	9402      	str	r4, [sp, #8]
 800187a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800187c:	f042 0201 	orr.w	r2, r2, #1
 8001880:	631a      	str	r2, [r3, #48]	; 0x30
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	9302      	str	r3, [sp, #8]
 800188a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800188c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001890:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001896:	2301      	movs	r3, #1
 8001898:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189a:	2303      	movs	r3, #3
 800189c:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189e:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018a0:	2307      	movs	r3, #7
 80018a2:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a4:	f7fe ff40 	bl	8000728 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 15);
 80018a8:	2025      	movs	r0, #37	; 0x25
 80018aa:	220f      	movs	r2, #15
 80018ac:	4621      	mov	r1, r4
 80018ae:	f7fe fed1 	bl	8000654 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018b2:	2025      	movs	r0, #37	; 0x25
 80018b4:	f7fe ff02 	bl	80006bc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80018b8:	b00a      	add	sp, #40	; 0x28
 80018ba:	bd10      	pop	{r4, pc}
  else if(uartHandle->Instance==USART2)
 80018bc:	4a14      	ldr	r2, [pc, #80]	; (8001910 <HAL_UART_MspInit+0xcc>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d1fa      	bne.n	80018b8 <HAL_UART_MspInit+0x74>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_UART_MspInit+0xc4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c4:	4811      	ldr	r0, [pc, #68]	; (800190c <HAL_UART_MspInit+0xc8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80018c6:	2100      	movs	r1, #0
 80018c8:	9103      	str	r1, [sp, #12]
 80018ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018cc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80018d0:	641a      	str	r2, [r3, #64]	; 0x40
 80018d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018d4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80018d8:	9203      	str	r2, [sp, #12]
 80018da:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018dc:	9104      	str	r1, [sp, #16]
 80018de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018e0:	f042 0201 	orr.w	r2, r2, #1
 80018e4:	631a      	str	r2, [r3, #48]	; 0x30
 80018e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	9304      	str	r3, [sp, #16]
 80018ee:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018f0:	230c      	movs	r3, #12
 80018f2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f8:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018fa:	2307      	movs	r3, #7
 80018fc:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fe:	f7fe ff13 	bl	8000728 <HAL_GPIO_Init>
}
 8001902:	e7d9      	b.n	80018b8 <HAL_UART_MspInit+0x74>
 8001904:	40011000 	.word	0x40011000
 8001908:	40023800 	.word	0x40023800
 800190c:	40020000 	.word	0x40020000
 8001910:	40004400 	.word	0x40004400

08001914 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001914:	f8df d034 	ldr.w	sp, [pc, #52]	; 800194c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001918:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800191a:	e003      	b.n	8001924 <LoopCopyDataInit>

0800191c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800191e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001920:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001922:	3104      	adds	r1, #4

08001924 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001924:	480b      	ldr	r0, [pc, #44]	; (8001954 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001928:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800192a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800192c:	d3f6      	bcc.n	800191c <CopyDataInit>
  ldr  r2, =_sbss
 800192e:	4a0b      	ldr	r2, [pc, #44]	; (800195c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001930:	e002      	b.n	8001938 <LoopFillZerobss>

08001932 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001932:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001934:	f842 3b04 	str.w	r3, [r2], #4

08001938 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800193a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800193c:	d3f9      	bcc.n	8001932 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800193e:	f7ff ff23 	bl	8001788 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001942:	f000 f817 	bl	8001974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001946:	f7ff fdcf 	bl	80014e8 <main>
  bx  lr    
 800194a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800194c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001950:	08002cf8 	.word	0x08002cf8
  ldr  r0, =_sdata
 8001954:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001958:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800195c:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001960:	20000360 	.word	0x20000360

08001964 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001964:	e7fe      	b.n	8001964 <ADC_IRQHandler>
	...

08001968 <__errno>:
 8001968:	4b01      	ldr	r3, [pc, #4]	; (8001970 <__errno+0x8>)
 800196a:	6818      	ldr	r0, [r3, #0]
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	2000000c 	.word	0x2000000c

08001974 <__libc_init_array>:
 8001974:	b570      	push	{r4, r5, r6, lr}
 8001976:	4e0d      	ldr	r6, [pc, #52]	; (80019ac <__libc_init_array+0x38>)
 8001978:	4c0d      	ldr	r4, [pc, #52]	; (80019b0 <__libc_init_array+0x3c>)
 800197a:	1ba4      	subs	r4, r4, r6
 800197c:	10a4      	asrs	r4, r4, #2
 800197e:	2500      	movs	r5, #0
 8001980:	42a5      	cmp	r5, r4
 8001982:	d109      	bne.n	8001998 <__libc_init_array+0x24>
 8001984:	4e0b      	ldr	r6, [pc, #44]	; (80019b4 <__libc_init_array+0x40>)
 8001986:	4c0c      	ldr	r4, [pc, #48]	; (80019b8 <__libc_init_array+0x44>)
 8001988:	f001 f8ae 	bl	8002ae8 <_init>
 800198c:	1ba4      	subs	r4, r4, r6
 800198e:	10a4      	asrs	r4, r4, #2
 8001990:	2500      	movs	r5, #0
 8001992:	42a5      	cmp	r5, r4
 8001994:	d105      	bne.n	80019a2 <__libc_init_array+0x2e>
 8001996:	bd70      	pop	{r4, r5, r6, pc}
 8001998:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800199c:	4798      	blx	r3
 800199e:	3501      	adds	r5, #1
 80019a0:	e7ee      	b.n	8001980 <__libc_init_array+0xc>
 80019a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019a6:	4798      	blx	r3
 80019a8:	3501      	adds	r5, #1
 80019aa:	e7f2      	b.n	8001992 <__libc_init_array+0x1e>
 80019ac:	08002cf0 	.word	0x08002cf0
 80019b0:	08002cf0 	.word	0x08002cf0
 80019b4:	08002cf0 	.word	0x08002cf0
 80019b8:	08002cf4 	.word	0x08002cf4

080019bc <memset>:
 80019bc:	4402      	add	r2, r0
 80019be:	4603      	mov	r3, r0
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d100      	bne.n	80019c6 <memset+0xa>
 80019c4:	4770      	bx	lr
 80019c6:	f803 1b01 	strb.w	r1, [r3], #1
 80019ca:	e7f9      	b.n	80019c0 <memset+0x4>

080019cc <_puts_r>:
 80019cc:	b570      	push	{r4, r5, r6, lr}
 80019ce:	460e      	mov	r6, r1
 80019d0:	4605      	mov	r5, r0
 80019d2:	b118      	cbz	r0, 80019dc <_puts_r+0x10>
 80019d4:	6983      	ldr	r3, [r0, #24]
 80019d6:	b90b      	cbnz	r3, 80019dc <_puts_r+0x10>
 80019d8:	f000 fad0 	bl	8001f7c <__sinit>
 80019dc:	69ab      	ldr	r3, [r5, #24]
 80019de:	68ac      	ldr	r4, [r5, #8]
 80019e0:	b913      	cbnz	r3, 80019e8 <_puts_r+0x1c>
 80019e2:	4628      	mov	r0, r5
 80019e4:	f000 faca 	bl	8001f7c <__sinit>
 80019e8:	4b23      	ldr	r3, [pc, #140]	; (8001a78 <_puts_r+0xac>)
 80019ea:	429c      	cmp	r4, r3
 80019ec:	d117      	bne.n	8001a1e <_puts_r+0x52>
 80019ee:	686c      	ldr	r4, [r5, #4]
 80019f0:	89a3      	ldrh	r3, [r4, #12]
 80019f2:	071b      	lsls	r3, r3, #28
 80019f4:	d51d      	bpl.n	8001a32 <_puts_r+0x66>
 80019f6:	6923      	ldr	r3, [r4, #16]
 80019f8:	b1db      	cbz	r3, 8001a32 <_puts_r+0x66>
 80019fa:	3e01      	subs	r6, #1
 80019fc:	68a3      	ldr	r3, [r4, #8]
 80019fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001a02:	3b01      	subs	r3, #1
 8001a04:	60a3      	str	r3, [r4, #8]
 8001a06:	b9e9      	cbnz	r1, 8001a44 <_puts_r+0x78>
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	da2e      	bge.n	8001a6a <_puts_r+0x9e>
 8001a0c:	4622      	mov	r2, r4
 8001a0e:	210a      	movs	r1, #10
 8001a10:	4628      	mov	r0, r5
 8001a12:	f000 f901 	bl	8001c18 <__swbuf_r>
 8001a16:	3001      	adds	r0, #1
 8001a18:	d011      	beq.n	8001a3e <_puts_r+0x72>
 8001a1a:	200a      	movs	r0, #10
 8001a1c:	bd70      	pop	{r4, r5, r6, pc}
 8001a1e:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <_puts_r+0xb0>)
 8001a20:	429c      	cmp	r4, r3
 8001a22:	d101      	bne.n	8001a28 <_puts_r+0x5c>
 8001a24:	68ac      	ldr	r4, [r5, #8]
 8001a26:	e7e3      	b.n	80019f0 <_puts_r+0x24>
 8001a28:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <_puts_r+0xb4>)
 8001a2a:	429c      	cmp	r4, r3
 8001a2c:	bf08      	it	eq
 8001a2e:	68ec      	ldreq	r4, [r5, #12]
 8001a30:	e7de      	b.n	80019f0 <_puts_r+0x24>
 8001a32:	4621      	mov	r1, r4
 8001a34:	4628      	mov	r0, r5
 8001a36:	f000 f941 	bl	8001cbc <__swsetup_r>
 8001a3a:	2800      	cmp	r0, #0
 8001a3c:	d0dd      	beq.n	80019fa <_puts_r+0x2e>
 8001a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8001a42:	bd70      	pop	{r4, r5, r6, pc}
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	da04      	bge.n	8001a52 <_puts_r+0x86>
 8001a48:	69a2      	ldr	r2, [r4, #24]
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	db06      	blt.n	8001a5c <_puts_r+0x90>
 8001a4e:	290a      	cmp	r1, #10
 8001a50:	d004      	beq.n	8001a5c <_puts_r+0x90>
 8001a52:	6823      	ldr	r3, [r4, #0]
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	6022      	str	r2, [r4, #0]
 8001a58:	7019      	strb	r1, [r3, #0]
 8001a5a:	e7cf      	b.n	80019fc <_puts_r+0x30>
 8001a5c:	4622      	mov	r2, r4
 8001a5e:	4628      	mov	r0, r5
 8001a60:	f000 f8da 	bl	8001c18 <__swbuf_r>
 8001a64:	3001      	adds	r0, #1
 8001a66:	d1c9      	bne.n	80019fc <_puts_r+0x30>
 8001a68:	e7e9      	b.n	8001a3e <_puts_r+0x72>
 8001a6a:	6823      	ldr	r3, [r4, #0]
 8001a6c:	200a      	movs	r0, #10
 8001a6e:	1c5a      	adds	r2, r3, #1
 8001a70:	6022      	str	r2, [r4, #0]
 8001a72:	7018      	strb	r0, [r3, #0]
 8001a74:	bd70      	pop	{r4, r5, r6, pc}
 8001a76:	bf00      	nop
 8001a78:	08002b68 	.word	0x08002b68
 8001a7c:	08002b88 	.word	0x08002b88
 8001a80:	08002b48 	.word	0x08002b48

08001a84 <puts>:
 8001a84:	4b02      	ldr	r3, [pc, #8]	; (8001a90 <puts+0xc>)
 8001a86:	4601      	mov	r1, r0
 8001a88:	6818      	ldr	r0, [r3, #0]
 8001a8a:	f7ff bf9f 	b.w	80019cc <_puts_r>
 8001a8e:	bf00      	nop
 8001a90:	2000000c 	.word	0x2000000c

08001a94 <siprintf>:
 8001a94:	b40e      	push	{r1, r2, r3}
 8001a96:	b500      	push	{lr}
 8001a98:	b09c      	sub	sp, #112	; 0x70
 8001a9a:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001a9e:	ab1d      	add	r3, sp, #116	; 0x74
 8001aa0:	f8ad 1014 	strh.w	r1, [sp, #20]
 8001aa4:	9002      	str	r0, [sp, #8]
 8001aa6:	9006      	str	r0, [sp, #24]
 8001aa8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001aac:	480a      	ldr	r0, [pc, #40]	; (8001ad8 <siprintf+0x44>)
 8001aae:	9104      	str	r1, [sp, #16]
 8001ab0:	9107      	str	r1, [sp, #28]
 8001ab2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001ab6:	f853 2b04 	ldr.w	r2, [r3], #4
 8001aba:	f8ad 1016 	strh.w	r1, [sp, #22]
 8001abe:	6800      	ldr	r0, [r0, #0]
 8001ac0:	9301      	str	r3, [sp, #4]
 8001ac2:	a902      	add	r1, sp, #8
 8001ac4:	f000 fc66 	bl	8002394 <_svfiprintf_r>
 8001ac8:	9b02      	ldr	r3, [sp, #8]
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
 8001ace:	b01c      	add	sp, #112	; 0x70
 8001ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8001ad4:	b003      	add	sp, #12
 8001ad6:	4770      	bx	lr
 8001ad8:	2000000c 	.word	0x2000000c

08001adc <strcpy>:
 8001adc:	4603      	mov	r3, r0
 8001ade:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001ae2:	f803 2b01 	strb.w	r2, [r3], #1
 8001ae6:	2a00      	cmp	r2, #0
 8001ae8:	d1f9      	bne.n	8001ade <strcpy+0x2>
 8001aea:	4770      	bx	lr

08001aec <_strtol_l.isra.0>:
 8001aec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001af0:	4680      	mov	r8, r0
 8001af2:	4689      	mov	r9, r1
 8001af4:	4692      	mov	sl, r2
 8001af6:	461f      	mov	r7, r3
 8001af8:	468b      	mov	fp, r1
 8001afa:	465d      	mov	r5, fp
 8001afc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001afe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001b02:	f000 fac5 	bl	8002090 <__locale_ctype_ptr_l>
 8001b06:	4420      	add	r0, r4
 8001b08:	7846      	ldrb	r6, [r0, #1]
 8001b0a:	f016 0608 	ands.w	r6, r6, #8
 8001b0e:	d10b      	bne.n	8001b28 <_strtol_l.isra.0+0x3c>
 8001b10:	2c2d      	cmp	r4, #45	; 0x2d
 8001b12:	d10b      	bne.n	8001b2c <_strtol_l.isra.0+0x40>
 8001b14:	782c      	ldrb	r4, [r5, #0]
 8001b16:	2601      	movs	r6, #1
 8001b18:	f10b 0502 	add.w	r5, fp, #2
 8001b1c:	b167      	cbz	r7, 8001b38 <_strtol_l.isra.0+0x4c>
 8001b1e:	2f10      	cmp	r7, #16
 8001b20:	d114      	bne.n	8001b4c <_strtol_l.isra.0+0x60>
 8001b22:	2c30      	cmp	r4, #48	; 0x30
 8001b24:	d00a      	beq.n	8001b3c <_strtol_l.isra.0+0x50>
 8001b26:	e011      	b.n	8001b4c <_strtol_l.isra.0+0x60>
 8001b28:	46ab      	mov	fp, r5
 8001b2a:	e7e6      	b.n	8001afa <_strtol_l.isra.0+0xe>
 8001b2c:	2c2b      	cmp	r4, #43	; 0x2b
 8001b2e:	bf04      	itt	eq
 8001b30:	782c      	ldrbeq	r4, [r5, #0]
 8001b32:	f10b 0502 	addeq.w	r5, fp, #2
 8001b36:	e7f1      	b.n	8001b1c <_strtol_l.isra.0+0x30>
 8001b38:	2c30      	cmp	r4, #48	; 0x30
 8001b3a:	d127      	bne.n	8001b8c <_strtol_l.isra.0+0xa0>
 8001b3c:	782b      	ldrb	r3, [r5, #0]
 8001b3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8001b42:	2b58      	cmp	r3, #88	; 0x58
 8001b44:	d14b      	bne.n	8001bde <_strtol_l.isra.0+0xf2>
 8001b46:	786c      	ldrb	r4, [r5, #1]
 8001b48:	2710      	movs	r7, #16
 8001b4a:	3502      	adds	r5, #2
 8001b4c:	2e00      	cmp	r6, #0
 8001b4e:	bf0c      	ite	eq
 8001b50:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8001b54:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8001b58:	2200      	movs	r2, #0
 8001b5a:	fbb1 fef7 	udiv	lr, r1, r7
 8001b5e:	4610      	mov	r0, r2
 8001b60:	fb07 1c1e 	mls	ip, r7, lr, r1
 8001b64:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8001b68:	2b09      	cmp	r3, #9
 8001b6a:	d811      	bhi.n	8001b90 <_strtol_l.isra.0+0xa4>
 8001b6c:	461c      	mov	r4, r3
 8001b6e:	42a7      	cmp	r7, r4
 8001b70:	dd1d      	ble.n	8001bae <_strtol_l.isra.0+0xc2>
 8001b72:	1c53      	adds	r3, r2, #1
 8001b74:	d007      	beq.n	8001b86 <_strtol_l.isra.0+0x9a>
 8001b76:	4586      	cmp	lr, r0
 8001b78:	d316      	bcc.n	8001ba8 <_strtol_l.isra.0+0xbc>
 8001b7a:	d101      	bne.n	8001b80 <_strtol_l.isra.0+0x94>
 8001b7c:	45a4      	cmp	ip, r4
 8001b7e:	db13      	blt.n	8001ba8 <_strtol_l.isra.0+0xbc>
 8001b80:	fb00 4007 	mla	r0, r0, r7, r4
 8001b84:	2201      	movs	r2, #1
 8001b86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001b8a:	e7eb      	b.n	8001b64 <_strtol_l.isra.0+0x78>
 8001b8c:	270a      	movs	r7, #10
 8001b8e:	e7dd      	b.n	8001b4c <_strtol_l.isra.0+0x60>
 8001b90:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8001b94:	2b19      	cmp	r3, #25
 8001b96:	d801      	bhi.n	8001b9c <_strtol_l.isra.0+0xb0>
 8001b98:	3c37      	subs	r4, #55	; 0x37
 8001b9a:	e7e8      	b.n	8001b6e <_strtol_l.isra.0+0x82>
 8001b9c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8001ba0:	2b19      	cmp	r3, #25
 8001ba2:	d804      	bhi.n	8001bae <_strtol_l.isra.0+0xc2>
 8001ba4:	3c57      	subs	r4, #87	; 0x57
 8001ba6:	e7e2      	b.n	8001b6e <_strtol_l.isra.0+0x82>
 8001ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bac:	e7eb      	b.n	8001b86 <_strtol_l.isra.0+0x9a>
 8001bae:	1c53      	adds	r3, r2, #1
 8001bb0:	d108      	bne.n	8001bc4 <_strtol_l.isra.0+0xd8>
 8001bb2:	2322      	movs	r3, #34	; 0x22
 8001bb4:	f8c8 3000 	str.w	r3, [r8]
 8001bb8:	4608      	mov	r0, r1
 8001bba:	f1ba 0f00 	cmp.w	sl, #0
 8001bbe:	d107      	bne.n	8001bd0 <_strtol_l.isra.0+0xe4>
 8001bc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bc4:	b106      	cbz	r6, 8001bc8 <_strtol_l.isra.0+0xdc>
 8001bc6:	4240      	negs	r0, r0
 8001bc8:	f1ba 0f00 	cmp.w	sl, #0
 8001bcc:	d00c      	beq.n	8001be8 <_strtol_l.isra.0+0xfc>
 8001bce:	b122      	cbz	r2, 8001bda <_strtol_l.isra.0+0xee>
 8001bd0:	3d01      	subs	r5, #1
 8001bd2:	f8ca 5000 	str.w	r5, [sl]
 8001bd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bda:	464d      	mov	r5, r9
 8001bdc:	e7f9      	b.n	8001bd2 <_strtol_l.isra.0+0xe6>
 8001bde:	2430      	movs	r4, #48	; 0x30
 8001be0:	2f00      	cmp	r7, #0
 8001be2:	d1b3      	bne.n	8001b4c <_strtol_l.isra.0+0x60>
 8001be4:	2708      	movs	r7, #8
 8001be6:	e7b1      	b.n	8001b4c <_strtol_l.isra.0+0x60>
 8001be8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001bec <strtol>:
 8001bec:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <strtol+0x24>)
 8001bee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001bf0:	681c      	ldr	r4, [r3, #0]
 8001bf2:	4d08      	ldr	r5, [pc, #32]	; (8001c14 <strtol+0x28>)
 8001bf4:	6a23      	ldr	r3, [r4, #32]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	bf08      	it	eq
 8001bfa:	462b      	moveq	r3, r5
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	460a      	mov	r2, r1
 8001c02:	4601      	mov	r1, r0
 8001c04:	4620      	mov	r0, r4
 8001c06:	f7ff ff71 	bl	8001aec <_strtol_l.isra.0>
 8001c0a:	b003      	add	sp, #12
 8001c0c:	bd30      	pop	{r4, r5, pc}
 8001c0e:	bf00      	nop
 8001c10:	2000000c 	.word	0x2000000c
 8001c14:	20000070 	.word	0x20000070

08001c18 <__swbuf_r>:
 8001c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c1a:	460e      	mov	r6, r1
 8001c1c:	4614      	mov	r4, r2
 8001c1e:	4605      	mov	r5, r0
 8001c20:	b118      	cbz	r0, 8001c2a <__swbuf_r+0x12>
 8001c22:	6983      	ldr	r3, [r0, #24]
 8001c24:	b90b      	cbnz	r3, 8001c2a <__swbuf_r+0x12>
 8001c26:	f000 f9a9 	bl	8001f7c <__sinit>
 8001c2a:	4b21      	ldr	r3, [pc, #132]	; (8001cb0 <__swbuf_r+0x98>)
 8001c2c:	429c      	cmp	r4, r3
 8001c2e:	d12a      	bne.n	8001c86 <__swbuf_r+0x6e>
 8001c30:	686c      	ldr	r4, [r5, #4]
 8001c32:	69a3      	ldr	r3, [r4, #24]
 8001c34:	60a3      	str	r3, [r4, #8]
 8001c36:	89a3      	ldrh	r3, [r4, #12]
 8001c38:	071a      	lsls	r2, r3, #28
 8001c3a:	d52e      	bpl.n	8001c9a <__swbuf_r+0x82>
 8001c3c:	6923      	ldr	r3, [r4, #16]
 8001c3e:	b363      	cbz	r3, 8001c9a <__swbuf_r+0x82>
 8001c40:	6923      	ldr	r3, [r4, #16]
 8001c42:	6820      	ldr	r0, [r4, #0]
 8001c44:	1ac0      	subs	r0, r0, r3
 8001c46:	6963      	ldr	r3, [r4, #20]
 8001c48:	b2f6      	uxtb	r6, r6
 8001c4a:	4298      	cmp	r0, r3
 8001c4c:	4637      	mov	r7, r6
 8001c4e:	db04      	blt.n	8001c5a <__swbuf_r+0x42>
 8001c50:	4621      	mov	r1, r4
 8001c52:	4628      	mov	r0, r5
 8001c54:	f000 f928 	bl	8001ea8 <_fflush_r>
 8001c58:	bb28      	cbnz	r0, 8001ca6 <__swbuf_r+0x8e>
 8001c5a:	68a3      	ldr	r3, [r4, #8]
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	60a3      	str	r3, [r4, #8]
 8001c60:	6823      	ldr	r3, [r4, #0]
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	6022      	str	r2, [r4, #0]
 8001c66:	701e      	strb	r6, [r3, #0]
 8001c68:	6963      	ldr	r3, [r4, #20]
 8001c6a:	3001      	adds	r0, #1
 8001c6c:	4298      	cmp	r0, r3
 8001c6e:	d004      	beq.n	8001c7a <__swbuf_r+0x62>
 8001c70:	89a3      	ldrh	r3, [r4, #12]
 8001c72:	07db      	lsls	r3, r3, #31
 8001c74:	d519      	bpl.n	8001caa <__swbuf_r+0x92>
 8001c76:	2e0a      	cmp	r6, #10
 8001c78:	d117      	bne.n	8001caa <__swbuf_r+0x92>
 8001c7a:	4621      	mov	r1, r4
 8001c7c:	4628      	mov	r0, r5
 8001c7e:	f000 f913 	bl	8001ea8 <_fflush_r>
 8001c82:	b190      	cbz	r0, 8001caa <__swbuf_r+0x92>
 8001c84:	e00f      	b.n	8001ca6 <__swbuf_r+0x8e>
 8001c86:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <__swbuf_r+0x9c>)
 8001c88:	429c      	cmp	r4, r3
 8001c8a:	d101      	bne.n	8001c90 <__swbuf_r+0x78>
 8001c8c:	68ac      	ldr	r4, [r5, #8]
 8001c8e:	e7d0      	b.n	8001c32 <__swbuf_r+0x1a>
 8001c90:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <__swbuf_r+0xa0>)
 8001c92:	429c      	cmp	r4, r3
 8001c94:	bf08      	it	eq
 8001c96:	68ec      	ldreq	r4, [r5, #12]
 8001c98:	e7cb      	b.n	8001c32 <__swbuf_r+0x1a>
 8001c9a:	4621      	mov	r1, r4
 8001c9c:	4628      	mov	r0, r5
 8001c9e:	f000 f80d 	bl	8001cbc <__swsetup_r>
 8001ca2:	2800      	cmp	r0, #0
 8001ca4:	d0cc      	beq.n	8001c40 <__swbuf_r+0x28>
 8001ca6:	f04f 37ff 	mov.w	r7, #4294967295
 8001caa:	4638      	mov	r0, r7
 8001cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	08002b68 	.word	0x08002b68
 8001cb4:	08002b88 	.word	0x08002b88
 8001cb8:	08002b48 	.word	0x08002b48

08001cbc <__swsetup_r>:
 8001cbc:	4b32      	ldr	r3, [pc, #200]	; (8001d88 <__swsetup_r+0xcc>)
 8001cbe:	b570      	push	{r4, r5, r6, lr}
 8001cc0:	681d      	ldr	r5, [r3, #0]
 8001cc2:	4606      	mov	r6, r0
 8001cc4:	460c      	mov	r4, r1
 8001cc6:	b125      	cbz	r5, 8001cd2 <__swsetup_r+0x16>
 8001cc8:	69ab      	ldr	r3, [r5, #24]
 8001cca:	b913      	cbnz	r3, 8001cd2 <__swsetup_r+0x16>
 8001ccc:	4628      	mov	r0, r5
 8001cce:	f000 f955 	bl	8001f7c <__sinit>
 8001cd2:	4b2e      	ldr	r3, [pc, #184]	; (8001d8c <__swsetup_r+0xd0>)
 8001cd4:	429c      	cmp	r4, r3
 8001cd6:	d10f      	bne.n	8001cf8 <__swsetup_r+0x3c>
 8001cd8:	686c      	ldr	r4, [r5, #4]
 8001cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	0715      	lsls	r5, r2, #28
 8001ce2:	d42c      	bmi.n	8001d3e <__swsetup_r+0x82>
 8001ce4:	06d0      	lsls	r0, r2, #27
 8001ce6:	d411      	bmi.n	8001d0c <__swsetup_r+0x50>
 8001ce8:	2209      	movs	r2, #9
 8001cea:	6032      	str	r2, [r6, #0]
 8001cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cf0:	81a3      	strh	r3, [r4, #12]
 8001cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf6:	bd70      	pop	{r4, r5, r6, pc}
 8001cf8:	4b25      	ldr	r3, [pc, #148]	; (8001d90 <__swsetup_r+0xd4>)
 8001cfa:	429c      	cmp	r4, r3
 8001cfc:	d101      	bne.n	8001d02 <__swsetup_r+0x46>
 8001cfe:	68ac      	ldr	r4, [r5, #8]
 8001d00:	e7eb      	b.n	8001cda <__swsetup_r+0x1e>
 8001d02:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <__swsetup_r+0xd8>)
 8001d04:	429c      	cmp	r4, r3
 8001d06:	bf08      	it	eq
 8001d08:	68ec      	ldreq	r4, [r5, #12]
 8001d0a:	e7e6      	b.n	8001cda <__swsetup_r+0x1e>
 8001d0c:	0751      	lsls	r1, r2, #29
 8001d0e:	d512      	bpl.n	8001d36 <__swsetup_r+0x7a>
 8001d10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d12:	b141      	cbz	r1, 8001d26 <__swsetup_r+0x6a>
 8001d14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d18:	4299      	cmp	r1, r3
 8001d1a:	d002      	beq.n	8001d22 <__swsetup_r+0x66>
 8001d1c:	4630      	mov	r0, r6
 8001d1e:	f000 fa31 	bl	8002184 <_free_r>
 8001d22:	2300      	movs	r3, #0
 8001d24:	6363      	str	r3, [r4, #52]	; 0x34
 8001d26:	89a3      	ldrh	r3, [r4, #12]
 8001d28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001d2c:	81a3      	strh	r3, [r4, #12]
 8001d2e:	2300      	movs	r3, #0
 8001d30:	6063      	str	r3, [r4, #4]
 8001d32:	6923      	ldr	r3, [r4, #16]
 8001d34:	6023      	str	r3, [r4, #0]
 8001d36:	89a3      	ldrh	r3, [r4, #12]
 8001d38:	f043 0308 	orr.w	r3, r3, #8
 8001d3c:	81a3      	strh	r3, [r4, #12]
 8001d3e:	6923      	ldr	r3, [r4, #16]
 8001d40:	b94b      	cbnz	r3, 8001d56 <__swsetup_r+0x9a>
 8001d42:	89a3      	ldrh	r3, [r4, #12]
 8001d44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d4c:	d003      	beq.n	8001d56 <__swsetup_r+0x9a>
 8001d4e:	4621      	mov	r1, r4
 8001d50:	4630      	mov	r0, r6
 8001d52:	f000 f9c5 	bl	80020e0 <__smakebuf_r>
 8001d56:	89a2      	ldrh	r2, [r4, #12]
 8001d58:	f012 0301 	ands.w	r3, r2, #1
 8001d5c:	d00c      	beq.n	8001d78 <__swsetup_r+0xbc>
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60a3      	str	r3, [r4, #8]
 8001d62:	6963      	ldr	r3, [r4, #20]
 8001d64:	425b      	negs	r3, r3
 8001d66:	61a3      	str	r3, [r4, #24]
 8001d68:	6923      	ldr	r3, [r4, #16]
 8001d6a:	b953      	cbnz	r3, 8001d82 <__swsetup_r+0xc6>
 8001d6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d70:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001d74:	d1ba      	bne.n	8001cec <__swsetup_r+0x30>
 8001d76:	bd70      	pop	{r4, r5, r6, pc}
 8001d78:	0792      	lsls	r2, r2, #30
 8001d7a:	bf58      	it	pl
 8001d7c:	6963      	ldrpl	r3, [r4, #20]
 8001d7e:	60a3      	str	r3, [r4, #8]
 8001d80:	e7f2      	b.n	8001d68 <__swsetup_r+0xac>
 8001d82:	2000      	movs	r0, #0
 8001d84:	e7f7      	b.n	8001d76 <__swsetup_r+0xba>
 8001d86:	bf00      	nop
 8001d88:	2000000c 	.word	0x2000000c
 8001d8c:	08002b68 	.word	0x08002b68
 8001d90:	08002b88 	.word	0x08002b88
 8001d94:	08002b48 	.word	0x08002b48

08001d98 <__sflush_r>:
 8001d98:	898a      	ldrh	r2, [r1, #12]
 8001d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d9e:	4605      	mov	r5, r0
 8001da0:	0710      	lsls	r0, r2, #28
 8001da2:	460c      	mov	r4, r1
 8001da4:	d45a      	bmi.n	8001e5c <__sflush_r+0xc4>
 8001da6:	684b      	ldr	r3, [r1, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	dc05      	bgt.n	8001db8 <__sflush_r+0x20>
 8001dac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	dc02      	bgt.n	8001db8 <__sflush_r+0x20>
 8001db2:	2000      	movs	r0, #0
 8001db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001db8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001dba:	2e00      	cmp	r6, #0
 8001dbc:	d0f9      	beq.n	8001db2 <__sflush_r+0x1a>
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001dc4:	682f      	ldr	r7, [r5, #0]
 8001dc6:	602b      	str	r3, [r5, #0]
 8001dc8:	d033      	beq.n	8001e32 <__sflush_r+0x9a>
 8001dca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001dcc:	89a3      	ldrh	r3, [r4, #12]
 8001dce:	075a      	lsls	r2, r3, #29
 8001dd0:	d505      	bpl.n	8001dde <__sflush_r+0x46>
 8001dd2:	6863      	ldr	r3, [r4, #4]
 8001dd4:	1ac0      	subs	r0, r0, r3
 8001dd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001dd8:	b10b      	cbz	r3, 8001dde <__sflush_r+0x46>
 8001dda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ddc:	1ac0      	subs	r0, r0, r3
 8001dde:	2300      	movs	r3, #0
 8001de0:	4602      	mov	r2, r0
 8001de2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001de4:	6a21      	ldr	r1, [r4, #32]
 8001de6:	4628      	mov	r0, r5
 8001de8:	47b0      	blx	r6
 8001dea:	1c43      	adds	r3, r0, #1
 8001dec:	89a3      	ldrh	r3, [r4, #12]
 8001dee:	d106      	bne.n	8001dfe <__sflush_r+0x66>
 8001df0:	6829      	ldr	r1, [r5, #0]
 8001df2:	291d      	cmp	r1, #29
 8001df4:	d84b      	bhi.n	8001e8e <__sflush_r+0xf6>
 8001df6:	4a2b      	ldr	r2, [pc, #172]	; (8001ea4 <__sflush_r+0x10c>)
 8001df8:	40ca      	lsrs	r2, r1
 8001dfa:	07d6      	lsls	r6, r2, #31
 8001dfc:	d547      	bpl.n	8001e8e <__sflush_r+0xf6>
 8001dfe:	2200      	movs	r2, #0
 8001e00:	6062      	str	r2, [r4, #4]
 8001e02:	04d9      	lsls	r1, r3, #19
 8001e04:	6922      	ldr	r2, [r4, #16]
 8001e06:	6022      	str	r2, [r4, #0]
 8001e08:	d504      	bpl.n	8001e14 <__sflush_r+0x7c>
 8001e0a:	1c42      	adds	r2, r0, #1
 8001e0c:	d101      	bne.n	8001e12 <__sflush_r+0x7a>
 8001e0e:	682b      	ldr	r3, [r5, #0]
 8001e10:	b903      	cbnz	r3, 8001e14 <__sflush_r+0x7c>
 8001e12:	6560      	str	r0, [r4, #84]	; 0x54
 8001e14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e16:	602f      	str	r7, [r5, #0]
 8001e18:	2900      	cmp	r1, #0
 8001e1a:	d0ca      	beq.n	8001db2 <__sflush_r+0x1a>
 8001e1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e20:	4299      	cmp	r1, r3
 8001e22:	d002      	beq.n	8001e2a <__sflush_r+0x92>
 8001e24:	4628      	mov	r0, r5
 8001e26:	f000 f9ad 	bl	8002184 <_free_r>
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	6360      	str	r0, [r4, #52]	; 0x34
 8001e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e32:	6a21      	ldr	r1, [r4, #32]
 8001e34:	2301      	movs	r3, #1
 8001e36:	4628      	mov	r0, r5
 8001e38:	47b0      	blx	r6
 8001e3a:	1c41      	adds	r1, r0, #1
 8001e3c:	d1c6      	bne.n	8001dcc <__sflush_r+0x34>
 8001e3e:	682b      	ldr	r3, [r5, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0c3      	beq.n	8001dcc <__sflush_r+0x34>
 8001e44:	2b1d      	cmp	r3, #29
 8001e46:	d001      	beq.n	8001e4c <__sflush_r+0xb4>
 8001e48:	2b16      	cmp	r3, #22
 8001e4a:	d101      	bne.n	8001e50 <__sflush_r+0xb8>
 8001e4c:	602f      	str	r7, [r5, #0]
 8001e4e:	e7b0      	b.n	8001db2 <__sflush_r+0x1a>
 8001e50:	89a3      	ldrh	r3, [r4, #12]
 8001e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e56:	81a3      	strh	r3, [r4, #12]
 8001e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e5c:	690f      	ldr	r7, [r1, #16]
 8001e5e:	2f00      	cmp	r7, #0
 8001e60:	d0a7      	beq.n	8001db2 <__sflush_r+0x1a>
 8001e62:	0793      	lsls	r3, r2, #30
 8001e64:	680e      	ldr	r6, [r1, #0]
 8001e66:	bf08      	it	eq
 8001e68:	694b      	ldreq	r3, [r1, #20]
 8001e6a:	600f      	str	r7, [r1, #0]
 8001e6c:	bf18      	it	ne
 8001e6e:	2300      	movne	r3, #0
 8001e70:	eba6 0807 	sub.w	r8, r6, r7
 8001e74:	608b      	str	r3, [r1, #8]
 8001e76:	f1b8 0f00 	cmp.w	r8, #0
 8001e7a:	dd9a      	ble.n	8001db2 <__sflush_r+0x1a>
 8001e7c:	4643      	mov	r3, r8
 8001e7e:	463a      	mov	r2, r7
 8001e80:	6a21      	ldr	r1, [r4, #32]
 8001e82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001e84:	4628      	mov	r0, r5
 8001e86:	47b0      	blx	r6
 8001e88:	2800      	cmp	r0, #0
 8001e8a:	dc07      	bgt.n	8001e9c <__sflush_r+0x104>
 8001e8c:	89a3      	ldrh	r3, [r4, #12]
 8001e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e92:	81a3      	strh	r3, [r4, #12]
 8001e94:	f04f 30ff 	mov.w	r0, #4294967295
 8001e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e9c:	4407      	add	r7, r0
 8001e9e:	eba8 0800 	sub.w	r8, r8, r0
 8001ea2:	e7e8      	b.n	8001e76 <__sflush_r+0xde>
 8001ea4:	20400001 	.word	0x20400001

08001ea8 <_fflush_r>:
 8001ea8:	b538      	push	{r3, r4, r5, lr}
 8001eaa:	690b      	ldr	r3, [r1, #16]
 8001eac:	4605      	mov	r5, r0
 8001eae:	460c      	mov	r4, r1
 8001eb0:	b1db      	cbz	r3, 8001eea <_fflush_r+0x42>
 8001eb2:	b118      	cbz	r0, 8001ebc <_fflush_r+0x14>
 8001eb4:	6983      	ldr	r3, [r0, #24]
 8001eb6:	b90b      	cbnz	r3, 8001ebc <_fflush_r+0x14>
 8001eb8:	f000 f860 	bl	8001f7c <__sinit>
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <_fflush_r+0x48>)
 8001ebe:	429c      	cmp	r4, r3
 8001ec0:	d109      	bne.n	8001ed6 <_fflush_r+0x2e>
 8001ec2:	686c      	ldr	r4, [r5, #4]
 8001ec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ec8:	b17b      	cbz	r3, 8001eea <_fflush_r+0x42>
 8001eca:	4621      	mov	r1, r4
 8001ecc:	4628      	mov	r0, r5
 8001ece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ed2:	f7ff bf61 	b.w	8001d98 <__sflush_r>
 8001ed6:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <_fflush_r+0x4c>)
 8001ed8:	429c      	cmp	r4, r3
 8001eda:	d101      	bne.n	8001ee0 <_fflush_r+0x38>
 8001edc:	68ac      	ldr	r4, [r5, #8]
 8001ede:	e7f1      	b.n	8001ec4 <_fflush_r+0x1c>
 8001ee0:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <_fflush_r+0x50>)
 8001ee2:	429c      	cmp	r4, r3
 8001ee4:	bf08      	it	eq
 8001ee6:	68ec      	ldreq	r4, [r5, #12]
 8001ee8:	e7ec      	b.n	8001ec4 <_fflush_r+0x1c>
 8001eea:	2000      	movs	r0, #0
 8001eec:	bd38      	pop	{r3, r4, r5, pc}
 8001eee:	bf00      	nop
 8001ef0:	08002b68 	.word	0x08002b68
 8001ef4:	08002b88 	.word	0x08002b88
 8001ef8:	08002b48 	.word	0x08002b48

08001efc <_cleanup_r>:
 8001efc:	4901      	ldr	r1, [pc, #4]	; (8001f04 <_cleanup_r+0x8>)
 8001efe:	f000 b8a9 	b.w	8002054 <_fwalk_reent>
 8001f02:	bf00      	nop
 8001f04:	08001ea9 	.word	0x08001ea9

08001f08 <std.isra.0>:
 8001f08:	2300      	movs	r3, #0
 8001f0a:	b510      	push	{r4, lr}
 8001f0c:	4604      	mov	r4, r0
 8001f0e:	6003      	str	r3, [r0, #0]
 8001f10:	6043      	str	r3, [r0, #4]
 8001f12:	6083      	str	r3, [r0, #8]
 8001f14:	8181      	strh	r1, [r0, #12]
 8001f16:	6643      	str	r3, [r0, #100]	; 0x64
 8001f18:	81c2      	strh	r2, [r0, #14]
 8001f1a:	6103      	str	r3, [r0, #16]
 8001f1c:	6143      	str	r3, [r0, #20]
 8001f1e:	6183      	str	r3, [r0, #24]
 8001f20:	4619      	mov	r1, r3
 8001f22:	2208      	movs	r2, #8
 8001f24:	305c      	adds	r0, #92	; 0x5c
 8001f26:	f7ff fd49 	bl	80019bc <memset>
 8001f2a:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <std.isra.0+0x38>)
 8001f2c:	6263      	str	r3, [r4, #36]	; 0x24
 8001f2e:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <std.isra.0+0x3c>)
 8001f30:	62a3      	str	r3, [r4, #40]	; 0x28
 8001f32:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <std.isra.0+0x40>)
 8001f34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001f36:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <std.isra.0+0x44>)
 8001f38:	6224      	str	r4, [r4, #32]
 8001f3a:	6323      	str	r3, [r4, #48]	; 0x30
 8001f3c:	bd10      	pop	{r4, pc}
 8001f3e:	bf00      	nop
 8001f40:	080028c9 	.word	0x080028c9
 8001f44:	080028eb 	.word	0x080028eb
 8001f48:	08002923 	.word	0x08002923
 8001f4c:	08002947 	.word	0x08002947

08001f50 <__sfmoreglue>:
 8001f50:	b570      	push	{r4, r5, r6, lr}
 8001f52:	1e4a      	subs	r2, r1, #1
 8001f54:	2568      	movs	r5, #104	; 0x68
 8001f56:	4355      	muls	r5, r2
 8001f58:	460e      	mov	r6, r1
 8001f5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001f5e:	f000 f95f 	bl	8002220 <_malloc_r>
 8001f62:	4604      	mov	r4, r0
 8001f64:	b140      	cbz	r0, 8001f78 <__sfmoreglue+0x28>
 8001f66:	2100      	movs	r1, #0
 8001f68:	e880 0042 	stmia.w	r0, {r1, r6}
 8001f6c:	300c      	adds	r0, #12
 8001f6e:	60a0      	str	r0, [r4, #8]
 8001f70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001f74:	f7ff fd22 	bl	80019bc <memset>
 8001f78:	4620      	mov	r0, r4
 8001f7a:	bd70      	pop	{r4, r5, r6, pc}

08001f7c <__sinit>:
 8001f7c:	6983      	ldr	r3, [r0, #24]
 8001f7e:	b510      	push	{r4, lr}
 8001f80:	4604      	mov	r4, r0
 8001f82:	bb33      	cbnz	r3, 8001fd2 <__sinit+0x56>
 8001f84:	6483      	str	r3, [r0, #72]	; 0x48
 8001f86:	64c3      	str	r3, [r0, #76]	; 0x4c
 8001f88:	6503      	str	r3, [r0, #80]	; 0x50
 8001f8a:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <__sinit+0x58>)
 8001f8c:	4a12      	ldr	r2, [pc, #72]	; (8001fd8 <__sinit+0x5c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6282      	str	r2, [r0, #40]	; 0x28
 8001f92:	4298      	cmp	r0, r3
 8001f94:	bf04      	itt	eq
 8001f96:	2301      	moveq	r3, #1
 8001f98:	6183      	streq	r3, [r0, #24]
 8001f9a:	f000 f81f 	bl	8001fdc <__sfp>
 8001f9e:	6060      	str	r0, [r4, #4]
 8001fa0:	4620      	mov	r0, r4
 8001fa2:	f000 f81b 	bl	8001fdc <__sfp>
 8001fa6:	60a0      	str	r0, [r4, #8]
 8001fa8:	4620      	mov	r0, r4
 8001faa:	f000 f817 	bl	8001fdc <__sfp>
 8001fae:	2200      	movs	r2, #0
 8001fb0:	60e0      	str	r0, [r4, #12]
 8001fb2:	2104      	movs	r1, #4
 8001fb4:	6860      	ldr	r0, [r4, #4]
 8001fb6:	f7ff ffa7 	bl	8001f08 <std.isra.0>
 8001fba:	2201      	movs	r2, #1
 8001fbc:	2109      	movs	r1, #9
 8001fbe:	68a0      	ldr	r0, [r4, #8]
 8001fc0:	f7ff ffa2 	bl	8001f08 <std.isra.0>
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	2112      	movs	r1, #18
 8001fc8:	68e0      	ldr	r0, [r4, #12]
 8001fca:	f7ff ff9d 	bl	8001f08 <std.isra.0>
 8001fce:	2301      	movs	r3, #1
 8001fd0:	61a3      	str	r3, [r4, #24]
 8001fd2:	bd10      	pop	{r4, pc}
 8001fd4:	08002b44 	.word	0x08002b44
 8001fd8:	08001efd 	.word	0x08001efd

08001fdc <__sfp>:
 8001fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fde:	4b1c      	ldr	r3, [pc, #112]	; (8002050 <__sfp+0x74>)
 8001fe0:	681e      	ldr	r6, [r3, #0]
 8001fe2:	69b3      	ldr	r3, [r6, #24]
 8001fe4:	4607      	mov	r7, r0
 8001fe6:	b913      	cbnz	r3, 8001fee <__sfp+0x12>
 8001fe8:	4630      	mov	r0, r6
 8001fea:	f7ff ffc7 	bl	8001f7c <__sinit>
 8001fee:	3648      	adds	r6, #72	; 0x48
 8001ff0:	68b4      	ldr	r4, [r6, #8]
 8001ff2:	6873      	ldr	r3, [r6, #4]
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	d503      	bpl.n	8002000 <__sfp+0x24>
 8001ff8:	6833      	ldr	r3, [r6, #0]
 8001ffa:	b133      	cbz	r3, 800200a <__sfp+0x2e>
 8001ffc:	6836      	ldr	r6, [r6, #0]
 8001ffe:	e7f7      	b.n	8001ff0 <__sfp+0x14>
 8002000:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002004:	b16d      	cbz	r5, 8002022 <__sfp+0x46>
 8002006:	3468      	adds	r4, #104	; 0x68
 8002008:	e7f4      	b.n	8001ff4 <__sfp+0x18>
 800200a:	2104      	movs	r1, #4
 800200c:	4638      	mov	r0, r7
 800200e:	f7ff ff9f 	bl	8001f50 <__sfmoreglue>
 8002012:	6030      	str	r0, [r6, #0]
 8002014:	2800      	cmp	r0, #0
 8002016:	d1f1      	bne.n	8001ffc <__sfp+0x20>
 8002018:	230c      	movs	r3, #12
 800201a:	603b      	str	r3, [r7, #0]
 800201c:	4604      	mov	r4, r0
 800201e:	4620      	mov	r0, r4
 8002020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002022:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002026:	81e3      	strh	r3, [r4, #14]
 8002028:	2301      	movs	r3, #1
 800202a:	81a3      	strh	r3, [r4, #12]
 800202c:	6665      	str	r5, [r4, #100]	; 0x64
 800202e:	6025      	str	r5, [r4, #0]
 8002030:	60a5      	str	r5, [r4, #8]
 8002032:	6065      	str	r5, [r4, #4]
 8002034:	6125      	str	r5, [r4, #16]
 8002036:	6165      	str	r5, [r4, #20]
 8002038:	61a5      	str	r5, [r4, #24]
 800203a:	2208      	movs	r2, #8
 800203c:	4629      	mov	r1, r5
 800203e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002042:	f7ff fcbb 	bl	80019bc <memset>
 8002046:	6365      	str	r5, [r4, #52]	; 0x34
 8002048:	63a5      	str	r5, [r4, #56]	; 0x38
 800204a:	64a5      	str	r5, [r4, #72]	; 0x48
 800204c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800204e:	e7e6      	b.n	800201e <__sfp+0x42>
 8002050:	08002b44 	.word	0x08002b44

08002054 <_fwalk_reent>:
 8002054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002058:	4680      	mov	r8, r0
 800205a:	4689      	mov	r9, r1
 800205c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002060:	2600      	movs	r6, #0
 8002062:	b914      	cbnz	r4, 800206a <_fwalk_reent+0x16>
 8002064:	4630      	mov	r0, r6
 8002066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800206a:	68a5      	ldr	r5, [r4, #8]
 800206c:	6867      	ldr	r7, [r4, #4]
 800206e:	3f01      	subs	r7, #1
 8002070:	d501      	bpl.n	8002076 <_fwalk_reent+0x22>
 8002072:	6824      	ldr	r4, [r4, #0]
 8002074:	e7f5      	b.n	8002062 <_fwalk_reent+0xe>
 8002076:	89ab      	ldrh	r3, [r5, #12]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d907      	bls.n	800208c <_fwalk_reent+0x38>
 800207c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002080:	3301      	adds	r3, #1
 8002082:	d003      	beq.n	800208c <_fwalk_reent+0x38>
 8002084:	4629      	mov	r1, r5
 8002086:	4640      	mov	r0, r8
 8002088:	47c8      	blx	r9
 800208a:	4306      	orrs	r6, r0
 800208c:	3568      	adds	r5, #104	; 0x68
 800208e:	e7ee      	b.n	800206e <_fwalk_reent+0x1a>

08002090 <__locale_ctype_ptr_l>:
 8002090:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8002094:	4770      	bx	lr

08002096 <__swhatbuf_r>:
 8002096:	b570      	push	{r4, r5, r6, lr}
 8002098:	460e      	mov	r6, r1
 800209a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800209e:	2900      	cmp	r1, #0
 80020a0:	b090      	sub	sp, #64	; 0x40
 80020a2:	4614      	mov	r4, r2
 80020a4:	461d      	mov	r5, r3
 80020a6:	da07      	bge.n	80020b8 <__swhatbuf_r+0x22>
 80020a8:	2300      	movs	r3, #0
 80020aa:	602b      	str	r3, [r5, #0]
 80020ac:	89b3      	ldrh	r3, [r6, #12]
 80020ae:	061a      	lsls	r2, r3, #24
 80020b0:	d410      	bmi.n	80020d4 <__swhatbuf_r+0x3e>
 80020b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020b6:	e00e      	b.n	80020d6 <__swhatbuf_r+0x40>
 80020b8:	aa01      	add	r2, sp, #4
 80020ba:	f000 fc77 	bl	80029ac <_fstat_r>
 80020be:	2800      	cmp	r0, #0
 80020c0:	dbf2      	blt.n	80020a8 <__swhatbuf_r+0x12>
 80020c2:	9a02      	ldr	r2, [sp, #8]
 80020c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80020c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80020cc:	425a      	negs	r2, r3
 80020ce:	415a      	adcs	r2, r3
 80020d0:	602a      	str	r2, [r5, #0]
 80020d2:	e7ee      	b.n	80020b2 <__swhatbuf_r+0x1c>
 80020d4:	2340      	movs	r3, #64	; 0x40
 80020d6:	2000      	movs	r0, #0
 80020d8:	6023      	str	r3, [r4, #0]
 80020da:	b010      	add	sp, #64	; 0x40
 80020dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080020e0 <__smakebuf_r>:
 80020e0:	898b      	ldrh	r3, [r1, #12]
 80020e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80020e4:	079d      	lsls	r5, r3, #30
 80020e6:	4606      	mov	r6, r0
 80020e8:	460c      	mov	r4, r1
 80020ea:	d507      	bpl.n	80020fc <__smakebuf_r+0x1c>
 80020ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80020f0:	6023      	str	r3, [r4, #0]
 80020f2:	6123      	str	r3, [r4, #16]
 80020f4:	2301      	movs	r3, #1
 80020f6:	6163      	str	r3, [r4, #20]
 80020f8:	b002      	add	sp, #8
 80020fa:	bd70      	pop	{r4, r5, r6, pc}
 80020fc:	ab01      	add	r3, sp, #4
 80020fe:	466a      	mov	r2, sp
 8002100:	f7ff ffc9 	bl	8002096 <__swhatbuf_r>
 8002104:	9900      	ldr	r1, [sp, #0]
 8002106:	4605      	mov	r5, r0
 8002108:	4630      	mov	r0, r6
 800210a:	f000 f889 	bl	8002220 <_malloc_r>
 800210e:	b948      	cbnz	r0, 8002124 <__smakebuf_r+0x44>
 8002110:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002114:	059a      	lsls	r2, r3, #22
 8002116:	d4ef      	bmi.n	80020f8 <__smakebuf_r+0x18>
 8002118:	f023 0303 	bic.w	r3, r3, #3
 800211c:	f043 0302 	orr.w	r3, r3, #2
 8002120:	81a3      	strh	r3, [r4, #12]
 8002122:	e7e3      	b.n	80020ec <__smakebuf_r+0xc>
 8002124:	4b0d      	ldr	r3, [pc, #52]	; (800215c <__smakebuf_r+0x7c>)
 8002126:	62b3      	str	r3, [r6, #40]	; 0x28
 8002128:	89a3      	ldrh	r3, [r4, #12]
 800212a:	6020      	str	r0, [r4, #0]
 800212c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002130:	81a3      	strh	r3, [r4, #12]
 8002132:	9b00      	ldr	r3, [sp, #0]
 8002134:	6163      	str	r3, [r4, #20]
 8002136:	9b01      	ldr	r3, [sp, #4]
 8002138:	6120      	str	r0, [r4, #16]
 800213a:	b15b      	cbz	r3, 8002154 <__smakebuf_r+0x74>
 800213c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002140:	4630      	mov	r0, r6
 8002142:	f000 fc45 	bl	80029d0 <_isatty_r>
 8002146:	b128      	cbz	r0, 8002154 <__smakebuf_r+0x74>
 8002148:	89a3      	ldrh	r3, [r4, #12]
 800214a:	f023 0303 	bic.w	r3, r3, #3
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	81a3      	strh	r3, [r4, #12]
 8002154:	89a3      	ldrh	r3, [r4, #12]
 8002156:	431d      	orrs	r5, r3
 8002158:	81a5      	strh	r5, [r4, #12]
 800215a:	e7cd      	b.n	80020f8 <__smakebuf_r+0x18>
 800215c:	08001efd 	.word	0x08001efd

08002160 <__ascii_mbtowc>:
 8002160:	b082      	sub	sp, #8
 8002162:	b901      	cbnz	r1, 8002166 <__ascii_mbtowc+0x6>
 8002164:	a901      	add	r1, sp, #4
 8002166:	b142      	cbz	r2, 800217a <__ascii_mbtowc+0x1a>
 8002168:	b14b      	cbz	r3, 800217e <__ascii_mbtowc+0x1e>
 800216a:	7813      	ldrb	r3, [r2, #0]
 800216c:	600b      	str	r3, [r1, #0]
 800216e:	7812      	ldrb	r2, [r2, #0]
 8002170:	1c10      	adds	r0, r2, #0
 8002172:	bf18      	it	ne
 8002174:	2001      	movne	r0, #1
 8002176:	b002      	add	sp, #8
 8002178:	4770      	bx	lr
 800217a:	4610      	mov	r0, r2
 800217c:	e7fb      	b.n	8002176 <__ascii_mbtowc+0x16>
 800217e:	f06f 0001 	mvn.w	r0, #1
 8002182:	e7f8      	b.n	8002176 <__ascii_mbtowc+0x16>

08002184 <_free_r>:
 8002184:	b538      	push	{r3, r4, r5, lr}
 8002186:	4605      	mov	r5, r0
 8002188:	2900      	cmp	r1, #0
 800218a:	d045      	beq.n	8002218 <_free_r+0x94>
 800218c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002190:	1f0c      	subs	r4, r1, #4
 8002192:	2b00      	cmp	r3, #0
 8002194:	bfb8      	it	lt
 8002196:	18e4      	addlt	r4, r4, r3
 8002198:	f000 fc61 	bl	8002a5e <__malloc_lock>
 800219c:	4a1f      	ldr	r2, [pc, #124]	; (800221c <_free_r+0x98>)
 800219e:	6813      	ldr	r3, [r2, #0]
 80021a0:	4610      	mov	r0, r2
 80021a2:	b933      	cbnz	r3, 80021b2 <_free_r+0x2e>
 80021a4:	6063      	str	r3, [r4, #4]
 80021a6:	6014      	str	r4, [r2, #0]
 80021a8:	4628      	mov	r0, r5
 80021aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80021ae:	f000 bc57 	b.w	8002a60 <__malloc_unlock>
 80021b2:	42a3      	cmp	r3, r4
 80021b4:	d90c      	bls.n	80021d0 <_free_r+0x4c>
 80021b6:	6821      	ldr	r1, [r4, #0]
 80021b8:	1862      	adds	r2, r4, r1
 80021ba:	4293      	cmp	r3, r2
 80021bc:	bf04      	itt	eq
 80021be:	681a      	ldreq	r2, [r3, #0]
 80021c0:	685b      	ldreq	r3, [r3, #4]
 80021c2:	6063      	str	r3, [r4, #4]
 80021c4:	bf04      	itt	eq
 80021c6:	1852      	addeq	r2, r2, r1
 80021c8:	6022      	streq	r2, [r4, #0]
 80021ca:	6004      	str	r4, [r0, #0]
 80021cc:	e7ec      	b.n	80021a8 <_free_r+0x24>
 80021ce:	4613      	mov	r3, r2
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	b10a      	cbz	r2, 80021d8 <_free_r+0x54>
 80021d4:	42a2      	cmp	r2, r4
 80021d6:	d9fa      	bls.n	80021ce <_free_r+0x4a>
 80021d8:	6819      	ldr	r1, [r3, #0]
 80021da:	1858      	adds	r0, r3, r1
 80021dc:	42a0      	cmp	r0, r4
 80021de:	d10b      	bne.n	80021f8 <_free_r+0x74>
 80021e0:	6820      	ldr	r0, [r4, #0]
 80021e2:	4401      	add	r1, r0
 80021e4:	1858      	adds	r0, r3, r1
 80021e6:	4282      	cmp	r2, r0
 80021e8:	6019      	str	r1, [r3, #0]
 80021ea:	d1dd      	bne.n	80021a8 <_free_r+0x24>
 80021ec:	6810      	ldr	r0, [r2, #0]
 80021ee:	6852      	ldr	r2, [r2, #4]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	4401      	add	r1, r0
 80021f4:	6019      	str	r1, [r3, #0]
 80021f6:	e7d7      	b.n	80021a8 <_free_r+0x24>
 80021f8:	d902      	bls.n	8002200 <_free_r+0x7c>
 80021fa:	230c      	movs	r3, #12
 80021fc:	602b      	str	r3, [r5, #0]
 80021fe:	e7d3      	b.n	80021a8 <_free_r+0x24>
 8002200:	6820      	ldr	r0, [r4, #0]
 8002202:	1821      	adds	r1, r4, r0
 8002204:	428a      	cmp	r2, r1
 8002206:	bf04      	itt	eq
 8002208:	6811      	ldreq	r1, [r2, #0]
 800220a:	6852      	ldreq	r2, [r2, #4]
 800220c:	6062      	str	r2, [r4, #4]
 800220e:	bf04      	itt	eq
 8002210:	1809      	addeq	r1, r1, r0
 8002212:	6021      	streq	r1, [r4, #0]
 8002214:	605c      	str	r4, [r3, #4]
 8002216:	e7c7      	b.n	80021a8 <_free_r+0x24>
 8002218:	bd38      	pop	{r3, r4, r5, pc}
 800221a:	bf00      	nop
 800221c:	20000244 	.word	0x20000244

08002220 <_malloc_r>:
 8002220:	b570      	push	{r4, r5, r6, lr}
 8002222:	1ccd      	adds	r5, r1, #3
 8002224:	f025 0503 	bic.w	r5, r5, #3
 8002228:	3508      	adds	r5, #8
 800222a:	2d0c      	cmp	r5, #12
 800222c:	bf38      	it	cc
 800222e:	250c      	movcc	r5, #12
 8002230:	2d00      	cmp	r5, #0
 8002232:	4606      	mov	r6, r0
 8002234:	db01      	blt.n	800223a <_malloc_r+0x1a>
 8002236:	42a9      	cmp	r1, r5
 8002238:	d903      	bls.n	8002242 <_malloc_r+0x22>
 800223a:	230c      	movs	r3, #12
 800223c:	6033      	str	r3, [r6, #0]
 800223e:	2000      	movs	r0, #0
 8002240:	bd70      	pop	{r4, r5, r6, pc}
 8002242:	f000 fc0c 	bl	8002a5e <__malloc_lock>
 8002246:	4a23      	ldr	r2, [pc, #140]	; (80022d4 <_malloc_r+0xb4>)
 8002248:	6814      	ldr	r4, [r2, #0]
 800224a:	4621      	mov	r1, r4
 800224c:	b991      	cbnz	r1, 8002274 <_malloc_r+0x54>
 800224e:	4c22      	ldr	r4, [pc, #136]	; (80022d8 <_malloc_r+0xb8>)
 8002250:	6823      	ldr	r3, [r4, #0]
 8002252:	b91b      	cbnz	r3, 800225c <_malloc_r+0x3c>
 8002254:	4630      	mov	r0, r6
 8002256:	f000 fb27 	bl	80028a8 <_sbrk_r>
 800225a:	6020      	str	r0, [r4, #0]
 800225c:	4629      	mov	r1, r5
 800225e:	4630      	mov	r0, r6
 8002260:	f000 fb22 	bl	80028a8 <_sbrk_r>
 8002264:	1c43      	adds	r3, r0, #1
 8002266:	d126      	bne.n	80022b6 <_malloc_r+0x96>
 8002268:	230c      	movs	r3, #12
 800226a:	6033      	str	r3, [r6, #0]
 800226c:	4630      	mov	r0, r6
 800226e:	f000 fbf7 	bl	8002a60 <__malloc_unlock>
 8002272:	e7e4      	b.n	800223e <_malloc_r+0x1e>
 8002274:	680b      	ldr	r3, [r1, #0]
 8002276:	1b5b      	subs	r3, r3, r5
 8002278:	d41a      	bmi.n	80022b0 <_malloc_r+0x90>
 800227a:	2b0b      	cmp	r3, #11
 800227c:	d90f      	bls.n	800229e <_malloc_r+0x7e>
 800227e:	600b      	str	r3, [r1, #0]
 8002280:	50cd      	str	r5, [r1, r3]
 8002282:	18cc      	adds	r4, r1, r3
 8002284:	4630      	mov	r0, r6
 8002286:	f000 fbeb 	bl	8002a60 <__malloc_unlock>
 800228a:	f104 000b 	add.w	r0, r4, #11
 800228e:	1d23      	adds	r3, r4, #4
 8002290:	f020 0007 	bic.w	r0, r0, #7
 8002294:	1ac3      	subs	r3, r0, r3
 8002296:	d01b      	beq.n	80022d0 <_malloc_r+0xb0>
 8002298:	425a      	negs	r2, r3
 800229a:	50e2      	str	r2, [r4, r3]
 800229c:	bd70      	pop	{r4, r5, r6, pc}
 800229e:	428c      	cmp	r4, r1
 80022a0:	bf0d      	iteet	eq
 80022a2:	6863      	ldreq	r3, [r4, #4]
 80022a4:	684b      	ldrne	r3, [r1, #4]
 80022a6:	6063      	strne	r3, [r4, #4]
 80022a8:	6013      	streq	r3, [r2, #0]
 80022aa:	bf18      	it	ne
 80022ac:	460c      	movne	r4, r1
 80022ae:	e7e9      	b.n	8002284 <_malloc_r+0x64>
 80022b0:	460c      	mov	r4, r1
 80022b2:	6849      	ldr	r1, [r1, #4]
 80022b4:	e7ca      	b.n	800224c <_malloc_r+0x2c>
 80022b6:	1cc4      	adds	r4, r0, #3
 80022b8:	f024 0403 	bic.w	r4, r4, #3
 80022bc:	42a0      	cmp	r0, r4
 80022be:	d005      	beq.n	80022cc <_malloc_r+0xac>
 80022c0:	1a21      	subs	r1, r4, r0
 80022c2:	4630      	mov	r0, r6
 80022c4:	f000 faf0 	bl	80028a8 <_sbrk_r>
 80022c8:	3001      	adds	r0, #1
 80022ca:	d0cd      	beq.n	8002268 <_malloc_r+0x48>
 80022cc:	6025      	str	r5, [r4, #0]
 80022ce:	e7d9      	b.n	8002284 <_malloc_r+0x64>
 80022d0:	bd70      	pop	{r4, r5, r6, pc}
 80022d2:	bf00      	nop
 80022d4:	20000244 	.word	0x20000244
 80022d8:	20000248 	.word	0x20000248

080022dc <__ssputs_r>:
 80022dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022e0:	688e      	ldr	r6, [r1, #8]
 80022e2:	429e      	cmp	r6, r3
 80022e4:	4682      	mov	sl, r0
 80022e6:	460c      	mov	r4, r1
 80022e8:	4691      	mov	r9, r2
 80022ea:	4698      	mov	r8, r3
 80022ec:	d835      	bhi.n	800235a <__ssputs_r+0x7e>
 80022ee:	898a      	ldrh	r2, [r1, #12]
 80022f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80022f4:	d031      	beq.n	800235a <__ssputs_r+0x7e>
 80022f6:	6825      	ldr	r5, [r4, #0]
 80022f8:	6909      	ldr	r1, [r1, #16]
 80022fa:	1a6f      	subs	r7, r5, r1
 80022fc:	6965      	ldr	r5, [r4, #20]
 80022fe:	2302      	movs	r3, #2
 8002300:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002304:	fb95 f5f3 	sdiv	r5, r5, r3
 8002308:	f108 0301 	add.w	r3, r8, #1
 800230c:	443b      	add	r3, r7
 800230e:	429d      	cmp	r5, r3
 8002310:	bf38      	it	cc
 8002312:	461d      	movcc	r5, r3
 8002314:	0553      	lsls	r3, r2, #21
 8002316:	d531      	bpl.n	800237c <__ssputs_r+0xa0>
 8002318:	4629      	mov	r1, r5
 800231a:	f7ff ff81 	bl	8002220 <_malloc_r>
 800231e:	4606      	mov	r6, r0
 8002320:	b950      	cbnz	r0, 8002338 <__ssputs_r+0x5c>
 8002322:	230c      	movs	r3, #12
 8002324:	f8ca 3000 	str.w	r3, [sl]
 8002328:	89a3      	ldrh	r3, [r4, #12]
 800232a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800232e:	81a3      	strh	r3, [r4, #12]
 8002330:	f04f 30ff 	mov.w	r0, #4294967295
 8002334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002338:	463a      	mov	r2, r7
 800233a:	6921      	ldr	r1, [r4, #16]
 800233c:	f000 fb6a 	bl	8002a14 <memcpy>
 8002340:	89a3      	ldrh	r3, [r4, #12]
 8002342:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800234a:	81a3      	strh	r3, [r4, #12]
 800234c:	6126      	str	r6, [r4, #16]
 800234e:	6165      	str	r5, [r4, #20]
 8002350:	443e      	add	r6, r7
 8002352:	1bed      	subs	r5, r5, r7
 8002354:	6026      	str	r6, [r4, #0]
 8002356:	60a5      	str	r5, [r4, #8]
 8002358:	4646      	mov	r6, r8
 800235a:	4546      	cmp	r6, r8
 800235c:	bf28      	it	cs
 800235e:	4646      	movcs	r6, r8
 8002360:	4632      	mov	r2, r6
 8002362:	4649      	mov	r1, r9
 8002364:	6820      	ldr	r0, [r4, #0]
 8002366:	f000 fb60 	bl	8002a2a <memmove>
 800236a:	68a3      	ldr	r3, [r4, #8]
 800236c:	1b9b      	subs	r3, r3, r6
 800236e:	60a3      	str	r3, [r4, #8]
 8002370:	6823      	ldr	r3, [r4, #0]
 8002372:	441e      	add	r6, r3
 8002374:	6026      	str	r6, [r4, #0]
 8002376:	2000      	movs	r0, #0
 8002378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800237c:	462a      	mov	r2, r5
 800237e:	f000 fb70 	bl	8002a62 <_realloc_r>
 8002382:	4606      	mov	r6, r0
 8002384:	2800      	cmp	r0, #0
 8002386:	d1e1      	bne.n	800234c <__ssputs_r+0x70>
 8002388:	6921      	ldr	r1, [r4, #16]
 800238a:	4650      	mov	r0, sl
 800238c:	f7ff fefa 	bl	8002184 <_free_r>
 8002390:	e7c7      	b.n	8002322 <__ssputs_r+0x46>
	...

08002394 <_svfiprintf_r>:
 8002394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002398:	b09d      	sub	sp, #116	; 0x74
 800239a:	4680      	mov	r8, r0
 800239c:	9303      	str	r3, [sp, #12]
 800239e:	898b      	ldrh	r3, [r1, #12]
 80023a0:	061c      	lsls	r4, r3, #24
 80023a2:	460d      	mov	r5, r1
 80023a4:	4616      	mov	r6, r2
 80023a6:	d50f      	bpl.n	80023c8 <_svfiprintf_r+0x34>
 80023a8:	690b      	ldr	r3, [r1, #16]
 80023aa:	b96b      	cbnz	r3, 80023c8 <_svfiprintf_r+0x34>
 80023ac:	2140      	movs	r1, #64	; 0x40
 80023ae:	f7ff ff37 	bl	8002220 <_malloc_r>
 80023b2:	6028      	str	r0, [r5, #0]
 80023b4:	6128      	str	r0, [r5, #16]
 80023b6:	b928      	cbnz	r0, 80023c4 <_svfiprintf_r+0x30>
 80023b8:	230c      	movs	r3, #12
 80023ba:	f8c8 3000 	str.w	r3, [r8]
 80023be:	f04f 30ff 	mov.w	r0, #4294967295
 80023c2:	e0c5      	b.n	8002550 <_svfiprintf_r+0x1bc>
 80023c4:	2340      	movs	r3, #64	; 0x40
 80023c6:	616b      	str	r3, [r5, #20]
 80023c8:	2300      	movs	r3, #0
 80023ca:	9309      	str	r3, [sp, #36]	; 0x24
 80023cc:	2320      	movs	r3, #32
 80023ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80023d2:	2330      	movs	r3, #48	; 0x30
 80023d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80023d8:	f04f 0b01 	mov.w	fp, #1
 80023dc:	4637      	mov	r7, r6
 80023de:	463c      	mov	r4, r7
 80023e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d13c      	bne.n	8002462 <_svfiprintf_r+0xce>
 80023e8:	ebb7 0a06 	subs.w	sl, r7, r6
 80023ec:	d00b      	beq.n	8002406 <_svfiprintf_r+0x72>
 80023ee:	4653      	mov	r3, sl
 80023f0:	4632      	mov	r2, r6
 80023f2:	4629      	mov	r1, r5
 80023f4:	4640      	mov	r0, r8
 80023f6:	f7ff ff71 	bl	80022dc <__ssputs_r>
 80023fa:	3001      	adds	r0, #1
 80023fc:	f000 80a3 	beq.w	8002546 <_svfiprintf_r+0x1b2>
 8002400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002402:	4453      	add	r3, sl
 8002404:	9309      	str	r3, [sp, #36]	; 0x24
 8002406:	783b      	ldrb	r3, [r7, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 809c 	beq.w	8002546 <_svfiprintf_r+0x1b2>
 800240e:	2300      	movs	r3, #0
 8002410:	f04f 32ff 	mov.w	r2, #4294967295
 8002414:	9304      	str	r3, [sp, #16]
 8002416:	9307      	str	r3, [sp, #28]
 8002418:	9205      	str	r2, [sp, #20]
 800241a:	9306      	str	r3, [sp, #24]
 800241c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002420:	931a      	str	r3, [sp, #104]	; 0x68
 8002422:	2205      	movs	r2, #5
 8002424:	7821      	ldrb	r1, [r4, #0]
 8002426:	4850      	ldr	r0, [pc, #320]	; (8002568 <_svfiprintf_r+0x1d4>)
 8002428:	f7fd feda 	bl	80001e0 <memchr>
 800242c:	1c67      	adds	r7, r4, #1
 800242e:	9b04      	ldr	r3, [sp, #16]
 8002430:	b9d8      	cbnz	r0, 800246a <_svfiprintf_r+0xd6>
 8002432:	06d9      	lsls	r1, r3, #27
 8002434:	bf44      	itt	mi
 8002436:	2220      	movmi	r2, #32
 8002438:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800243c:	071a      	lsls	r2, r3, #28
 800243e:	bf44      	itt	mi
 8002440:	222b      	movmi	r2, #43	; 0x2b
 8002442:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002446:	7822      	ldrb	r2, [r4, #0]
 8002448:	2a2a      	cmp	r2, #42	; 0x2a
 800244a:	d016      	beq.n	800247a <_svfiprintf_r+0xe6>
 800244c:	9a07      	ldr	r2, [sp, #28]
 800244e:	2100      	movs	r1, #0
 8002450:	200a      	movs	r0, #10
 8002452:	4627      	mov	r7, r4
 8002454:	3401      	adds	r4, #1
 8002456:	783b      	ldrb	r3, [r7, #0]
 8002458:	3b30      	subs	r3, #48	; 0x30
 800245a:	2b09      	cmp	r3, #9
 800245c:	d951      	bls.n	8002502 <_svfiprintf_r+0x16e>
 800245e:	b1c9      	cbz	r1, 8002494 <_svfiprintf_r+0x100>
 8002460:	e011      	b.n	8002486 <_svfiprintf_r+0xf2>
 8002462:	2b25      	cmp	r3, #37	; 0x25
 8002464:	d0c0      	beq.n	80023e8 <_svfiprintf_r+0x54>
 8002466:	4627      	mov	r7, r4
 8002468:	e7b9      	b.n	80023de <_svfiprintf_r+0x4a>
 800246a:	4a3f      	ldr	r2, [pc, #252]	; (8002568 <_svfiprintf_r+0x1d4>)
 800246c:	1a80      	subs	r0, r0, r2
 800246e:	fa0b f000 	lsl.w	r0, fp, r0
 8002472:	4318      	orrs	r0, r3
 8002474:	9004      	str	r0, [sp, #16]
 8002476:	463c      	mov	r4, r7
 8002478:	e7d3      	b.n	8002422 <_svfiprintf_r+0x8e>
 800247a:	9a03      	ldr	r2, [sp, #12]
 800247c:	1d11      	adds	r1, r2, #4
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	9103      	str	r1, [sp, #12]
 8002482:	2a00      	cmp	r2, #0
 8002484:	db01      	blt.n	800248a <_svfiprintf_r+0xf6>
 8002486:	9207      	str	r2, [sp, #28]
 8002488:	e004      	b.n	8002494 <_svfiprintf_r+0x100>
 800248a:	4252      	negs	r2, r2
 800248c:	f043 0302 	orr.w	r3, r3, #2
 8002490:	9207      	str	r2, [sp, #28]
 8002492:	9304      	str	r3, [sp, #16]
 8002494:	783b      	ldrb	r3, [r7, #0]
 8002496:	2b2e      	cmp	r3, #46	; 0x2e
 8002498:	d10e      	bne.n	80024b8 <_svfiprintf_r+0x124>
 800249a:	787b      	ldrb	r3, [r7, #1]
 800249c:	2b2a      	cmp	r3, #42	; 0x2a
 800249e:	f107 0101 	add.w	r1, r7, #1
 80024a2:	d132      	bne.n	800250a <_svfiprintf_r+0x176>
 80024a4:	9b03      	ldr	r3, [sp, #12]
 80024a6:	1d1a      	adds	r2, r3, #4
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	9203      	str	r2, [sp, #12]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bfb8      	it	lt
 80024b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80024b4:	3702      	adds	r7, #2
 80024b6:	9305      	str	r3, [sp, #20]
 80024b8:	4c2c      	ldr	r4, [pc, #176]	; (800256c <_svfiprintf_r+0x1d8>)
 80024ba:	7839      	ldrb	r1, [r7, #0]
 80024bc:	2203      	movs	r2, #3
 80024be:	4620      	mov	r0, r4
 80024c0:	f7fd fe8e 	bl	80001e0 <memchr>
 80024c4:	b138      	cbz	r0, 80024d6 <_svfiprintf_r+0x142>
 80024c6:	2340      	movs	r3, #64	; 0x40
 80024c8:	1b00      	subs	r0, r0, r4
 80024ca:	fa03 f000 	lsl.w	r0, r3, r0
 80024ce:	9b04      	ldr	r3, [sp, #16]
 80024d0:	4303      	orrs	r3, r0
 80024d2:	9304      	str	r3, [sp, #16]
 80024d4:	3701      	adds	r7, #1
 80024d6:	7839      	ldrb	r1, [r7, #0]
 80024d8:	4825      	ldr	r0, [pc, #148]	; (8002570 <_svfiprintf_r+0x1dc>)
 80024da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80024de:	2206      	movs	r2, #6
 80024e0:	1c7e      	adds	r6, r7, #1
 80024e2:	f7fd fe7d 	bl	80001e0 <memchr>
 80024e6:	2800      	cmp	r0, #0
 80024e8:	d035      	beq.n	8002556 <_svfiprintf_r+0x1c2>
 80024ea:	4b22      	ldr	r3, [pc, #136]	; (8002574 <_svfiprintf_r+0x1e0>)
 80024ec:	b9fb      	cbnz	r3, 800252e <_svfiprintf_r+0x19a>
 80024ee:	9b03      	ldr	r3, [sp, #12]
 80024f0:	3307      	adds	r3, #7
 80024f2:	f023 0307 	bic.w	r3, r3, #7
 80024f6:	3308      	adds	r3, #8
 80024f8:	9303      	str	r3, [sp, #12]
 80024fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024fc:	444b      	add	r3, r9
 80024fe:	9309      	str	r3, [sp, #36]	; 0x24
 8002500:	e76c      	b.n	80023dc <_svfiprintf_r+0x48>
 8002502:	fb00 3202 	mla	r2, r0, r2, r3
 8002506:	2101      	movs	r1, #1
 8002508:	e7a3      	b.n	8002452 <_svfiprintf_r+0xbe>
 800250a:	2300      	movs	r3, #0
 800250c:	9305      	str	r3, [sp, #20]
 800250e:	4618      	mov	r0, r3
 8002510:	240a      	movs	r4, #10
 8002512:	460f      	mov	r7, r1
 8002514:	3101      	adds	r1, #1
 8002516:	783a      	ldrb	r2, [r7, #0]
 8002518:	3a30      	subs	r2, #48	; 0x30
 800251a:	2a09      	cmp	r2, #9
 800251c:	d903      	bls.n	8002526 <_svfiprintf_r+0x192>
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0ca      	beq.n	80024b8 <_svfiprintf_r+0x124>
 8002522:	9005      	str	r0, [sp, #20]
 8002524:	e7c8      	b.n	80024b8 <_svfiprintf_r+0x124>
 8002526:	fb04 2000 	mla	r0, r4, r0, r2
 800252a:	2301      	movs	r3, #1
 800252c:	e7f1      	b.n	8002512 <_svfiprintf_r+0x17e>
 800252e:	ab03      	add	r3, sp, #12
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	462a      	mov	r2, r5
 8002534:	4b10      	ldr	r3, [pc, #64]	; (8002578 <_svfiprintf_r+0x1e4>)
 8002536:	a904      	add	r1, sp, #16
 8002538:	4640      	mov	r0, r8
 800253a:	f3af 8000 	nop.w
 800253e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002542:	4681      	mov	r9, r0
 8002544:	d1d9      	bne.n	80024fa <_svfiprintf_r+0x166>
 8002546:	89ab      	ldrh	r3, [r5, #12]
 8002548:	065b      	lsls	r3, r3, #25
 800254a:	f53f af38 	bmi.w	80023be <_svfiprintf_r+0x2a>
 800254e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002550:	b01d      	add	sp, #116	; 0x74
 8002552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002556:	ab03      	add	r3, sp, #12
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	462a      	mov	r2, r5
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <_svfiprintf_r+0x1e4>)
 800255e:	a904      	add	r1, sp, #16
 8002560:	4640      	mov	r0, r8
 8002562:	f000 f881 	bl	8002668 <_printf_i>
 8002566:	e7ea      	b.n	800253e <_svfiprintf_r+0x1aa>
 8002568:	08002bb2 	.word	0x08002bb2
 800256c:	08002bb8 	.word	0x08002bb8
 8002570:	08002bbc 	.word	0x08002bbc
 8002574:	00000000 	.word	0x00000000
 8002578:	080022dd 	.word	0x080022dd

0800257c <_printf_common>:
 800257c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002580:	4691      	mov	r9, r2
 8002582:	461f      	mov	r7, r3
 8002584:	688a      	ldr	r2, [r1, #8]
 8002586:	690b      	ldr	r3, [r1, #16]
 8002588:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800258c:	4293      	cmp	r3, r2
 800258e:	bfb8      	it	lt
 8002590:	4613      	movlt	r3, r2
 8002592:	f8c9 3000 	str.w	r3, [r9]
 8002596:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800259a:	4606      	mov	r6, r0
 800259c:	460c      	mov	r4, r1
 800259e:	b112      	cbz	r2, 80025a6 <_printf_common+0x2a>
 80025a0:	3301      	adds	r3, #1
 80025a2:	f8c9 3000 	str.w	r3, [r9]
 80025a6:	6823      	ldr	r3, [r4, #0]
 80025a8:	0699      	lsls	r1, r3, #26
 80025aa:	bf42      	ittt	mi
 80025ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 80025b0:	3302      	addmi	r3, #2
 80025b2:	f8c9 3000 	strmi.w	r3, [r9]
 80025b6:	6825      	ldr	r5, [r4, #0]
 80025b8:	f015 0506 	ands.w	r5, r5, #6
 80025bc:	d107      	bne.n	80025ce <_printf_common+0x52>
 80025be:	f104 0a19 	add.w	sl, r4, #25
 80025c2:	68e3      	ldr	r3, [r4, #12]
 80025c4:	f8d9 2000 	ldr.w	r2, [r9]
 80025c8:	1a9b      	subs	r3, r3, r2
 80025ca:	429d      	cmp	r5, r3
 80025cc:	db29      	blt.n	8002622 <_printf_common+0xa6>
 80025ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80025d2:	6822      	ldr	r2, [r4, #0]
 80025d4:	3300      	adds	r3, #0
 80025d6:	bf18      	it	ne
 80025d8:	2301      	movne	r3, #1
 80025da:	0692      	lsls	r2, r2, #26
 80025dc:	d42e      	bmi.n	800263c <_printf_common+0xc0>
 80025de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80025e2:	4639      	mov	r1, r7
 80025e4:	4630      	mov	r0, r6
 80025e6:	47c0      	blx	r8
 80025e8:	3001      	adds	r0, #1
 80025ea:	d021      	beq.n	8002630 <_printf_common+0xb4>
 80025ec:	6823      	ldr	r3, [r4, #0]
 80025ee:	68e5      	ldr	r5, [r4, #12]
 80025f0:	f8d9 2000 	ldr.w	r2, [r9]
 80025f4:	f003 0306 	and.w	r3, r3, #6
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	bf08      	it	eq
 80025fc:	1aad      	subeq	r5, r5, r2
 80025fe:	68a3      	ldr	r3, [r4, #8]
 8002600:	6922      	ldr	r2, [r4, #16]
 8002602:	bf0c      	ite	eq
 8002604:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002608:	2500      	movne	r5, #0
 800260a:	4293      	cmp	r3, r2
 800260c:	bfc4      	itt	gt
 800260e:	1a9b      	subgt	r3, r3, r2
 8002610:	18ed      	addgt	r5, r5, r3
 8002612:	f04f 0900 	mov.w	r9, #0
 8002616:	341a      	adds	r4, #26
 8002618:	454d      	cmp	r5, r9
 800261a:	d11b      	bne.n	8002654 <_printf_common+0xd8>
 800261c:	2000      	movs	r0, #0
 800261e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002622:	2301      	movs	r3, #1
 8002624:	4652      	mov	r2, sl
 8002626:	4639      	mov	r1, r7
 8002628:	4630      	mov	r0, r6
 800262a:	47c0      	blx	r8
 800262c:	3001      	adds	r0, #1
 800262e:	d103      	bne.n	8002638 <_printf_common+0xbc>
 8002630:	f04f 30ff 	mov.w	r0, #4294967295
 8002634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002638:	3501      	adds	r5, #1
 800263a:	e7c2      	b.n	80025c2 <_printf_common+0x46>
 800263c:	18e1      	adds	r1, r4, r3
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	2030      	movs	r0, #48	; 0x30
 8002642:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002646:	4422      	add	r2, r4
 8002648:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800264c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002650:	3302      	adds	r3, #2
 8002652:	e7c4      	b.n	80025de <_printf_common+0x62>
 8002654:	2301      	movs	r3, #1
 8002656:	4622      	mov	r2, r4
 8002658:	4639      	mov	r1, r7
 800265a:	4630      	mov	r0, r6
 800265c:	47c0      	blx	r8
 800265e:	3001      	adds	r0, #1
 8002660:	d0e6      	beq.n	8002630 <_printf_common+0xb4>
 8002662:	f109 0901 	add.w	r9, r9, #1
 8002666:	e7d7      	b.n	8002618 <_printf_common+0x9c>

08002668 <_printf_i>:
 8002668:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800266c:	4617      	mov	r7, r2
 800266e:	7e0a      	ldrb	r2, [r1, #24]
 8002670:	b085      	sub	sp, #20
 8002672:	2a6e      	cmp	r2, #110	; 0x6e
 8002674:	4698      	mov	r8, r3
 8002676:	4606      	mov	r6, r0
 8002678:	460c      	mov	r4, r1
 800267a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800267c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002680:	f000 80bc 	beq.w	80027fc <_printf_i+0x194>
 8002684:	d81a      	bhi.n	80026bc <_printf_i+0x54>
 8002686:	2a63      	cmp	r2, #99	; 0x63
 8002688:	d02e      	beq.n	80026e8 <_printf_i+0x80>
 800268a:	d80a      	bhi.n	80026a2 <_printf_i+0x3a>
 800268c:	2a00      	cmp	r2, #0
 800268e:	f000 80c8 	beq.w	8002822 <_printf_i+0x1ba>
 8002692:	2a58      	cmp	r2, #88	; 0x58
 8002694:	f000 808a 	beq.w	80027ac <_printf_i+0x144>
 8002698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800269c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80026a0:	e02a      	b.n	80026f8 <_printf_i+0x90>
 80026a2:	2a64      	cmp	r2, #100	; 0x64
 80026a4:	d001      	beq.n	80026aa <_printf_i+0x42>
 80026a6:	2a69      	cmp	r2, #105	; 0x69
 80026a8:	d1f6      	bne.n	8002698 <_printf_i+0x30>
 80026aa:	6821      	ldr	r1, [r4, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	f011 0f80 	tst.w	r1, #128	; 0x80
 80026b2:	d023      	beq.n	80026fc <_printf_i+0x94>
 80026b4:	1d11      	adds	r1, r2, #4
 80026b6:	6019      	str	r1, [r3, #0]
 80026b8:	6813      	ldr	r3, [r2, #0]
 80026ba:	e027      	b.n	800270c <_printf_i+0xa4>
 80026bc:	2a73      	cmp	r2, #115	; 0x73
 80026be:	f000 80b4 	beq.w	800282a <_printf_i+0x1c2>
 80026c2:	d808      	bhi.n	80026d6 <_printf_i+0x6e>
 80026c4:	2a6f      	cmp	r2, #111	; 0x6f
 80026c6:	d02a      	beq.n	800271e <_printf_i+0xb6>
 80026c8:	2a70      	cmp	r2, #112	; 0x70
 80026ca:	d1e5      	bne.n	8002698 <_printf_i+0x30>
 80026cc:	680a      	ldr	r2, [r1, #0]
 80026ce:	f042 0220 	orr.w	r2, r2, #32
 80026d2:	600a      	str	r2, [r1, #0]
 80026d4:	e003      	b.n	80026de <_printf_i+0x76>
 80026d6:	2a75      	cmp	r2, #117	; 0x75
 80026d8:	d021      	beq.n	800271e <_printf_i+0xb6>
 80026da:	2a78      	cmp	r2, #120	; 0x78
 80026dc:	d1dc      	bne.n	8002698 <_printf_i+0x30>
 80026de:	2278      	movs	r2, #120	; 0x78
 80026e0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80026e4:	496e      	ldr	r1, [pc, #440]	; (80028a0 <_printf_i+0x238>)
 80026e6:	e064      	b.n	80027b2 <_printf_i+0x14a>
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80026ee:	1d11      	adds	r1, r2, #4
 80026f0:	6019      	str	r1, [r3, #0]
 80026f2:	6813      	ldr	r3, [r2, #0]
 80026f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80026f8:	2301      	movs	r3, #1
 80026fa:	e0a3      	b.n	8002844 <_printf_i+0x1dc>
 80026fc:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002700:	f102 0104 	add.w	r1, r2, #4
 8002704:	6019      	str	r1, [r3, #0]
 8002706:	d0d7      	beq.n	80026b8 <_printf_i+0x50>
 8002708:	f9b2 3000 	ldrsh.w	r3, [r2]
 800270c:	2b00      	cmp	r3, #0
 800270e:	da03      	bge.n	8002718 <_printf_i+0xb0>
 8002710:	222d      	movs	r2, #45	; 0x2d
 8002712:	425b      	negs	r3, r3
 8002714:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002718:	4962      	ldr	r1, [pc, #392]	; (80028a4 <_printf_i+0x23c>)
 800271a:	220a      	movs	r2, #10
 800271c:	e017      	b.n	800274e <_printf_i+0xe6>
 800271e:	6820      	ldr	r0, [r4, #0]
 8002720:	6819      	ldr	r1, [r3, #0]
 8002722:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002726:	d003      	beq.n	8002730 <_printf_i+0xc8>
 8002728:	1d08      	adds	r0, r1, #4
 800272a:	6018      	str	r0, [r3, #0]
 800272c:	680b      	ldr	r3, [r1, #0]
 800272e:	e006      	b.n	800273e <_printf_i+0xd6>
 8002730:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002734:	f101 0004 	add.w	r0, r1, #4
 8002738:	6018      	str	r0, [r3, #0]
 800273a:	d0f7      	beq.n	800272c <_printf_i+0xc4>
 800273c:	880b      	ldrh	r3, [r1, #0]
 800273e:	4959      	ldr	r1, [pc, #356]	; (80028a4 <_printf_i+0x23c>)
 8002740:	2a6f      	cmp	r2, #111	; 0x6f
 8002742:	bf14      	ite	ne
 8002744:	220a      	movne	r2, #10
 8002746:	2208      	moveq	r2, #8
 8002748:	2000      	movs	r0, #0
 800274a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800274e:	6865      	ldr	r5, [r4, #4]
 8002750:	60a5      	str	r5, [r4, #8]
 8002752:	2d00      	cmp	r5, #0
 8002754:	f2c0 809c 	blt.w	8002890 <_printf_i+0x228>
 8002758:	6820      	ldr	r0, [r4, #0]
 800275a:	f020 0004 	bic.w	r0, r0, #4
 800275e:	6020      	str	r0, [r4, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d13f      	bne.n	80027e4 <_printf_i+0x17c>
 8002764:	2d00      	cmp	r5, #0
 8002766:	f040 8095 	bne.w	8002894 <_printf_i+0x22c>
 800276a:	4675      	mov	r5, lr
 800276c:	2a08      	cmp	r2, #8
 800276e:	d10b      	bne.n	8002788 <_printf_i+0x120>
 8002770:	6823      	ldr	r3, [r4, #0]
 8002772:	07da      	lsls	r2, r3, #31
 8002774:	d508      	bpl.n	8002788 <_printf_i+0x120>
 8002776:	6923      	ldr	r3, [r4, #16]
 8002778:	6862      	ldr	r2, [r4, #4]
 800277a:	429a      	cmp	r2, r3
 800277c:	bfde      	ittt	le
 800277e:	2330      	movle	r3, #48	; 0x30
 8002780:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002784:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002788:	ebae 0305 	sub.w	r3, lr, r5
 800278c:	6123      	str	r3, [r4, #16]
 800278e:	f8cd 8000 	str.w	r8, [sp]
 8002792:	463b      	mov	r3, r7
 8002794:	aa03      	add	r2, sp, #12
 8002796:	4621      	mov	r1, r4
 8002798:	4630      	mov	r0, r6
 800279a:	f7ff feef 	bl	800257c <_printf_common>
 800279e:	3001      	adds	r0, #1
 80027a0:	d155      	bne.n	800284e <_printf_i+0x1e6>
 80027a2:	f04f 30ff 	mov.w	r0, #4294967295
 80027a6:	b005      	add	sp, #20
 80027a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80027ac:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80027b0:	493c      	ldr	r1, [pc, #240]	; (80028a4 <_printf_i+0x23c>)
 80027b2:	6822      	ldr	r2, [r4, #0]
 80027b4:	6818      	ldr	r0, [r3, #0]
 80027b6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80027ba:	f100 0504 	add.w	r5, r0, #4
 80027be:	601d      	str	r5, [r3, #0]
 80027c0:	d001      	beq.n	80027c6 <_printf_i+0x15e>
 80027c2:	6803      	ldr	r3, [r0, #0]
 80027c4:	e002      	b.n	80027cc <_printf_i+0x164>
 80027c6:	0655      	lsls	r5, r2, #25
 80027c8:	d5fb      	bpl.n	80027c2 <_printf_i+0x15a>
 80027ca:	8803      	ldrh	r3, [r0, #0]
 80027cc:	07d0      	lsls	r0, r2, #31
 80027ce:	bf44      	itt	mi
 80027d0:	f042 0220 	orrmi.w	r2, r2, #32
 80027d4:	6022      	strmi	r2, [r4, #0]
 80027d6:	b91b      	cbnz	r3, 80027e0 <_printf_i+0x178>
 80027d8:	6822      	ldr	r2, [r4, #0]
 80027da:	f022 0220 	bic.w	r2, r2, #32
 80027de:	6022      	str	r2, [r4, #0]
 80027e0:	2210      	movs	r2, #16
 80027e2:	e7b1      	b.n	8002748 <_printf_i+0xe0>
 80027e4:	4675      	mov	r5, lr
 80027e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80027ea:	fb02 3310 	mls	r3, r2, r0, r3
 80027ee:	5ccb      	ldrb	r3, [r1, r3]
 80027f0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80027f4:	4603      	mov	r3, r0
 80027f6:	2800      	cmp	r0, #0
 80027f8:	d1f5      	bne.n	80027e6 <_printf_i+0x17e>
 80027fa:	e7b7      	b.n	800276c <_printf_i+0x104>
 80027fc:	6808      	ldr	r0, [r1, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	6949      	ldr	r1, [r1, #20]
 8002802:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002806:	d004      	beq.n	8002812 <_printf_i+0x1aa>
 8002808:	1d10      	adds	r0, r2, #4
 800280a:	6018      	str	r0, [r3, #0]
 800280c:	6813      	ldr	r3, [r2, #0]
 800280e:	6019      	str	r1, [r3, #0]
 8002810:	e007      	b.n	8002822 <_printf_i+0x1ba>
 8002812:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002816:	f102 0004 	add.w	r0, r2, #4
 800281a:	6018      	str	r0, [r3, #0]
 800281c:	6813      	ldr	r3, [r2, #0]
 800281e:	d0f6      	beq.n	800280e <_printf_i+0x1a6>
 8002820:	8019      	strh	r1, [r3, #0]
 8002822:	2300      	movs	r3, #0
 8002824:	6123      	str	r3, [r4, #16]
 8002826:	4675      	mov	r5, lr
 8002828:	e7b1      	b.n	800278e <_printf_i+0x126>
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	1d11      	adds	r1, r2, #4
 800282e:	6019      	str	r1, [r3, #0]
 8002830:	6815      	ldr	r5, [r2, #0]
 8002832:	6862      	ldr	r2, [r4, #4]
 8002834:	2100      	movs	r1, #0
 8002836:	4628      	mov	r0, r5
 8002838:	f7fd fcd2 	bl	80001e0 <memchr>
 800283c:	b108      	cbz	r0, 8002842 <_printf_i+0x1da>
 800283e:	1b40      	subs	r0, r0, r5
 8002840:	6060      	str	r0, [r4, #4]
 8002842:	6863      	ldr	r3, [r4, #4]
 8002844:	6123      	str	r3, [r4, #16]
 8002846:	2300      	movs	r3, #0
 8002848:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800284c:	e79f      	b.n	800278e <_printf_i+0x126>
 800284e:	6923      	ldr	r3, [r4, #16]
 8002850:	462a      	mov	r2, r5
 8002852:	4639      	mov	r1, r7
 8002854:	4630      	mov	r0, r6
 8002856:	47c0      	blx	r8
 8002858:	3001      	adds	r0, #1
 800285a:	d0a2      	beq.n	80027a2 <_printf_i+0x13a>
 800285c:	6823      	ldr	r3, [r4, #0]
 800285e:	079b      	lsls	r3, r3, #30
 8002860:	d507      	bpl.n	8002872 <_printf_i+0x20a>
 8002862:	2500      	movs	r5, #0
 8002864:	f104 0919 	add.w	r9, r4, #25
 8002868:	68e3      	ldr	r3, [r4, #12]
 800286a:	9a03      	ldr	r2, [sp, #12]
 800286c:	1a9b      	subs	r3, r3, r2
 800286e:	429d      	cmp	r5, r3
 8002870:	db05      	blt.n	800287e <_printf_i+0x216>
 8002872:	68e0      	ldr	r0, [r4, #12]
 8002874:	9b03      	ldr	r3, [sp, #12]
 8002876:	4298      	cmp	r0, r3
 8002878:	bfb8      	it	lt
 800287a:	4618      	movlt	r0, r3
 800287c:	e793      	b.n	80027a6 <_printf_i+0x13e>
 800287e:	2301      	movs	r3, #1
 8002880:	464a      	mov	r2, r9
 8002882:	4639      	mov	r1, r7
 8002884:	4630      	mov	r0, r6
 8002886:	47c0      	blx	r8
 8002888:	3001      	adds	r0, #1
 800288a:	d08a      	beq.n	80027a2 <_printf_i+0x13a>
 800288c:	3501      	adds	r5, #1
 800288e:	e7eb      	b.n	8002868 <_printf_i+0x200>
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1a7      	bne.n	80027e4 <_printf_i+0x17c>
 8002894:	780b      	ldrb	r3, [r1, #0]
 8002896:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800289a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800289e:	e765      	b.n	800276c <_printf_i+0x104>
 80028a0:	08002bd4 	.word	0x08002bd4
 80028a4:	08002bc3 	.word	0x08002bc3

080028a8 <_sbrk_r>:
 80028a8:	b538      	push	{r3, r4, r5, lr}
 80028aa:	4c06      	ldr	r4, [pc, #24]	; (80028c4 <_sbrk_r+0x1c>)
 80028ac:	2300      	movs	r3, #0
 80028ae:	4605      	mov	r5, r0
 80028b0:	4608      	mov	r0, r1
 80028b2:	6023      	str	r3, [r4, #0]
 80028b4:	f7fe ff42 	bl	800173c <_sbrk>
 80028b8:	1c43      	adds	r3, r0, #1
 80028ba:	d102      	bne.n	80028c2 <_sbrk_r+0x1a>
 80028bc:	6823      	ldr	r3, [r4, #0]
 80028be:	b103      	cbz	r3, 80028c2 <_sbrk_r+0x1a>
 80028c0:	602b      	str	r3, [r5, #0]
 80028c2:	bd38      	pop	{r3, r4, r5, pc}
 80028c4:	2000035c 	.word	0x2000035c

080028c8 <__sread>:
 80028c8:	b510      	push	{r4, lr}
 80028ca:	460c      	mov	r4, r1
 80028cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028d0:	f000 f8ee 	bl	8002ab0 <_read_r>
 80028d4:	2800      	cmp	r0, #0
 80028d6:	bfab      	itete	ge
 80028d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80028da:	89a3      	ldrhlt	r3, [r4, #12]
 80028dc:	181b      	addge	r3, r3, r0
 80028de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80028e2:	bfac      	ite	ge
 80028e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80028e6:	81a3      	strhlt	r3, [r4, #12]
 80028e8:	bd10      	pop	{r4, pc}

080028ea <__swrite>:
 80028ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028ee:	461f      	mov	r7, r3
 80028f0:	898b      	ldrh	r3, [r1, #12]
 80028f2:	05db      	lsls	r3, r3, #23
 80028f4:	4605      	mov	r5, r0
 80028f6:	460c      	mov	r4, r1
 80028f8:	4616      	mov	r6, r2
 80028fa:	d505      	bpl.n	8002908 <__swrite+0x1e>
 80028fc:	2302      	movs	r3, #2
 80028fe:	2200      	movs	r2, #0
 8002900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002904:	f000 f874 	bl	80029f0 <_lseek_r>
 8002908:	89a3      	ldrh	r3, [r4, #12]
 800290a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800290e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002912:	81a3      	strh	r3, [r4, #12]
 8002914:	4632      	mov	r2, r6
 8002916:	463b      	mov	r3, r7
 8002918:	4628      	mov	r0, r5
 800291a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800291e:	f000 b823 	b.w	8002968 <_write_r>

08002922 <__sseek>:
 8002922:	b510      	push	{r4, lr}
 8002924:	460c      	mov	r4, r1
 8002926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800292a:	f000 f861 	bl	80029f0 <_lseek_r>
 800292e:	1c43      	adds	r3, r0, #1
 8002930:	89a3      	ldrh	r3, [r4, #12]
 8002932:	bf15      	itete	ne
 8002934:	6560      	strne	r0, [r4, #84]	; 0x54
 8002936:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800293a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800293e:	81a3      	strheq	r3, [r4, #12]
 8002940:	bf18      	it	ne
 8002942:	81a3      	strhne	r3, [r4, #12]
 8002944:	bd10      	pop	{r4, pc}

08002946 <__sclose>:
 8002946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800294a:	f000 b81f 	b.w	800298c <_close_r>

0800294e <__ascii_wctomb>:
 800294e:	b149      	cbz	r1, 8002964 <__ascii_wctomb+0x16>
 8002950:	2aff      	cmp	r2, #255	; 0xff
 8002952:	bf85      	ittet	hi
 8002954:	238a      	movhi	r3, #138	; 0x8a
 8002956:	6003      	strhi	r3, [r0, #0]
 8002958:	700a      	strbls	r2, [r1, #0]
 800295a:	f04f 30ff 	movhi.w	r0, #4294967295
 800295e:	bf98      	it	ls
 8002960:	2001      	movls	r0, #1
 8002962:	4770      	bx	lr
 8002964:	4608      	mov	r0, r1
 8002966:	4770      	bx	lr

08002968 <_write_r>:
 8002968:	b538      	push	{r3, r4, r5, lr}
 800296a:	4c07      	ldr	r4, [pc, #28]	; (8002988 <_write_r+0x20>)
 800296c:	4605      	mov	r5, r0
 800296e:	4608      	mov	r0, r1
 8002970:	4611      	mov	r1, r2
 8002972:	2200      	movs	r2, #0
 8002974:	6022      	str	r2, [r4, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	f7fe fdc6 	bl	8001508 <_write>
 800297c:	1c43      	adds	r3, r0, #1
 800297e:	d102      	bne.n	8002986 <_write_r+0x1e>
 8002980:	6823      	ldr	r3, [r4, #0]
 8002982:	b103      	cbz	r3, 8002986 <_write_r+0x1e>
 8002984:	602b      	str	r3, [r5, #0]
 8002986:	bd38      	pop	{r3, r4, r5, pc}
 8002988:	2000035c 	.word	0x2000035c

0800298c <_close_r>:
 800298c:	b538      	push	{r3, r4, r5, lr}
 800298e:	4c06      	ldr	r4, [pc, #24]	; (80029a8 <_close_r+0x1c>)
 8002990:	2300      	movs	r3, #0
 8002992:	4605      	mov	r5, r0
 8002994:	4608      	mov	r0, r1
 8002996:	6023      	str	r3, [r4, #0]
 8002998:	f7fe feea 	bl	8001770 <_close>
 800299c:	1c43      	adds	r3, r0, #1
 800299e:	d102      	bne.n	80029a6 <_close_r+0x1a>
 80029a0:	6823      	ldr	r3, [r4, #0]
 80029a2:	b103      	cbz	r3, 80029a6 <_close_r+0x1a>
 80029a4:	602b      	str	r3, [r5, #0]
 80029a6:	bd38      	pop	{r3, r4, r5, pc}
 80029a8:	2000035c 	.word	0x2000035c

080029ac <_fstat_r>:
 80029ac:	b538      	push	{r3, r4, r5, lr}
 80029ae:	4c07      	ldr	r4, [pc, #28]	; (80029cc <_fstat_r+0x20>)
 80029b0:	2300      	movs	r3, #0
 80029b2:	4605      	mov	r5, r0
 80029b4:	4608      	mov	r0, r1
 80029b6:	4611      	mov	r1, r2
 80029b8:	6023      	str	r3, [r4, #0]
 80029ba:	f7fe fedc 	bl	8001776 <_fstat>
 80029be:	1c43      	adds	r3, r0, #1
 80029c0:	d102      	bne.n	80029c8 <_fstat_r+0x1c>
 80029c2:	6823      	ldr	r3, [r4, #0]
 80029c4:	b103      	cbz	r3, 80029c8 <_fstat_r+0x1c>
 80029c6:	602b      	str	r3, [r5, #0]
 80029c8:	bd38      	pop	{r3, r4, r5, pc}
 80029ca:	bf00      	nop
 80029cc:	2000035c 	.word	0x2000035c

080029d0 <_isatty_r>:
 80029d0:	b538      	push	{r3, r4, r5, lr}
 80029d2:	4c06      	ldr	r4, [pc, #24]	; (80029ec <_isatty_r+0x1c>)
 80029d4:	2300      	movs	r3, #0
 80029d6:	4605      	mov	r5, r0
 80029d8:	4608      	mov	r0, r1
 80029da:	6023      	str	r3, [r4, #0]
 80029dc:	f7fe fed0 	bl	8001780 <_isatty>
 80029e0:	1c43      	adds	r3, r0, #1
 80029e2:	d102      	bne.n	80029ea <_isatty_r+0x1a>
 80029e4:	6823      	ldr	r3, [r4, #0]
 80029e6:	b103      	cbz	r3, 80029ea <_isatty_r+0x1a>
 80029e8:	602b      	str	r3, [r5, #0]
 80029ea:	bd38      	pop	{r3, r4, r5, pc}
 80029ec:	2000035c 	.word	0x2000035c

080029f0 <_lseek_r>:
 80029f0:	b538      	push	{r3, r4, r5, lr}
 80029f2:	4c07      	ldr	r4, [pc, #28]	; (8002a10 <_lseek_r+0x20>)
 80029f4:	4605      	mov	r5, r0
 80029f6:	4608      	mov	r0, r1
 80029f8:	4611      	mov	r1, r2
 80029fa:	2200      	movs	r2, #0
 80029fc:	6022      	str	r2, [r4, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	f7fe fec0 	bl	8001784 <_lseek>
 8002a04:	1c43      	adds	r3, r0, #1
 8002a06:	d102      	bne.n	8002a0e <_lseek_r+0x1e>
 8002a08:	6823      	ldr	r3, [r4, #0]
 8002a0a:	b103      	cbz	r3, 8002a0e <_lseek_r+0x1e>
 8002a0c:	602b      	str	r3, [r5, #0]
 8002a0e:	bd38      	pop	{r3, r4, r5, pc}
 8002a10:	2000035c 	.word	0x2000035c

08002a14 <memcpy>:
 8002a14:	b510      	push	{r4, lr}
 8002a16:	1e43      	subs	r3, r0, #1
 8002a18:	440a      	add	r2, r1
 8002a1a:	4291      	cmp	r1, r2
 8002a1c:	d100      	bne.n	8002a20 <memcpy+0xc>
 8002a1e:	bd10      	pop	{r4, pc}
 8002a20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a28:	e7f7      	b.n	8002a1a <memcpy+0x6>

08002a2a <memmove>:
 8002a2a:	4288      	cmp	r0, r1
 8002a2c:	b510      	push	{r4, lr}
 8002a2e:	eb01 0302 	add.w	r3, r1, r2
 8002a32:	d803      	bhi.n	8002a3c <memmove+0x12>
 8002a34:	1e42      	subs	r2, r0, #1
 8002a36:	4299      	cmp	r1, r3
 8002a38:	d10c      	bne.n	8002a54 <memmove+0x2a>
 8002a3a:	bd10      	pop	{r4, pc}
 8002a3c:	4298      	cmp	r0, r3
 8002a3e:	d2f9      	bcs.n	8002a34 <memmove+0xa>
 8002a40:	1881      	adds	r1, r0, r2
 8002a42:	1ad2      	subs	r2, r2, r3
 8002a44:	42d3      	cmn	r3, r2
 8002a46:	d100      	bne.n	8002a4a <memmove+0x20>
 8002a48:	bd10      	pop	{r4, pc}
 8002a4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002a4e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002a52:	e7f7      	b.n	8002a44 <memmove+0x1a>
 8002a54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a58:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002a5c:	e7eb      	b.n	8002a36 <memmove+0xc>

08002a5e <__malloc_lock>:
 8002a5e:	4770      	bx	lr

08002a60 <__malloc_unlock>:
 8002a60:	4770      	bx	lr

08002a62 <_realloc_r>:
 8002a62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a64:	4607      	mov	r7, r0
 8002a66:	4614      	mov	r4, r2
 8002a68:	460e      	mov	r6, r1
 8002a6a:	b921      	cbnz	r1, 8002a76 <_realloc_r+0x14>
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002a72:	f7ff bbd5 	b.w	8002220 <_malloc_r>
 8002a76:	b922      	cbnz	r2, 8002a82 <_realloc_r+0x20>
 8002a78:	f7ff fb84 	bl	8002184 <_free_r>
 8002a7c:	4625      	mov	r5, r4
 8002a7e:	4628      	mov	r0, r5
 8002a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a82:	f000 f827 	bl	8002ad4 <_malloc_usable_size_r>
 8002a86:	4284      	cmp	r4, r0
 8002a88:	d90f      	bls.n	8002aaa <_realloc_r+0x48>
 8002a8a:	4621      	mov	r1, r4
 8002a8c:	4638      	mov	r0, r7
 8002a8e:	f7ff fbc7 	bl	8002220 <_malloc_r>
 8002a92:	4605      	mov	r5, r0
 8002a94:	2800      	cmp	r0, #0
 8002a96:	d0f2      	beq.n	8002a7e <_realloc_r+0x1c>
 8002a98:	4631      	mov	r1, r6
 8002a9a:	4622      	mov	r2, r4
 8002a9c:	f7ff ffba 	bl	8002a14 <memcpy>
 8002aa0:	4631      	mov	r1, r6
 8002aa2:	4638      	mov	r0, r7
 8002aa4:	f7ff fb6e 	bl	8002184 <_free_r>
 8002aa8:	e7e9      	b.n	8002a7e <_realloc_r+0x1c>
 8002aaa:	4635      	mov	r5, r6
 8002aac:	e7e7      	b.n	8002a7e <_realloc_r+0x1c>
	...

08002ab0 <_read_r>:
 8002ab0:	b538      	push	{r3, r4, r5, lr}
 8002ab2:	4c07      	ldr	r4, [pc, #28]	; (8002ad0 <_read_r+0x20>)
 8002ab4:	4605      	mov	r5, r0
 8002ab6:	4608      	mov	r0, r1
 8002ab8:	4611      	mov	r1, r2
 8002aba:	2200      	movs	r2, #0
 8002abc:	6022      	str	r2, [r4, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	f7fe fe2e 	bl	8001720 <_read>
 8002ac4:	1c43      	adds	r3, r0, #1
 8002ac6:	d102      	bne.n	8002ace <_read_r+0x1e>
 8002ac8:	6823      	ldr	r3, [r4, #0]
 8002aca:	b103      	cbz	r3, 8002ace <_read_r+0x1e>
 8002acc:	602b      	str	r3, [r5, #0]
 8002ace:	bd38      	pop	{r3, r4, r5, pc}
 8002ad0:	2000035c 	.word	0x2000035c

08002ad4 <_malloc_usable_size_r>:
 8002ad4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002ad8:	2800      	cmp	r0, #0
 8002ada:	f1a0 0004 	sub.w	r0, r0, #4
 8002ade:	bfbc      	itt	lt
 8002ae0:	580b      	ldrlt	r3, [r1, r0]
 8002ae2:	18c0      	addlt	r0, r0, r3
 8002ae4:	4770      	bx	lr
	...

08002ae8 <_init>:
 8002ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aea:	bf00      	nop
 8002aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aee:	bc08      	pop	{r3}
 8002af0:	469e      	mov	lr, r3
 8002af2:	4770      	bx	lr

08002af4 <_fini>:
 8002af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af6:	bf00      	nop
 8002af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002afa:	bc08      	pop	{r3}
 8002afc:	469e      	mov	lr, r3
 8002afe:	4770      	bx	lr
