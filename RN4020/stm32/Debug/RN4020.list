
RN4020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08002964  08002964  00012964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002a4c  08002a4c  00012a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002a54  08002a54  00012a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002a58  08002a58  00012a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  08002a5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000110  20000074  08002ad0  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000184  08002ad0  00020184  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000a308  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001ff8  00000000  00000000  0002a3ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002cfa  00000000  00000000  0002c3a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000006b0  00000000  00000000  0002f0a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000007e0  00000000  00000000  0002f750  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003a3f  00000000  00000000  0002ff30  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000027e4  00000000  00000000  0003396f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00036153  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001748  00000000  00000000  000361d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800294c 	.word	0x0800294c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800294c 	.word	0x0800294c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000590:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000592:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <HAL_InitTick+0x3c>)
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_InitTick+0x40>)
{
 8000596:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000598:	7818      	ldrb	r0, [r3, #0]
 800059a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059e:	fbb3 f3f0 	udiv	r3, r3, r0
 80005a2:	6810      	ldr	r0, [r2, #0]
 80005a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005a8:	f000 f8aa 	bl	8000700 <HAL_SYSTICK_Config>
 80005ac:	4604      	mov	r4, r0
 80005ae:	b958      	cbnz	r0, 80005c8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005b0:	2d0f      	cmp	r5, #15
 80005b2:	d809      	bhi.n	80005c8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005b4:	4602      	mov	r2, r0
 80005b6:	4629      	mov	r1, r5
 80005b8:	f04f 30ff 	mov.w	r0, #4294967295
 80005bc:	f000 f85e 	bl	800067c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <HAL_InitTick+0x44>)
 80005c2:	4620      	mov	r0, r4
 80005c4:	601d      	str	r5, [r3, #0]
 80005c6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005c8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005ca:	bd38      	pop	{r3, r4, r5, pc}
 80005cc:	2000000c 	.word	0x2000000c
 80005d0:	20000000 	.word	0x20000000
 80005d4:	20000004 	.word	0x20000004

080005d8 <HAL_Init>:
{
 80005d8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <HAL_Init+0x30>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005e2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005ea:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005f2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f4:	2003      	movs	r0, #3
 80005f6:	f000 f82f 	bl	8000658 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f7ff ffc8 	bl	8000590 <HAL_InitTick>
  HAL_MspInit();
 8000600:	f001 f904 	bl	800180c <HAL_MspInit>
}
 8000604:	2000      	movs	r0, #0
 8000606:	bd08      	pop	{r3, pc}
 8000608:	40023c00 	.word	0x40023c00

0800060c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800060c:	4a03      	ldr	r2, [pc, #12]	; (800061c <HAL_IncTick+0x10>)
 800060e:	4b04      	ldr	r3, [pc, #16]	; (8000620 <HAL_IncTick+0x14>)
 8000610:	6811      	ldr	r1, [r2, #0]
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	440b      	add	r3, r1
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	2000009c 	.word	0x2000009c
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000624:	4b01      	ldr	r3, [pc, #4]	; (800062c <HAL_GetTick+0x8>)
 8000626:	6818      	ldr	r0, [r3, #0]
}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	2000009c 	.word	0x2000009c

08000630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000630:	b538      	push	{r3, r4, r5, lr}
 8000632:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000634:	f7ff fff6 	bl	8000624 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000638:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800063a:	bf1c      	itt	ne
 800063c:	4b05      	ldrne	r3, [pc, #20]	; (8000654 <HAL_Delay+0x24>)
 800063e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000640:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000642:	bf18      	it	ne
 8000644:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000646:	f7ff ffed 	bl	8000624 <HAL_GetTick>
 800064a:	1b40      	subs	r0, r0, r5
 800064c:	4284      	cmp	r4, r0
 800064e:	d8fa      	bhi.n	8000646 <HAL_Delay+0x16>
  {
  }
}
 8000650:	bd38      	pop	{r3, r4, r5, pc}
 8000652:	bf00      	nop
 8000654:	20000000 	.word	0x20000000

08000658 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000658:	4a07      	ldr	r2, [pc, #28]	; (8000678 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800065a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000660:	041b      	lsls	r3, r3, #16
 8000662:	0c1b      	lsrs	r3, r3, #16
 8000664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000668:	0200      	lsls	r0, r0, #8
 800066a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800066e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000672:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000674:	60d3      	str	r3, [r2, #12]
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800067e:	b530      	push	{r4, r5, lr}
 8000680:	68dc      	ldr	r4, [r3, #12]
 8000682:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000686:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800068a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800068c:	2b04      	cmp	r3, #4
 800068e:	bf28      	it	cs
 8000690:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000692:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000694:	f04f 0501 	mov.w	r5, #1
 8000698:	fa05 f303 	lsl.w	r3, r5, r3
 800069c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a0:	bf8c      	ite	hi
 80006a2:	3c03      	subhi	r4, #3
 80006a4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a6:	4019      	ands	r1, r3
 80006a8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006aa:	fa05 f404 	lsl.w	r4, r5, r4
 80006ae:	3c01      	subs	r4, #1
 80006b0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80006b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	ea42 0201 	orr.w	r2, r2, r1
 80006b8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	bfad      	iteet	ge
 80006be:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	f000 000f 	andlt.w	r0, r0, #15
 80006c6:	4b06      	ldrlt	r3, [pc, #24]	; (80006e0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006cc:	bfb5      	itete	lt
 80006ce:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	bf00      	nop
 80006dc:	e000ed00 	.word	0xe000ed00
 80006e0:	e000ed14 	.word	0xe000ed14

080006e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006e4:	2800      	cmp	r0, #0
 80006e6:	db08      	blt.n	80006fa <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006e8:	0942      	lsrs	r2, r0, #5
 80006ea:	2301      	movs	r3, #1
 80006ec:	f000 001f 	and.w	r0, r0, #31
 80006f0:	fa03 f000 	lsl.w	r0, r3, r0
 80006f4:	4b01      	ldr	r3, [pc, #4]	; (80006fc <HAL_NVIC_EnableIRQ+0x18>)
 80006f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006fa:	4770      	bx	lr
 80006fc:	e000e100 	.word	0xe000e100

08000700 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000700:	3801      	subs	r0, #1
 8000702:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000706:	d20a      	bcs.n	800071e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070a:	4a07      	ldr	r2, [pc, #28]	; (8000728 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800070c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070e:	21f0      	movs	r1, #240	; 0xf0
 8000710:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000714:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000716:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000718:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800071e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000e010 	.word	0xe000e010
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800072c:	6803      	ldr	r3, [r0, #0]
 800072e:	b2da      	uxtb	r2, r3
 8000730:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000734:	f023 0303 	bic.w	r3, r3, #3
 8000738:	2118      	movs	r1, #24
 800073a:	3a10      	subs	r2, #16
 800073c:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000740:	4904      	ldr	r1, [pc, #16]	; (8000754 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000742:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000744:	bf88      	it	hi
 8000746:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000748:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800074a:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800074c:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 800074e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	08002964 	.word	0x08002964

08000758 <HAL_DMA_Init>:
{
 8000758:	b570      	push	{r4, r5, r6, lr}
 800075a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800075c:	f7ff ff62 	bl	8000624 <HAL_GetTick>
 8000760:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000762:	2c00      	cmp	r4, #0
 8000764:	d071      	beq.n	800084a <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000766:	2300      	movs	r3, #0
 8000768:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800076c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800076e:	2302      	movs	r3, #2
 8000770:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000774:	6813      	ldr	r3, [r2, #0]
 8000776:	f023 0301 	bic.w	r3, r3, #1
 800077a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800077c:	6821      	ldr	r1, [r4, #0]
 800077e:	680b      	ldr	r3, [r1, #0]
 8000780:	07d8      	lsls	r0, r3, #31
 8000782:	d43c      	bmi.n	80007fe <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000784:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000786:	4d32      	ldr	r5, [pc, #200]	; (8000850 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000788:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800078a:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800078c:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800078e:	68a3      	ldr	r3, [r4, #8]
 8000790:	4313      	orrs	r3, r2
 8000792:	68e2      	ldr	r2, [r4, #12]
 8000794:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000796:	6922      	ldr	r2, [r4, #16]
 8000798:	4313      	orrs	r3, r2
 800079a:	6962      	ldr	r2, [r4, #20]
 800079c:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800079e:	69e2      	ldr	r2, [r4, #28]
 80007a0:	4303      	orrs	r3, r0
 80007a2:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80007a4:	6a22      	ldr	r2, [r4, #32]
 80007a6:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80007a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007aa:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80007ac:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80007b0:	bf01      	itttt	eq
 80007b2:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 80007b4:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 80007b6:	4335      	orreq	r5, r6
 80007b8:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80007ba:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80007bc:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80007be:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80007c0:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80007c4:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80007c8:	d10b      	bne.n	80007e2 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 80007ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80007cc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80007ce:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80007d0:	b13d      	cbz	r5, 80007e2 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80007d2:	b9f8      	cbnz	r0, 8000814 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 80007d4:	2a01      	cmp	r2, #1
 80007d6:	d02d      	beq.n	8000834 <HAL_DMA_Init+0xdc>
 80007d8:	d301      	bcc.n	80007de <HAL_DMA_Init+0x86>
 80007da:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80007dc:	d101      	bne.n	80007e2 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80007de:	01ea      	lsls	r2, r5, #7
 80007e0:	d42b      	bmi.n	800083a <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 80007e2:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80007e4:	4620      	mov	r0, r4
 80007e6:	f7ff ffa1 	bl	800072c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80007ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80007ec:	233f      	movs	r3, #63	; 0x3f
 80007ee:	4093      	lsls	r3, r2
 80007f0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007f2:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80007f4:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007f6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80007f8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80007fe:	f7ff ff11 	bl	8000624 <HAL_GetTick>
 8000802:	1b40      	subs	r0, r0, r5
 8000804:	2805      	cmp	r0, #5
 8000806:	d9b9      	bls.n	800077c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000808:	2320      	movs	r3, #32
 800080a:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800080c:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 800080e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000812:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000814:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000818:	d113      	bne.n	8000842 <HAL_DMA_Init+0xea>
    switch (tmp)
 800081a:	2a03      	cmp	r2, #3
 800081c:	d8e1      	bhi.n	80007e2 <HAL_DMA_Init+0x8a>
 800081e:	a001      	add	r0, pc, #4	; (adr r0, 8000824 <HAL_DMA_Init+0xcc>)
 8000820:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000824:	0800083b 	.word	0x0800083b
 8000828:	080007df 	.word	0x080007df
 800082c:	0800083b 	.word	0x0800083b
 8000830:	08000835 	.word	0x08000835
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000834:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000838:	d1d3      	bne.n	80007e2 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800083a:	2340      	movs	r3, #64	; 0x40
 800083c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800083e:	2001      	movs	r0, #1
 8000840:	e7e5      	b.n	800080e <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000842:	2a02      	cmp	r2, #2
 8000844:	d9f9      	bls.n	800083a <HAL_DMA_Init+0xe2>
 8000846:	2a03      	cmp	r2, #3
 8000848:	e7c8      	b.n	80007dc <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 800084a:	2001      	movs	r0, #1
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	bf00      	nop
 8000850:	f010803f 	.word	0xf010803f

08000854 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000854:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000858:	2b02      	cmp	r3, #2
 800085a:	d003      	beq.n	8000864 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800085c:	2380      	movs	r3, #128	; 0x80
 800085e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000860:	2001      	movs	r0, #1
 8000862:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8000864:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000866:	2305      	movs	r3, #5
 8000868:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800086c:	6813      	ldr	r3, [r2, #0]
 800086e:	f023 0301 	bic.w	r3, r3, #1
 8000872:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8000874:	2000      	movs	r0, #0
}
 8000876:	4770      	bx	lr

08000878 <HAL_DMA_IRQHandler>:
{
 8000878:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 800087a:	2300      	movs	r3, #0
 800087c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800087e:	4b5a      	ldr	r3, [pc, #360]	; (80009e8 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000880:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8000882:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000884:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000886:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000888:	2208      	movs	r2, #8
 800088a:	409a      	lsls	r2, r3
 800088c:	4216      	tst	r6, r2
{
 800088e:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000890:	d00c      	beq.n	80008ac <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000892:	6801      	ldr	r1, [r0, #0]
 8000894:	6808      	ldr	r0, [r1, #0]
 8000896:	0740      	lsls	r0, r0, #29
 8000898:	d508      	bpl.n	80008ac <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800089a:	6808      	ldr	r0, [r1, #0]
 800089c:	f020 0004 	bic.w	r0, r0, #4
 80008a0:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80008a2:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80008a4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80008a6:	f042 0201 	orr.w	r2, r2, #1
 80008aa:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80008ac:	2201      	movs	r2, #1
 80008ae:	409a      	lsls	r2, r3
 80008b0:	4216      	tst	r6, r2
 80008b2:	d008      	beq.n	80008c6 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80008b4:	6821      	ldr	r1, [r4, #0]
 80008b6:	6949      	ldr	r1, [r1, #20]
 80008b8:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80008ba:	bf41      	itttt	mi
 80008bc:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80008be:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80008c0:	f042 0202 	orrmi.w	r2, r2, #2
 80008c4:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80008c6:	2204      	movs	r2, #4
 80008c8:	409a      	lsls	r2, r3
 80008ca:	4216      	tst	r6, r2
 80008cc:	d008      	beq.n	80008e0 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80008ce:	6821      	ldr	r1, [r4, #0]
 80008d0:	6809      	ldr	r1, [r1, #0]
 80008d2:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80008d4:	bf41      	itttt	mi
 80008d6:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80008d8:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80008da:	f042 0204 	orrmi.w	r2, r2, #4
 80008de:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80008e0:	2210      	movs	r2, #16
 80008e2:	409a      	lsls	r2, r3
 80008e4:	4216      	tst	r6, r2
 80008e6:	d010      	beq.n	800090a <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80008e8:	6823      	ldr	r3, [r4, #0]
 80008ea:	6819      	ldr	r1, [r3, #0]
 80008ec:	0709      	lsls	r1, r1, #28
 80008ee:	d50c      	bpl.n	800090a <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80008f0:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	0350      	lsls	r0, r2, #13
 80008f6:	d535      	bpl.n	8000964 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	0319      	lsls	r1, r3, #12
 80008fc:	d401      	bmi.n	8000902 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80008fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000900:	e000      	b.n	8000904 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000902:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000904:	b10b      	cbz	r3, 800090a <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000906:	4620      	mov	r0, r4
 8000908:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800090a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800090c:	2220      	movs	r2, #32
 800090e:	408a      	lsls	r2, r1
 8000910:	4216      	tst	r6, r2
 8000912:	d038      	beq.n	8000986 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000914:	6823      	ldr	r3, [r4, #0]
 8000916:	6818      	ldr	r0, [r3, #0]
 8000918:	06c6      	lsls	r6, r0, #27
 800091a:	d534      	bpl.n	8000986 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800091c:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800091e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000922:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000924:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000926:	d125      	bne.n	8000974 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000928:	f022 0216 	bic.w	r2, r2, #22
 800092c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800092e:	695a      	ldr	r2, [r3, #20]
 8000930:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000934:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000936:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000938:	b90a      	cbnz	r2, 800093e <HAL_DMA_IRQHandler+0xc6>
 800093a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800093c:	b11a      	cbz	r2, 8000946 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	f022 0208 	bic.w	r2, r2, #8
 8000944:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000946:	233f      	movs	r3, #63	; 0x3f
 8000948:	408b      	lsls	r3, r1
 800094a:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 800094c:	2300      	movs	r3, #0
 800094e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000952:	2301      	movs	r3, #1
 8000954:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000958:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800095a:	b10b      	cbz	r3, 8000960 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 800095c:	4620      	mov	r0, r4
 800095e:	4798      	blx	r3
}
 8000960:	b003      	add	sp, #12
 8000962:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000968:	bf5e      	ittt	pl
 800096a:	681a      	ldrpl	r2, [r3, #0]
 800096c:	f022 0208 	bicpl.w	r2, r2, #8
 8000970:	601a      	strpl	r2, [r3, #0]
 8000972:	e7c4      	b.n	80008fe <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000974:	0350      	lsls	r0, r2, #13
 8000976:	d528      	bpl.n	80009ca <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	0319      	lsls	r1, r3, #12
 800097c:	d432      	bmi.n	80009e4 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 800097e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000980:	b10b      	cbz	r3, 8000986 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8000982:	4620      	mov	r0, r4
 8000984:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000986:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000988:	2b00      	cmp	r3, #0
 800098a:	d0e9      	beq.n	8000960 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800098c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800098e:	07da      	lsls	r2, r3, #31
 8000990:	d519      	bpl.n	80009c6 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000992:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000994:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000996:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800099a:	6813      	ldr	r3, [r2, #0]
 800099c:	f023 0301 	bic.w	r3, r3, #1
 80009a0:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80009a2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80009a6:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 80009aa:	9b01      	ldr	r3, [sp, #4]
 80009ac:	3301      	adds	r3, #1
 80009ae:	429f      	cmp	r7, r3
 80009b0:	9301      	str	r3, [sp, #4]
 80009b2:	d302      	bcc.n	80009ba <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80009b4:	6813      	ldr	r3, [r2, #0]
 80009b6:	07db      	lsls	r3, r3, #31
 80009b8:	d4f7      	bmi.n	80009aa <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 80009ba:	2300      	movs	r3, #0
 80009bc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80009c0:	2301      	movs	r3, #1
 80009c2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80009c6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80009c8:	e7c7      	b.n	800095a <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80009d0:	d108      	bne.n	80009e4 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80009d2:	6819      	ldr	r1, [r3, #0]
 80009d4:	f021 0110 	bic.w	r1, r1, #16
 80009d8:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80009da:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80009dc:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80009e0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80009e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80009e6:	e7cb      	b.n	8000980 <HAL_DMA_IRQHandler+0x108>
 80009e8:	2000000c 	.word	0x2000000c

080009ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009f0:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009f2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f4:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8000b94 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009f8:	4a64      	ldr	r2, [pc, #400]	; (8000b8c <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009fa:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 80009fc:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a00:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a02:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000a04:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a08:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8000a0c:	42b7      	cmp	r7, r6
 8000a0e:	f040 80ad 	bne.w	8000b6c <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a12:	684c      	ldr	r4, [r1, #4]
 8000a14:	f024 0a10 	bic.w	sl, r4, #16
 8000a18:	f1ba 0f02 	cmp.w	sl, #2
 8000a1c:	d116      	bne.n	8000a4c <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 8000a1e:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000a22:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a26:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000a2a:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a2e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000a32:	f04f 0e0f 	mov.w	lr, #15
 8000a36:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000a3a:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a3e:	690d      	ldr	r5, [r1, #16]
 8000a40:	fa05 f50b 	lsl.w	r5, r5, fp
 8000a44:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000a48:	f8cc 5020 	str.w	r5, [ip, #32]
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a50:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000a52:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a56:	fa05 f50c 	lsl.w	r5, r5, ip
 8000a5a:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a5c:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a60:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a64:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a68:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a6c:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a70:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a74:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 8000a76:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a7a:	d815      	bhi.n	8000aa8 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 8000a7c:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a80:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a84:	68cd      	ldr	r5, [r1, #12]
 8000a86:	fa05 fa0c 	lsl.w	sl, r5, ip
 8000a8a:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 8000a8e:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8000a92:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a96:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a9a:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 8000a9e:	fa0e fe03 	lsl.w	lr, lr, r3
 8000aa2:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8000aa6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000aa8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000aaa:	9d00      	ldr	r5, [sp, #0]
 8000aac:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000aae:	688f      	ldr	r7, [r1, #8]
 8000ab0:	fa07 f70c 	lsl.w	r7, r7, ip
 8000ab4:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000ab6:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ab8:	00e5      	lsls	r5, r4, #3
 8000aba:	d557      	bpl.n	8000b6c <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abc:	f04f 0b00 	mov.w	fp, #0
 8000ac0:	f8cd b00c 	str.w	fp, [sp, #12]
 8000ac4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ac8:	4d31      	ldr	r5, [pc, #196]	; (8000b90 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aca:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000ace:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000ad2:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000ad6:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000ada:	9703      	str	r7, [sp, #12]
 8000adc:	9f03      	ldr	r7, [sp, #12]
 8000ade:	f023 0703 	bic.w	r7, r3, #3
 8000ae2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000ae6:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000aea:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000aee:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000af2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000af6:	f04f 0e0f 	mov.w	lr, #15
 8000afa:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000afe:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b00:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b04:	d039      	beq.n	8000b7a <HAL_GPIO_Init+0x18e>
 8000b06:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b0a:	42a8      	cmp	r0, r5
 8000b0c:	d037      	beq.n	8000b7e <HAL_GPIO_Init+0x192>
 8000b0e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b12:	42a8      	cmp	r0, r5
 8000b14:	d035      	beq.n	8000b82 <HAL_GPIO_Init+0x196>
 8000b16:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b1a:	42a8      	cmp	r0, r5
 8000b1c:	d033      	beq.n	8000b86 <HAL_GPIO_Init+0x19a>
 8000b1e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b22:	42a8      	cmp	r0, r5
 8000b24:	bf14      	ite	ne
 8000b26:	2507      	movne	r5, #7
 8000b28:	2504      	moveq	r5, #4
 8000b2a:	fa05 f50c 	lsl.w	r5, r5, ip
 8000b2e:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b32:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000b34:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000b36:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b38:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000b3c:	bf0c      	ite	eq
 8000b3e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000b40:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000b42:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000b44:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b46:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000b4a:	bf0c      	ite	eq
 8000b4c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000b4e:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000b50:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b52:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b54:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000b58:	bf0c      	ite	eq
 8000b5a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000b5c:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000b5e:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000b60:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b62:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000b64:	bf54      	ite	pl
 8000b66:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000b68:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000b6a:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	2b10      	cmp	r3, #16
 8000b70:	f47f af47 	bne.w	8000a02 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000b74:	b005      	add	sp, #20
 8000b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b7a:	465d      	mov	r5, fp
 8000b7c:	e7d5      	b.n	8000b2a <HAL_GPIO_Init+0x13e>
 8000b7e:	2501      	movs	r5, #1
 8000b80:	e7d3      	b.n	8000b2a <HAL_GPIO_Init+0x13e>
 8000b82:	2502      	movs	r5, #2
 8000b84:	e7d1      	b.n	8000b2a <HAL_GPIO_Init+0x13e>
 8000b86:	2503      	movs	r5, #3
 8000b88:	e7cf      	b.n	8000b2a <HAL_GPIO_Init+0x13e>
 8000b8a:	bf00      	nop
 8000b8c:	40013c00 	.word	0x40013c00
 8000b90:	40020000 	.word	0x40020000
 8000b94:	40023800 	.word	0x40023800

08000b98 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b98:	b10a      	cbz	r2, 8000b9e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b9a:	6181      	str	r1, [r0, #24]
 8000b9c:	4770      	bx	lr
 8000b9e:	0409      	lsls	r1, r1, #16
 8000ba0:	e7fb      	b.n	8000b9a <HAL_GPIO_WritePin+0x2>
	...

08000ba4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ba4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ba8:	4604      	mov	r4, r0
 8000baa:	b918      	cbnz	r0, 8000bb4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000bac:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000bae:	b002      	add	sp, #8
 8000bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bb4:	6803      	ldr	r3, [r0, #0]
 8000bb6:	07dd      	lsls	r5, r3, #31
 8000bb8:	d410      	bmi.n	8000bdc <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bba:	6823      	ldr	r3, [r4, #0]
 8000bbc:	0798      	lsls	r0, r3, #30
 8000bbe:	d458      	bmi.n	8000c72 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bc0:	6823      	ldr	r3, [r4, #0]
 8000bc2:	071a      	lsls	r2, r3, #28
 8000bc4:	f100 809a 	bmi.w	8000cfc <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000bc8:	6823      	ldr	r3, [r4, #0]
 8000bca:	075b      	lsls	r3, r3, #29
 8000bcc:	f100 80b8 	bmi.w	8000d40 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000bd0:	69a2      	ldr	r2, [r4, #24]
 8000bd2:	2a00      	cmp	r2, #0
 8000bd4:	f040 8119 	bne.w	8000e0a <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000bd8:	2000      	movs	r0, #0
 8000bda:	e7e8      	b.n	8000bae <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bdc:	4ba6      	ldr	r3, [pc, #664]	; (8000e78 <HAL_RCC_OscConfig+0x2d4>)
 8000bde:	689a      	ldr	r2, [r3, #8]
 8000be0:	f002 020c 	and.w	r2, r2, #12
 8000be4:	2a04      	cmp	r2, #4
 8000be6:	d007      	beq.n	8000bf8 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000be8:	689a      	ldr	r2, [r3, #8]
 8000bea:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bee:	2a08      	cmp	r2, #8
 8000bf0:	d10a      	bne.n	8000c08 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	0259      	lsls	r1, r3, #9
 8000bf6:	d507      	bpl.n	8000c08 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bf8:	4b9f      	ldr	r3, [pc, #636]	; (8000e78 <HAL_RCC_OscConfig+0x2d4>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	039a      	lsls	r2, r3, #14
 8000bfe:	d5dc      	bpl.n	8000bba <HAL_RCC_OscConfig+0x16>
 8000c00:	6863      	ldr	r3, [r4, #4]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d1d9      	bne.n	8000bba <HAL_RCC_OscConfig+0x16>
 8000c06:	e7d1      	b.n	8000bac <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c08:	6863      	ldr	r3, [r4, #4]
 8000c0a:	4d9b      	ldr	r5, [pc, #620]	; (8000e78 <HAL_RCC_OscConfig+0x2d4>)
 8000c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c10:	d111      	bne.n	8000c36 <HAL_RCC_OscConfig+0x92>
 8000c12:	682b      	ldr	r3, [r5, #0]
 8000c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c18:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000c1a:	f7ff fd03 	bl	8000624 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c1e:	4d96      	ldr	r5, [pc, #600]	; (8000e78 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000c20:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c22:	682b      	ldr	r3, [r5, #0]
 8000c24:	039b      	lsls	r3, r3, #14
 8000c26:	d4c8      	bmi.n	8000bba <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c28:	f7ff fcfc 	bl	8000624 <HAL_GetTick>
 8000c2c:	1b80      	subs	r0, r0, r6
 8000c2e:	2864      	cmp	r0, #100	; 0x64
 8000c30:	d9f7      	bls.n	8000c22 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000c32:	2003      	movs	r0, #3
 8000c34:	e7bb      	b.n	8000bae <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c3a:	d104      	bne.n	8000c46 <HAL_RCC_OscConfig+0xa2>
 8000c3c:	682b      	ldr	r3, [r5, #0]
 8000c3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c42:	602b      	str	r3, [r5, #0]
 8000c44:	e7e5      	b.n	8000c12 <HAL_RCC_OscConfig+0x6e>
 8000c46:	682a      	ldr	r2, [r5, #0]
 8000c48:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000c4c:	602a      	str	r2, [r5, #0]
 8000c4e:	682a      	ldr	r2, [r5, #0]
 8000c50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c54:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d1df      	bne.n	8000c1a <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8000c5a:	f7ff fce3 	bl	8000624 <HAL_GetTick>
 8000c5e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c60:	682b      	ldr	r3, [r5, #0]
 8000c62:	039f      	lsls	r7, r3, #14
 8000c64:	d5a9      	bpl.n	8000bba <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c66:	f7ff fcdd 	bl	8000624 <HAL_GetTick>
 8000c6a:	1b80      	subs	r0, r0, r6
 8000c6c:	2864      	cmp	r0, #100	; 0x64
 8000c6e:	d9f7      	bls.n	8000c60 <HAL_RCC_OscConfig+0xbc>
 8000c70:	e7df      	b.n	8000c32 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c72:	4b81      	ldr	r3, [pc, #516]	; (8000e78 <HAL_RCC_OscConfig+0x2d4>)
 8000c74:	689a      	ldr	r2, [r3, #8]
 8000c76:	f012 0f0c 	tst.w	r2, #12
 8000c7a:	d007      	beq.n	8000c8c <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c7c:	689a      	ldr	r2, [r3, #8]
 8000c7e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c82:	2a08      	cmp	r2, #8
 8000c84:	d111      	bne.n	8000caa <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	025e      	lsls	r6, r3, #9
 8000c8a:	d40e      	bmi.n	8000caa <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c8c:	4b7a      	ldr	r3, [pc, #488]	; (8000e78 <HAL_RCC_OscConfig+0x2d4>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	0795      	lsls	r5, r2, #30
 8000c92:	d502      	bpl.n	8000c9a <HAL_RCC_OscConfig+0xf6>
 8000c94:	68e2      	ldr	r2, [r4, #12]
 8000c96:	2a01      	cmp	r2, #1
 8000c98:	d188      	bne.n	8000bac <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	6921      	ldr	r1, [r4, #16]
 8000c9e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000ca2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000ca6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ca8:	e78a      	b.n	8000bc0 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000caa:	68e2      	ldr	r2, [r4, #12]
 8000cac:	4b73      	ldr	r3, [pc, #460]	; (8000e7c <HAL_RCC_OscConfig+0x2d8>)
 8000cae:	b1b2      	cbz	r2, 8000cde <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000cb4:	f7ff fcb6 	bl	8000624 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb8:	4d6f      	ldr	r5, [pc, #444]	; (8000e78 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000cba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cbc:	682b      	ldr	r3, [r5, #0]
 8000cbe:	0798      	lsls	r0, r3, #30
 8000cc0:	d507      	bpl.n	8000cd2 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cc2:	682b      	ldr	r3, [r5, #0]
 8000cc4:	6922      	ldr	r2, [r4, #16]
 8000cc6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000cca:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000cce:	602b      	str	r3, [r5, #0]
 8000cd0:	e776      	b.n	8000bc0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cd2:	f7ff fca7 	bl	8000624 <HAL_GetTick>
 8000cd6:	1b80      	subs	r0, r0, r6
 8000cd8:	2802      	cmp	r0, #2
 8000cda:	d9ef      	bls.n	8000cbc <HAL_RCC_OscConfig+0x118>
 8000cdc:	e7a9      	b.n	8000c32 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000cde:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ce0:	f7ff fca0 	bl	8000624 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ce4:	4d64      	ldr	r5, [pc, #400]	; (8000e78 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000ce6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ce8:	682b      	ldr	r3, [r5, #0]
 8000cea:	0799      	lsls	r1, r3, #30
 8000cec:	f57f af68 	bpl.w	8000bc0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cf0:	f7ff fc98 	bl	8000624 <HAL_GetTick>
 8000cf4:	1b80      	subs	r0, r0, r6
 8000cf6:	2802      	cmp	r0, #2
 8000cf8:	d9f6      	bls.n	8000ce8 <HAL_RCC_OscConfig+0x144>
 8000cfa:	e79a      	b.n	8000c32 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000cfc:	6962      	ldr	r2, [r4, #20]
 8000cfe:	4b60      	ldr	r3, [pc, #384]	; (8000e80 <HAL_RCC_OscConfig+0x2dc>)
 8000d00:	b17a      	cbz	r2, 8000d22 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000d02:	2201      	movs	r2, #1
 8000d04:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000d06:	f7ff fc8d 	bl	8000624 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d0a:	4d5b      	ldr	r5, [pc, #364]	; (8000e78 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000d0c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d0e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000d10:	079f      	lsls	r7, r3, #30
 8000d12:	f53f af59 	bmi.w	8000bc8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d16:	f7ff fc85 	bl	8000624 <HAL_GetTick>
 8000d1a:	1b80      	subs	r0, r0, r6
 8000d1c:	2802      	cmp	r0, #2
 8000d1e:	d9f6      	bls.n	8000d0e <HAL_RCC_OscConfig+0x16a>
 8000d20:	e787      	b.n	8000c32 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000d22:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000d24:	f7ff fc7e 	bl	8000624 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d28:	4d53      	ldr	r5, [pc, #332]	; (8000e78 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000d2a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d2c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000d2e:	0798      	lsls	r0, r3, #30
 8000d30:	f57f af4a 	bpl.w	8000bc8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d34:	f7ff fc76 	bl	8000624 <HAL_GetTick>
 8000d38:	1b80      	subs	r0, r0, r6
 8000d3a:	2802      	cmp	r0, #2
 8000d3c:	d9f6      	bls.n	8000d2c <HAL_RCC_OscConfig+0x188>
 8000d3e:	e778      	b.n	8000c32 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d40:	4b4d      	ldr	r3, [pc, #308]	; (8000e78 <HAL_RCC_OscConfig+0x2d4>)
 8000d42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d44:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000d48:	d128      	bne.n	8000d9c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d4a:	9201      	str	r2, [sp, #4]
 8000d4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d4e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d52:	641a      	str	r2, [r3, #64]	; 0x40
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	9301      	str	r3, [sp, #4]
 8000d5c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000d5e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d60:	4d48      	ldr	r5, [pc, #288]	; (8000e84 <HAL_RCC_OscConfig+0x2e0>)
 8000d62:	682b      	ldr	r3, [r5, #0]
 8000d64:	05d9      	lsls	r1, r3, #23
 8000d66:	d51b      	bpl.n	8000da0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d68:	68a3      	ldr	r3, [r4, #8]
 8000d6a:	4d43      	ldr	r5, [pc, #268]	; (8000e78 <HAL_RCC_OscConfig+0x2d4>)
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d127      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x21c>
 8000d70:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000d78:	f7ff fc54 	bl	8000624 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d7c:	4d3e      	ldr	r5, [pc, #248]	; (8000e78 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000d7e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d80:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d84:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d86:	079b      	lsls	r3, r3, #30
 8000d88:	d539      	bpl.n	8000dfe <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000d8a:	2e00      	cmp	r6, #0
 8000d8c:	f43f af20 	beq.w	8000bd0 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d90:	4a39      	ldr	r2, [pc, #228]	; (8000e78 <HAL_RCC_OscConfig+0x2d4>)
 8000d92:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000d94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d98:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9a:	e719      	b.n	8000bd0 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	e7df      	b.n	8000d60 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000da0:	682b      	ldr	r3, [r5, #0]
 8000da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000da8:	f7ff fc3c 	bl	8000624 <HAL_GetTick>
 8000dac:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dae:	682b      	ldr	r3, [r5, #0]
 8000db0:	05da      	lsls	r2, r3, #23
 8000db2:	d4d9      	bmi.n	8000d68 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000db4:	f7ff fc36 	bl	8000624 <HAL_GetTick>
 8000db8:	1bc0      	subs	r0, r0, r7
 8000dba:	2802      	cmp	r0, #2
 8000dbc:	d9f7      	bls.n	8000dae <HAL_RCC_OscConfig+0x20a>
 8000dbe:	e738      	b.n	8000c32 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dc0:	2b05      	cmp	r3, #5
 8000dc2:	d104      	bne.n	8000dce <HAL_RCC_OscConfig+0x22a>
 8000dc4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000dc6:	f043 0304 	orr.w	r3, r3, #4
 8000dca:	672b      	str	r3, [r5, #112]	; 0x70
 8000dcc:	e7d0      	b.n	8000d70 <HAL_RCC_OscConfig+0x1cc>
 8000dce:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000dd0:	f022 0201 	bic.w	r2, r2, #1
 8000dd4:	672a      	str	r2, [r5, #112]	; 0x70
 8000dd6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000dd8:	f022 0204 	bic.w	r2, r2, #4
 8000ddc:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d1ca      	bne.n	8000d78 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000de2:	f7ff fc1f 	bl	8000624 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000de6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000dea:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000dee:	0798      	lsls	r0, r3, #30
 8000df0:	d5cb      	bpl.n	8000d8a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000df2:	f7ff fc17 	bl	8000624 <HAL_GetTick>
 8000df6:	1bc0      	subs	r0, r0, r7
 8000df8:	4540      	cmp	r0, r8
 8000dfa:	d9f7      	bls.n	8000dec <HAL_RCC_OscConfig+0x248>
 8000dfc:	e719      	b.n	8000c32 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dfe:	f7ff fc11 	bl	8000624 <HAL_GetTick>
 8000e02:	1bc0      	subs	r0, r0, r7
 8000e04:	4540      	cmp	r0, r8
 8000e06:	d9bd      	bls.n	8000d84 <HAL_RCC_OscConfig+0x1e0>
 8000e08:	e713      	b.n	8000c32 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e0a:	4d1b      	ldr	r5, [pc, #108]	; (8000e78 <HAL_RCC_OscConfig+0x2d4>)
 8000e0c:	68ab      	ldr	r3, [r5, #8]
 8000e0e:	f003 030c 	and.w	r3, r3, #12
 8000e12:	2b08      	cmp	r3, #8
 8000e14:	f43f aeca 	beq.w	8000bac <HAL_RCC_OscConfig+0x8>
 8000e18:	4e1b      	ldr	r6, [pc, #108]	; (8000e88 <HAL_RCC_OscConfig+0x2e4>)
 8000e1a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e1c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000e1e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e20:	d134      	bne.n	8000e8c <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000e22:	f7ff fbff 	bl	8000624 <HAL_GetTick>
 8000e26:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e28:	682b      	ldr	r3, [r5, #0]
 8000e2a:	0199      	lsls	r1, r3, #6
 8000e2c:	d41e      	bmi.n	8000e6c <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000e2e:	6a22      	ldr	r2, [r4, #32]
 8000e30:	69e3      	ldr	r3, [r4, #28]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e36:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000e3a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000e3c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000e40:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e42:	4c0d      	ldr	r4, [pc, #52]	; (8000e78 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000e44:	0852      	lsrs	r2, r2, #1
 8000e46:	3a01      	subs	r2, #1
 8000e48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000e4e:	2301      	movs	r3, #1
 8000e50:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000e52:	f7ff fbe7 	bl	8000624 <HAL_GetTick>
 8000e56:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e58:	6823      	ldr	r3, [r4, #0]
 8000e5a:	019a      	lsls	r2, r3, #6
 8000e5c:	f53f aebc 	bmi.w	8000bd8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e60:	f7ff fbe0 	bl	8000624 <HAL_GetTick>
 8000e64:	1b40      	subs	r0, r0, r5
 8000e66:	2802      	cmp	r0, #2
 8000e68:	d9f6      	bls.n	8000e58 <HAL_RCC_OscConfig+0x2b4>
 8000e6a:	e6e2      	b.n	8000c32 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e6c:	f7ff fbda 	bl	8000624 <HAL_GetTick>
 8000e70:	1bc0      	subs	r0, r0, r7
 8000e72:	2802      	cmp	r0, #2
 8000e74:	d9d8      	bls.n	8000e28 <HAL_RCC_OscConfig+0x284>
 8000e76:	e6dc      	b.n	8000c32 <HAL_RCC_OscConfig+0x8e>
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	42470000 	.word	0x42470000
 8000e80:	42470e80 	.word	0x42470e80
 8000e84:	40007000 	.word	0x40007000
 8000e88:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000e8c:	f7ff fbca 	bl	8000624 <HAL_GetTick>
 8000e90:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e92:	682b      	ldr	r3, [r5, #0]
 8000e94:	019b      	lsls	r3, r3, #6
 8000e96:	f57f ae9f 	bpl.w	8000bd8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e9a:	f7ff fbc3 	bl	8000624 <HAL_GetTick>
 8000e9e:	1b00      	subs	r0, r0, r4
 8000ea0:	2802      	cmp	r0, #2
 8000ea2:	d9f6      	bls.n	8000e92 <HAL_RCC_OscConfig+0x2ee>
 8000ea4:	e6c5      	b.n	8000c32 <HAL_RCC_OscConfig+0x8e>
 8000ea6:	bf00      	nop

08000ea8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ea8:	4913      	ldr	r1, [pc, #76]	; (8000ef8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000eaa:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000eac:	688b      	ldr	r3, [r1, #8]
 8000eae:	f003 030c 	and.w	r3, r3, #12
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	d003      	beq.n	8000ebe <HAL_RCC_GetSysClockFreq+0x16>
 8000eb6:	2b08      	cmp	r3, #8
 8000eb8:	d003      	beq.n	8000ec2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000eba:	4810      	ldr	r0, [pc, #64]	; (8000efc <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000ebc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000ebe:	4810      	ldr	r0, [pc, #64]	; (8000f00 <HAL_RCC_GetSysClockFreq+0x58>)
 8000ec0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ec2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ec4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ec6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ec8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ecc:	bf14      	ite	ne
 8000ece:	480c      	ldrne	r0, [pc, #48]	; (8000f00 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ed0:	480a      	ldreq	r0, [pc, #40]	; (8000efc <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ed2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000ed6:	bf18      	it	ne
 8000ed8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000eda:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ede:	fba1 0100 	umull	r0, r1, r1, r0
 8000ee2:	f7ff f9cd 	bl	8000280 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000ee6:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <HAL_RCC_GetSysClockFreq+0x50>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000eee:	3301      	adds	r3, #1
 8000ef0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000ef2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ef6:	bd08      	pop	{r3, pc}
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	00f42400 	.word	0x00f42400
 8000f00:	007a1200 	.word	0x007a1200

08000f04 <HAL_RCC_ClockConfig>:
{
 8000f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f08:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000f0a:	4604      	mov	r4, r0
 8000f0c:	b910      	cbnz	r0, 8000f14 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000f0e:	2001      	movs	r0, #1
 8000f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f14:	4b44      	ldr	r3, [pc, #272]	; (8001028 <HAL_RCC_ClockConfig+0x124>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	f002 020f 	and.w	r2, r2, #15
 8000f1c:	428a      	cmp	r2, r1
 8000f1e:	d328      	bcc.n	8000f72 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f20:	6821      	ldr	r1, [r4, #0]
 8000f22:	078f      	lsls	r7, r1, #30
 8000f24:	d42d      	bmi.n	8000f82 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f26:	07c8      	lsls	r0, r1, #31
 8000f28:	d440      	bmi.n	8000fac <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000f2a:	4b3f      	ldr	r3, [pc, #252]	; (8001028 <HAL_RCC_ClockConfig+0x124>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	f002 020f 	and.w	r2, r2, #15
 8000f32:	4295      	cmp	r5, r2
 8000f34:	d366      	bcc.n	8001004 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f36:	6822      	ldr	r2, [r4, #0]
 8000f38:	0751      	lsls	r1, r2, #29
 8000f3a:	d46c      	bmi.n	8001016 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f3c:	0713      	lsls	r3, r2, #28
 8000f3e:	d507      	bpl.n	8000f50 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000f40:	4a3a      	ldr	r2, [pc, #232]	; (800102c <HAL_RCC_ClockConfig+0x128>)
 8000f42:	6921      	ldr	r1, [r4, #16]
 8000f44:	6893      	ldr	r3, [r2, #8]
 8000f46:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000f4a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f4e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000f50:	f7ff ffaa 	bl	8000ea8 <HAL_RCC_GetSysClockFreq>
 8000f54:	4b35      	ldr	r3, [pc, #212]	; (800102c <HAL_RCC_ClockConfig+0x128>)
 8000f56:	4a36      	ldr	r2, [pc, #216]	; (8001030 <HAL_RCC_ClockConfig+0x12c>)
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000f5e:	5cd3      	ldrb	r3, [r2, r3]
 8000f60:	40d8      	lsrs	r0, r3
 8000f62:	4b34      	ldr	r3, [pc, #208]	; (8001034 <HAL_RCC_ClockConfig+0x130>)
 8000f64:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f7ff fb12 	bl	8000590 <HAL_InitTick>
  return HAL_OK;
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f72:	b2ca      	uxtb	r2, r1
 8000f74:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 030f 	and.w	r3, r3, #15
 8000f7c:	4299      	cmp	r1, r3
 8000f7e:	d1c6      	bne.n	8000f0e <HAL_RCC_ClockConfig+0xa>
 8000f80:	e7ce      	b.n	8000f20 <HAL_RCC_ClockConfig+0x1c>
 8000f82:	4b2a      	ldr	r3, [pc, #168]	; (800102c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f84:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f88:	bf1e      	ittt	ne
 8000f8a:	689a      	ldrne	r2, [r3, #8]
 8000f8c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000f90:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f92:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f94:	bf42      	ittt	mi
 8000f96:	689a      	ldrmi	r2, [r3, #8]
 8000f98:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000f9c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	68a0      	ldr	r0, [r4, #8]
 8000fa2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000fa6:	4302      	orrs	r2, r0
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	e7bc      	b.n	8000f26 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fac:	6862      	ldr	r2, [r4, #4]
 8000fae:	4b1f      	ldr	r3, [pc, #124]	; (800102c <HAL_RCC_ClockConfig+0x128>)
 8000fb0:	2a01      	cmp	r2, #1
 8000fb2:	d11d      	bne.n	8000ff0 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fba:	d0a8      	beq.n	8000f0e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fbc:	4e1b      	ldr	r6, [pc, #108]	; (800102c <HAL_RCC_ClockConfig+0x128>)
 8000fbe:	68b3      	ldr	r3, [r6, #8]
 8000fc0:	f023 0303 	bic.w	r3, r3, #3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000fc8:	f7ff fb2c 	bl	8000624 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fcc:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000fd0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fd2:	68b3      	ldr	r3, [r6, #8]
 8000fd4:	6862      	ldr	r2, [r4, #4]
 8000fd6:	f003 030c 	and.w	r3, r3, #12
 8000fda:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000fde:	d0a4      	beq.n	8000f2a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fe0:	f7ff fb20 	bl	8000624 <HAL_GetTick>
 8000fe4:	1bc0      	subs	r0, r0, r7
 8000fe6:	4540      	cmp	r0, r8
 8000fe8:	d9f3      	bls.n	8000fd2 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000fea:	2003      	movs	r0, #3
}
 8000fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ff0:	1e91      	subs	r1, r2, #2
 8000ff2:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ff4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ff6:	d802      	bhi.n	8000ffe <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ff8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000ffc:	e7dd      	b.n	8000fba <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ffe:	f013 0f02 	tst.w	r3, #2
 8001002:	e7da      	b.n	8000fba <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001004:	b2ea      	uxtb	r2, r5
 8001006:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 030f 	and.w	r3, r3, #15
 800100e:	429d      	cmp	r5, r3
 8001010:	f47f af7d 	bne.w	8000f0e <HAL_RCC_ClockConfig+0xa>
 8001014:	e78f      	b.n	8000f36 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001016:	4905      	ldr	r1, [pc, #20]	; (800102c <HAL_RCC_ClockConfig+0x128>)
 8001018:	68e0      	ldr	r0, [r4, #12]
 800101a:	688b      	ldr	r3, [r1, #8]
 800101c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001020:	4303      	orrs	r3, r0
 8001022:	608b      	str	r3, [r1, #8]
 8001024:	e78a      	b.n	8000f3c <HAL_RCC_ClockConfig+0x38>
 8001026:	bf00      	nop
 8001028:	40023c00 	.word	0x40023c00
 800102c:	40023800 	.word	0x40023800
 8001030:	0800299a 	.word	0x0800299a
 8001034:	2000000c 	.word	0x2000000c

08001038 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001038:	4b04      	ldr	r3, [pc, #16]	; (800104c <HAL_RCC_GetPCLK1Freq+0x14>)
 800103a:	4a05      	ldr	r2, [pc, #20]	; (8001050 <HAL_RCC_GetPCLK1Freq+0x18>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001042:	5cd3      	ldrb	r3, [r2, r3]
 8001044:	4a03      	ldr	r2, [pc, #12]	; (8001054 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001046:	6810      	ldr	r0, [r2, #0]
}
 8001048:	40d8      	lsrs	r0, r3
 800104a:	4770      	bx	lr
 800104c:	40023800 	.word	0x40023800
 8001050:	080029aa 	.word	0x080029aa
 8001054:	2000000c 	.word	0x2000000c

08001058 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <HAL_RCC_GetPCLK2Freq+0x14>)
 800105a:	4a05      	ldr	r2, [pc, #20]	; (8001070 <HAL_RCC_GetPCLK2Freq+0x18>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001062:	5cd3      	ldrb	r3, [r2, r3]
 8001064:	4a03      	ldr	r2, [pc, #12]	; (8001074 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001066:	6810      	ldr	r0, [r2, #0]
}
 8001068:	40d8      	lsrs	r0, r3
 800106a:	4770      	bx	lr
 800106c:	40023800 	.word	0x40023800
 8001070:	080029aa 	.word	0x080029aa
 8001074:	2000000c 	.word	0x2000000c

08001078 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001078:	6803      	ldr	r3, [r0, #0]
 800107a:	68da      	ldr	r2, [r3, #12]
 800107c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001080:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001082:	695a      	ldr	r2, [r3, #20]
 8001084:	f022 0201 	bic.w	r2, r2, #1
 8001088:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800108a:	2320      	movs	r3, #32
 800108c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001090:	4770      	bx	lr
	...

08001094 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001098:	6806      	ldr	r6, [r0, #0]
 800109a:	68c2      	ldr	r2, [r0, #12]
 800109c:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800109e:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80010a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010a4:	4313      	orrs	r3, r2
 80010a6:	6133      	str	r3, [r6, #16]
{
 80010a8:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80010aa:	6883      	ldr	r3, [r0, #8]
 80010ac:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80010ae:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80010b0:	4303      	orrs	r3, r0
 80010b2:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80010b4:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80010b8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80010ba:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80010be:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 80010c0:	4313      	orrs	r3, r2
 80010c2:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80010c4:	6973      	ldr	r3, [r6, #20]
 80010c6:	69a2      	ldr	r2, [r4, #24]
 80010c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010cc:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010ce:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80010d2:	6173      	str	r3, [r6, #20]
 80010d4:	4b7a      	ldr	r3, [pc, #488]	; (80012c0 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010d6:	d17c      	bne.n	80011d2 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80010d8:	429e      	cmp	r6, r3
 80010da:	d003      	beq.n	80010e4 <UART_SetConfig+0x50>
 80010dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010e0:	429e      	cmp	r6, r3
 80010e2:	d144      	bne.n	800116e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80010e4:	f7ff ffb8 	bl	8001058 <HAL_RCC_GetPCLK2Freq>
 80010e8:	2519      	movs	r5, #25
 80010ea:	fb05 f300 	mul.w	r3, r5, r0
 80010ee:	6860      	ldr	r0, [r4, #4]
 80010f0:	f04f 0964 	mov.w	r9, #100	; 0x64
 80010f4:	0040      	lsls	r0, r0, #1
 80010f6:	fbb3 f3f0 	udiv	r3, r3, r0
 80010fa:	fbb3 f3f9 	udiv	r3, r3, r9
 80010fe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001102:	f7ff ffa9 	bl	8001058 <HAL_RCC_GetPCLK2Freq>
 8001106:	6863      	ldr	r3, [r4, #4]
 8001108:	4368      	muls	r0, r5
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	fbb0 f7f3 	udiv	r7, r0, r3
 8001110:	f7ff ffa2 	bl	8001058 <HAL_RCC_GetPCLK2Freq>
 8001114:	6863      	ldr	r3, [r4, #4]
 8001116:	4368      	muls	r0, r5
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	fbb0 f3f3 	udiv	r3, r0, r3
 800111e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001122:	fb09 7313 	mls	r3, r9, r3, r7
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	3332      	adds	r3, #50	; 0x32
 800112a:	fbb3 f3f9 	udiv	r3, r3, r9
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001134:	f7ff ff90 	bl	8001058 <HAL_RCC_GetPCLK2Freq>
 8001138:	6862      	ldr	r2, [r4, #4]
 800113a:	4368      	muls	r0, r5
 800113c:	0052      	lsls	r2, r2, #1
 800113e:	fbb0 faf2 	udiv	sl, r0, r2
 8001142:	f7ff ff89 	bl	8001058 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001146:	6863      	ldr	r3, [r4, #4]
 8001148:	4368      	muls	r0, r5
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001150:	fbb3 f3f9 	udiv	r3, r3, r9
 8001154:	fb09 a313 	mls	r3, r9, r3, sl
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	3332      	adds	r3, #50	; 0x32
 800115c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001160:	f003 0307 	and.w	r3, r3, #7
 8001164:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001166:	443b      	add	r3, r7
 8001168:	60b3      	str	r3, [r6, #8]
 800116a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800116e:	f7ff ff63 	bl	8001038 <HAL_RCC_GetPCLK1Freq>
 8001172:	2519      	movs	r5, #25
 8001174:	fb05 f300 	mul.w	r3, r5, r0
 8001178:	6860      	ldr	r0, [r4, #4]
 800117a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800117e:	0040      	lsls	r0, r0, #1
 8001180:	fbb3 f3f0 	udiv	r3, r3, r0
 8001184:	fbb3 f3f9 	udiv	r3, r3, r9
 8001188:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800118c:	f7ff ff54 	bl	8001038 <HAL_RCC_GetPCLK1Freq>
 8001190:	6863      	ldr	r3, [r4, #4]
 8001192:	4368      	muls	r0, r5
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	fbb0 f7f3 	udiv	r7, r0, r3
 800119a:	f7ff ff4d 	bl	8001038 <HAL_RCC_GetPCLK1Freq>
 800119e:	6863      	ldr	r3, [r4, #4]
 80011a0:	4368      	muls	r0, r5
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80011a8:	fbb3 f3f9 	udiv	r3, r3, r9
 80011ac:	fb09 7313 	mls	r3, r9, r3, r7
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	3332      	adds	r3, #50	; 0x32
 80011b4:	fbb3 f3f9 	udiv	r3, r3, r9
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80011be:	f7ff ff3b 	bl	8001038 <HAL_RCC_GetPCLK1Freq>
 80011c2:	6862      	ldr	r2, [r4, #4]
 80011c4:	4368      	muls	r0, r5
 80011c6:	0052      	lsls	r2, r2, #1
 80011c8:	fbb0 faf2 	udiv	sl, r0, r2
 80011cc:	f7ff ff34 	bl	8001038 <HAL_RCC_GetPCLK1Freq>
 80011d0:	e7b9      	b.n	8001146 <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80011d2:	429e      	cmp	r6, r3
 80011d4:	d002      	beq.n	80011dc <UART_SetConfig+0x148>
 80011d6:	4b3b      	ldr	r3, [pc, #236]	; (80012c4 <UART_SetConfig+0x230>)
 80011d8:	429e      	cmp	r6, r3
 80011da:	d140      	bne.n	800125e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80011dc:	f7ff ff3c 	bl	8001058 <HAL_RCC_GetPCLK2Freq>
 80011e0:	6867      	ldr	r7, [r4, #4]
 80011e2:	2519      	movs	r5, #25
 80011e4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80011e8:	fb05 f300 	mul.w	r3, r5, r0
 80011ec:	00bf      	lsls	r7, r7, #2
 80011ee:	fbb3 f3f7 	udiv	r3, r3, r7
 80011f2:	fbb3 f3f9 	udiv	r3, r3, r9
 80011f6:	011f      	lsls	r7, r3, #4
 80011f8:	f7ff ff2e 	bl	8001058 <HAL_RCC_GetPCLK2Freq>
 80011fc:	6863      	ldr	r3, [r4, #4]
 80011fe:	4368      	muls	r0, r5
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	fbb0 f8f3 	udiv	r8, r0, r3
 8001206:	f7ff ff27 	bl	8001058 <HAL_RCC_GetPCLK2Freq>
 800120a:	6863      	ldr	r3, [r4, #4]
 800120c:	4368      	muls	r0, r5
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	fbb0 f3f3 	udiv	r3, r0, r3
 8001214:	fbb3 f3f9 	udiv	r3, r3, r9
 8001218:	fb09 8313 	mls	r3, r9, r3, r8
 800121c:	011b      	lsls	r3, r3, #4
 800121e:	3332      	adds	r3, #50	; 0x32
 8001220:	fbb3 f3f9 	udiv	r3, r3, r9
 8001224:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001228:	f7ff ff16 	bl	8001058 <HAL_RCC_GetPCLK2Freq>
 800122c:	6862      	ldr	r2, [r4, #4]
 800122e:	4368      	muls	r0, r5
 8001230:	0092      	lsls	r2, r2, #2
 8001232:	fbb0 faf2 	udiv	sl, r0, r2
 8001236:	f7ff ff0f 	bl	8001058 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800123a:	6863      	ldr	r3, [r4, #4]
 800123c:	4368      	muls	r0, r5
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	fbb0 f3f3 	udiv	r3, r0, r3
 8001244:	fbb3 f3f9 	udiv	r3, r3, r9
 8001248:	fb09 a313 	mls	r3, r9, r3, sl
 800124c:	011b      	lsls	r3, r3, #4
 800124e:	3332      	adds	r3, #50	; 0x32
 8001250:	fbb3 f3f9 	udiv	r3, r3, r9
 8001254:	f003 030f 	and.w	r3, r3, #15
 8001258:	ea43 0308 	orr.w	r3, r3, r8
 800125c:	e783      	b.n	8001166 <UART_SetConfig+0xd2>
 800125e:	f7ff feeb 	bl	8001038 <HAL_RCC_GetPCLK1Freq>
 8001262:	6867      	ldr	r7, [r4, #4]
 8001264:	2519      	movs	r5, #25
 8001266:	f04f 0964 	mov.w	r9, #100	; 0x64
 800126a:	fb05 f300 	mul.w	r3, r5, r0
 800126e:	00bf      	lsls	r7, r7, #2
 8001270:	fbb3 f3f7 	udiv	r3, r3, r7
 8001274:	fbb3 f3f9 	udiv	r3, r3, r9
 8001278:	011f      	lsls	r7, r3, #4
 800127a:	f7ff fedd 	bl	8001038 <HAL_RCC_GetPCLK1Freq>
 800127e:	6863      	ldr	r3, [r4, #4]
 8001280:	4368      	muls	r0, r5
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	fbb0 f8f3 	udiv	r8, r0, r3
 8001288:	f7ff fed6 	bl	8001038 <HAL_RCC_GetPCLK1Freq>
 800128c:	6863      	ldr	r3, [r4, #4]
 800128e:	4368      	muls	r0, r5
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	fbb0 f3f3 	udiv	r3, r0, r3
 8001296:	fbb3 f3f9 	udiv	r3, r3, r9
 800129a:	fb09 8313 	mls	r3, r9, r3, r8
 800129e:	011b      	lsls	r3, r3, #4
 80012a0:	3332      	adds	r3, #50	; 0x32
 80012a2:	fbb3 f3f9 	udiv	r3, r3, r9
 80012a6:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80012aa:	f7ff fec5 	bl	8001038 <HAL_RCC_GetPCLK1Freq>
 80012ae:	6862      	ldr	r2, [r4, #4]
 80012b0:	4368      	muls	r0, r5
 80012b2:	0092      	lsls	r2, r2, #2
 80012b4:	fbb0 faf2 	udiv	sl, r0, r2
 80012b8:	f7ff febe 	bl	8001038 <HAL_RCC_GetPCLK1Freq>
 80012bc:	e7bd      	b.n	800123a <UART_SetConfig+0x1a6>
 80012be:	bf00      	nop
 80012c0:	40011000 	.word	0x40011000
 80012c4:	40011400 	.word	0x40011400

080012c8 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80012c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ca:	4604      	mov	r4, r0
 80012cc:	460e      	mov	r6, r1
 80012ce:	4617      	mov	r7, r2
 80012d0:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80012d2:	6821      	ldr	r1, [r4, #0]
 80012d4:	680b      	ldr	r3, [r1, #0]
 80012d6:	ea36 0303 	bics.w	r3, r6, r3
 80012da:	d101      	bne.n	80012e0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80012dc:	2000      	movs	r0, #0
}
 80012de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80012e0:	1c6b      	adds	r3, r5, #1
 80012e2:	d0f7      	beq.n	80012d4 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80012e4:	b995      	cbnz	r5, 800130c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80012e6:	6823      	ldr	r3, [r4, #0]
 80012e8:	68da      	ldr	r2, [r3, #12]
 80012ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80012ee:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80012f0:	695a      	ldr	r2, [r3, #20]
 80012f2:	f022 0201 	bic.w	r2, r2, #1
 80012f6:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80012f8:	2320      	movs	r3, #32
 80012fa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80012fe:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001302:	2300      	movs	r3, #0
 8001304:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001308:	2003      	movs	r0, #3
 800130a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800130c:	f7ff f98a 	bl	8000624 <HAL_GetTick>
 8001310:	1bc0      	subs	r0, r0, r7
 8001312:	4285      	cmp	r5, r0
 8001314:	d2dd      	bcs.n	80012d2 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001316:	e7e6      	b.n	80012e6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001318 <HAL_UART_Init>:
{
 8001318:	b510      	push	{r4, lr}
  if (huart == NULL)
 800131a:	4604      	mov	r4, r0
 800131c:	b340      	cbz	r0, 8001370 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800131e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001322:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001326:	b91b      	cbnz	r3, 8001330 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001328:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800132c:	f000 fb36 	bl	800199c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001330:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001332:	2324      	movs	r3, #36	; 0x24
 8001334:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001338:	68d3      	ldr	r3, [r2, #12]
 800133a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800133e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001340:	4620      	mov	r0, r4
 8001342:	f7ff fea7 	bl	8001094 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001346:	6823      	ldr	r3, [r4, #0]
 8001348:	691a      	ldr	r2, [r3, #16]
 800134a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800134e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001350:	695a      	ldr	r2, [r3, #20]
 8001352:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001356:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001358:	68da      	ldr	r2, [r3, #12]
 800135a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800135e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001360:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001362:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001364:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001366:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800136a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800136e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001370:	2001      	movs	r0, #1
}
 8001372:	bd10      	pop	{r4, pc}

08001374 <HAL_UART_Transmit>:
{
 8001374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001378:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800137a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800137e:	2b20      	cmp	r3, #32
{
 8001380:	4604      	mov	r4, r0
 8001382:	460d      	mov	r5, r1
 8001384:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001386:	d14f      	bne.n	8001428 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8001388:	2900      	cmp	r1, #0
 800138a:	d04a      	beq.n	8001422 <HAL_UART_Transmit+0xae>
 800138c:	2a00      	cmp	r2, #0
 800138e:	d048      	beq.n	8001422 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001390:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001394:	2b01      	cmp	r3, #1
 8001396:	d047      	beq.n	8001428 <HAL_UART_Transmit+0xb4>
 8001398:	2301      	movs	r3, #1
 800139a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800139e:	2300      	movs	r3, #0
 80013a0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80013a2:	2321      	movs	r3, #33	; 0x21
 80013a4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80013a8:	f7ff f93c 	bl	8000624 <HAL_GetTick>
    huart->TxXferSize = Size;
 80013ac:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80013b0:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80013b2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80013b6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	b96b      	cbnz	r3, 80013d8 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80013bc:	463b      	mov	r3, r7
 80013be:	4632      	mov	r2, r6
 80013c0:	2140      	movs	r1, #64	; 0x40
 80013c2:	4620      	mov	r0, r4
 80013c4:	f7ff ff80 	bl	80012c8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80013c8:	b9b0      	cbnz	r0, 80013f8 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 80013ca:	2320      	movs	r3, #32
 80013cc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80013d0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 80013d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80013d8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80013da:	3b01      	subs	r3, #1
 80013dc:	b29b      	uxth	r3, r3
 80013de:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80013e0:	68a3      	ldr	r3, [r4, #8]
 80013e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013e6:	4632      	mov	r2, r6
 80013e8:	463b      	mov	r3, r7
 80013ea:	f04f 0180 	mov.w	r1, #128	; 0x80
 80013ee:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80013f0:	d10e      	bne.n	8001410 <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013f2:	f7ff ff69 	bl	80012c8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80013f6:	b110      	cbz	r0, 80013fe <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 80013f8:	2003      	movs	r0, #3
 80013fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80013fe:	882b      	ldrh	r3, [r5, #0]
 8001400:	6822      	ldr	r2, [r4, #0]
 8001402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001406:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001408:	6923      	ldr	r3, [r4, #16]
 800140a:	b943      	cbnz	r3, 800141e <HAL_UART_Transmit+0xaa>
          pData += 2U;
 800140c:	3502      	adds	r5, #2
 800140e:	e7d2      	b.n	80013b6 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001410:	f7ff ff5a 	bl	80012c8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001414:	2800      	cmp	r0, #0
 8001416:	d1ef      	bne.n	80013f8 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001418:	6823      	ldr	r3, [r4, #0]
 800141a:	782a      	ldrb	r2, [r5, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	3501      	adds	r5, #1
 8001420:	e7c9      	b.n	80013b6 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001422:	2001      	movs	r0, #1
 8001424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001428:	2002      	movs	r0, #2
}
 800142a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800142e <HAL_UART_TxCpltCallback>:
 800142e:	4770      	bx	lr

08001430 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001430:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001434:	2b22      	cmp	r3, #34	; 0x22
{
 8001436:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001438:	d136      	bne.n	80014a8 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800143a:	6883      	ldr	r3, [r0, #8]
 800143c:	6901      	ldr	r1, [r0, #16]
 800143e:	6802      	ldr	r2, [r0, #0]
 8001440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001444:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001446:	d123      	bne.n	8001490 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001448:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800144a:	b9e9      	cbnz	r1, 8001488 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800144c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001450:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001454:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8001456:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001458:	3c01      	subs	r4, #1
 800145a:	b2a4      	uxth	r4, r4
 800145c:	85c4      	strh	r4, [r0, #46]	; 0x2e
 800145e:	b98c      	cbnz	r4, 8001484 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001460:	6803      	ldr	r3, [r0, #0]
 8001462:	68da      	ldr	r2, [r3, #12]
 8001464:	f022 0220 	bic.w	r2, r2, #32
 8001468:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001470:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001472:	695a      	ldr	r2, [r3, #20]
 8001474:	f022 0201 	bic.w	r2, r2, #1
 8001478:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800147a:	2320      	movs	r3, #32
 800147c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001480:	f000 f9a6 	bl	80017d0 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8001484:	2000      	movs	r0, #0
}
 8001486:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	f823 2b01 	strh.w	r2, [r3], #1
 800148e:	e7e1      	b.n	8001454 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001490:	b921      	cbnz	r1, 800149c <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001492:	1c59      	adds	r1, r3, #1
 8001494:	6852      	ldr	r2, [r2, #4]
 8001496:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001498:	701a      	strb	r2, [r3, #0]
 800149a:	e7dc      	b.n	8001456 <UART_Receive_IT+0x26>
 800149c:	6852      	ldr	r2, [r2, #4]
 800149e:	1c59      	adds	r1, r3, #1
 80014a0:	6281      	str	r1, [r0, #40]	; 0x28
 80014a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80014a6:	e7f7      	b.n	8001498 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 80014a8:	2002      	movs	r0, #2
 80014aa:	bd10      	pop	{r4, pc}

080014ac <HAL_UART_ErrorCallback>:
 80014ac:	4770      	bx	lr
	...

080014b0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80014b0:	6803      	ldr	r3, [r0, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80014b4:	68d9      	ldr	r1, [r3, #12]
{
 80014b6:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80014b8:	0716      	lsls	r6, r2, #28
{
 80014ba:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80014bc:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80014be:	d107      	bne.n	80014d0 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80014c0:	0696      	lsls	r6, r2, #26
 80014c2:	d55a      	bpl.n	800157a <HAL_UART_IRQHandler+0xca>
 80014c4:	068d      	lsls	r5, r1, #26
 80014c6:	d558      	bpl.n	800157a <HAL_UART_IRQHandler+0xca>
}
 80014c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80014cc:	f7ff bfb0 	b.w	8001430 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80014d0:	f015 0501 	ands.w	r5, r5, #1
 80014d4:	d102      	bne.n	80014dc <HAL_UART_IRQHandler+0x2c>
 80014d6:	f411 7f90 	tst.w	r1, #288	; 0x120
 80014da:	d04e      	beq.n	800157a <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80014dc:	07d3      	lsls	r3, r2, #31
 80014de:	d505      	bpl.n	80014ec <HAL_UART_IRQHandler+0x3c>
 80014e0:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80014e2:	bf42      	ittt	mi
 80014e4:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80014e6:	f043 0301 	orrmi.w	r3, r3, #1
 80014ea:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80014ec:	0750      	lsls	r0, r2, #29
 80014ee:	d504      	bpl.n	80014fa <HAL_UART_IRQHandler+0x4a>
 80014f0:	b11d      	cbz	r5, 80014fa <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80014f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80014fa:	0793      	lsls	r3, r2, #30
 80014fc:	d504      	bpl.n	8001508 <HAL_UART_IRQHandler+0x58>
 80014fe:	b11d      	cbz	r5, 8001508 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001500:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001502:	f043 0304 	orr.w	r3, r3, #4
 8001506:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001508:	0716      	lsls	r6, r2, #28
 800150a:	d504      	bpl.n	8001516 <HAL_UART_IRQHandler+0x66>
 800150c:	b11d      	cbz	r5, 8001516 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800150e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001510:	f043 0308 	orr.w	r3, r3, #8
 8001514:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001516:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001518:	2b00      	cmp	r3, #0
 800151a:	d066      	beq.n	80015ea <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800151c:	0695      	lsls	r5, r2, #26
 800151e:	d504      	bpl.n	800152a <HAL_UART_IRQHandler+0x7a>
 8001520:	0688      	lsls	r0, r1, #26
 8001522:	d502      	bpl.n	800152a <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001524:	4620      	mov	r0, r4
 8001526:	f7ff ff83 	bl	8001430 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800152a:	6823      	ldr	r3, [r4, #0]
 800152c:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800152e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001530:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8001532:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001534:	d402      	bmi.n	800153c <HAL_UART_IRQHandler+0x8c>
 8001536:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800153a:	d01a      	beq.n	8001572 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 800153c:	f7ff fd9c 	bl	8001078 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001540:	6823      	ldr	r3, [r4, #0]
 8001542:	695a      	ldr	r2, [r3, #20]
 8001544:	0652      	lsls	r2, r2, #25
 8001546:	d510      	bpl.n	800156a <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001548:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800154a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800154c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001550:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001552:	b150      	cbz	r0, 800156a <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001554:	4b25      	ldr	r3, [pc, #148]	; (80015ec <HAL_UART_IRQHandler+0x13c>)
 8001556:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001558:	f7ff f97c 	bl	8000854 <HAL_DMA_Abort_IT>
 800155c:	2800      	cmp	r0, #0
 800155e:	d044      	beq.n	80015ea <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001560:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001566:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001568:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800156a:	4620      	mov	r0, r4
 800156c:	f7ff ff9e 	bl	80014ac <HAL_UART_ErrorCallback>
 8001570:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001572:	f7ff ff9b 	bl	80014ac <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001576:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001578:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800157a:	0616      	lsls	r6, r2, #24
 800157c:	d527      	bpl.n	80015ce <HAL_UART_IRQHandler+0x11e>
 800157e:	060d      	lsls	r5, r1, #24
 8001580:	d525      	bpl.n	80015ce <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001582:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001586:	2a21      	cmp	r2, #33	; 0x21
 8001588:	d12f      	bne.n	80015ea <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800158a:	68a2      	ldr	r2, [r4, #8]
 800158c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001590:	6a22      	ldr	r2, [r4, #32]
 8001592:	d117      	bne.n	80015c4 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001594:	8811      	ldrh	r1, [r2, #0]
 8001596:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800159a:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800159c:	6921      	ldr	r1, [r4, #16]
 800159e:	b979      	cbnz	r1, 80015c0 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80015a0:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80015a2:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80015a4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80015a6:	3a01      	subs	r2, #1
 80015a8:	b292      	uxth	r2, r2
 80015aa:	84e2      	strh	r2, [r4, #38]	; 0x26
 80015ac:	b9ea      	cbnz	r2, 80015ea <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80015ae:	68da      	ldr	r2, [r3, #12]
 80015b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015b4:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80015b6:	68da      	ldr	r2, [r3, #12]
 80015b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80015c0:	3201      	adds	r2, #1
 80015c2:	e7ee      	b.n	80015a2 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80015c4:	1c51      	adds	r1, r2, #1
 80015c6:	6221      	str	r1, [r4, #32]
 80015c8:	7812      	ldrb	r2, [r2, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	e7ea      	b.n	80015a4 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80015ce:	0650      	lsls	r0, r2, #25
 80015d0:	d50b      	bpl.n	80015ea <HAL_UART_IRQHandler+0x13a>
 80015d2:	064a      	lsls	r2, r1, #25
 80015d4:	d509      	bpl.n	80015ea <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015dc:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80015de:	2320      	movs	r3, #32
 80015e0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80015e4:	4620      	mov	r0, r4
 80015e6:	f7ff ff22 	bl	800142e <HAL_UART_TxCpltCallback>
 80015ea:	bd70      	pop	{r4, r5, r6, pc}
 80015ec:	080015f1 	.word	0x080015f1

080015f0 <UART_DMAAbortOnError>:
{
 80015f0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80015f2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80015f8:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80015fa:	f7ff ff57 	bl	80014ac <HAL_UART_ErrorCallback>
 80015fe:	bd08      	pop	{r3, pc}

08001600 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001600:	b507      	push	{r0, r1, r2, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <MX_DMA_Init+0x30>)
 8001604:	2200      	movs	r2, #0
 8001606:	9201      	str	r2, [sp, #4]
 8001608:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800160a:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 800160e:	6319      	str	r1, [r3, #48]	; 0x30
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001616:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001618:	4611      	mov	r1, r2
 800161a:	203a      	movs	r0, #58	; 0x3a
  __HAL_RCC_DMA2_CLK_ENABLE();
 800161c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800161e:	f7ff f82d 	bl	800067c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001622:	203a      	movs	r0, #58	; 0x3a
 8001624:	f7ff f85e 	bl	80006e4 <HAL_NVIC_EnableIRQ>

}
 8001628:	b003      	add	sp, #12
 800162a:	f85d fb04 	ldr.w	pc, [sp], #4
 800162e:	bf00      	nop
 8001630:	40023800 	.word	0x40023800

08001634 <MX_GPIO_Init>:
        * EXTI
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8001634:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001636:	2214      	movs	r2, #20
{
 8001638:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163a:	eb0d 0002 	add.w	r0, sp, r2
 800163e:	2100      	movs	r1, #0
 8001640:	f000 fa84 	bl	8001b4c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001644:	2400      	movs	r4, #0
 8001646:	4b29      	ldr	r3, [pc, #164]	; (80016ec <MX_GPIO_Init+0xb8>)
 8001648:	9401      	str	r4, [sp, #4]
 800164a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800164c:	4e28      	ldr	r6, [pc, #160]	; (80016f0 <MX_GPIO_Init+0xbc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800164e:	f042 0204 	orr.w	r2, r2, #4
 8001652:	631a      	str	r2, [r3, #48]	; 0x30
 8001654:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001656:	f002 0204 	and.w	r2, r2, #4
 800165a:	9201      	str	r2, [sp, #4]
 800165c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800165e:	9402      	str	r4, [sp, #8]
 8001660:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001662:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001666:	631a      	str	r2, [r3, #48]	; 0x30
 8001668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800166a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800166e:	9202      	str	r2, [sp, #8]
 8001670:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001672:	9403      	str	r4, [sp, #12]
 8001674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001676:	f042 0201 	orr.w	r2, r2, #1
 800167a:	631a      	str	r2, [r3, #48]	; 0x30
 800167c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800167e:	f002 0201 	and.w	r2, r2, #1
 8001682:	9203      	str	r2, [sp, #12]
 8001684:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001686:	9404      	str	r4, [sp, #16]
 8001688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800168a:	f042 0202 	orr.w	r2, r2, #2
 800168e:	631a      	str	r2, [r3, #48]	; 0x30
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001696:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001698:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800169a:	4630      	mov	r0, r6
 800169c:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800169e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016a0:	f7ff fa7a 	bl	8000b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016a8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016aa:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016ac:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <MX_GPIO_Init+0xc0>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016ae:	4812      	ldr	r0, [pc, #72]	; (80016f8 <MX_GPIO_Init+0xc4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016b0:	9306      	str	r3, [sp, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b2:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016b6:	f7ff f999 	bl	80009ec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 80016ba:	2320      	movs	r3, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016bc:	a905      	add	r1, sp, #20
 80016be:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = LD2_Pin;
 80016c0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c2:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016c8:	f7ff f990 	bl	80009ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016d0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d2:	2312      	movs	r3, #18
 80016d4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d6:	2303      	movs	r3, #3
 80016d8:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016da:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016dc:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016de:	4807      	ldr	r0, [pc, #28]	; (80016fc <MX_GPIO_Init+0xc8>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016e0:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016e2:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e4:	f7ff f982 	bl	80009ec <HAL_GPIO_Init>

}
 80016e8:	b00a      	add	sp, #40	; 0x28
 80016ea:	bd70      	pop	{r4, r5, r6, pc}
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40020000 	.word	0x40020000
 80016f4:	10210000 	.word	0x10210000
 80016f8:	40020800 	.word	0x40020800
 80016fc:	40020400 	.word	0x40020400

08001700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001700:	b530      	push	{r4, r5, lr}
 8001702:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001704:	2230      	movs	r2, #48	; 0x30
 8001706:	2100      	movs	r1, #0
 8001708:	a808      	add	r0, sp, #32
 800170a:	f000 fa1f 	bl	8001b4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800170e:	2100      	movs	r1, #0
 8001710:	2214      	movs	r2, #20
 8001712:	a803      	add	r0, sp, #12
 8001714:	f000 fa1a 	bl	8001b4c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001718:	2400      	movs	r4, #0
 800171a:	4b1c      	ldr	r3, [pc, #112]	; (800178c <SystemClock_Config+0x8c>)
 800171c:	9401      	str	r4, [sp, #4]
 800171e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001720:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001724:	641a      	str	r2, [r3, #64]	; 0x40
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001728:	4a19      	ldr	r2, [pc, #100]	; (8001790 <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	9301      	str	r3, [sp, #4]
 8001730:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001732:	9402      	str	r4, [sp, #8]
 8001734:	6813      	ldr	r3, [r2, #0]
 8001736:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800173a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	6813      	ldr	r3, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001742:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001744:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001748:	9302      	str	r3, [sp, #8]
 800174a:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800174c:	2301      	movs	r3, #1
 800174e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001750:	2310      	movs	r3, #16
 8001752:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001754:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001756:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800175a:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800175c:	2304      	movs	r3, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800175e:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001760:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001762:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001764:	2307      	movs	r3, #7
 8001766:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001768:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800176a:	950e      	str	r5, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800176c:	f7ff fa1a 	bl	8000ba4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001770:	230f      	movs	r3, #15
 8001772:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001774:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800177a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800177c:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800177e:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001780:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001782:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001784:	f7ff fbbe 	bl	8000f04 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001788:	b015      	add	sp, #84	; 0x54
 800178a:	bd30      	pop	{r4, r5, pc}
 800178c:	40023800 	.word	0x40023800
 8001790:	40007000 	.word	0x40007000

08001794 <main>:
{
 8001794:	b538      	push	{r3, r4, r5, lr}
  HAL_Init();
 8001796:	f7fe ff1f 	bl	80005d8 <HAL_Init>
  SystemClock_Config();
 800179a:	f7ff ffb1 	bl	8001700 <SystemClock_Config>
  MX_GPIO_Init();
 800179e:	f7ff ff49 	bl	8001634 <MX_GPIO_Init>
  MX_DMA_Init();
 80017a2:	f7ff ff2d 	bl	8001600 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80017a6:	f000 f8dd 	bl	8001964 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80017aa:	f000 f8bf 	bl	800192c <MX_USART1_UART_Init>
    if (request_received) {
 80017ae:	4d07      	ldr	r5, [pc, #28]	; (80017cc <main+0x38>)
  MX_USART1_UART_Init();
 80017b0:	2400      	movs	r4, #0
 80017b2:	b2e0      	uxtb	r0, r4
    if (request_received) {
 80017b4:	782b      	ldrb	r3, [r5, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0fc      	beq.n	80017b4 <main+0x20>
      rn4020_uart_tx(data++);
 80017ba:	f000 f81d 	bl	80017f8 <rn4020_uart_tx>
      HAL_Delay(1000);
 80017be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017c2:	f7fe ff35 	bl	8000630 <HAL_Delay>
 80017c6:	3401      	adds	r4, #1
 80017c8:	e7f3      	b.n	80017b2 <main+0x1e>
 80017ca:	bf00      	nop
 80017cc:	20000008 	.word	0x20000008

080017d0 <HAL_UART_RxCpltCallback>:
 * One-byte command reception from PC
 *
 * TODO: implement command reception procedure.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
  request_received = true;
 80017d0:	4b01      	ldr	r3, [pc, #4]	; (80017d8 <HAL_UART_RxCpltCallback+0x8>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	701a      	strb	r2, [r3, #0]
 80017d6:	4770      	bx	lr
 80017d8:	20000008 	.word	0x20000008

080017dc <_write>:
/*
 * Override _write function.
 *
 * Note: use usart2 instead of usart1 for debugging.
 */
int _write(int file, char *ptr, int len) {
 80017dc:	b510      	push	{r4, lr}
  HAL_UART_Transmit(&huart1, (uint8_t *) ptr, (uint16_t) len, 0xFFFFFFFF);
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
int _write(int file, char *ptr, int len) {
 80017e2:	4614      	mov	r4, r2
  HAL_UART_Transmit(&huart1, (uint8_t *) ptr, (uint16_t) len, 0xFFFFFFFF);
 80017e4:	4802      	ldr	r0, [pc, #8]	; (80017f0 <_write+0x14>)
 80017e6:	b292      	uxth	r2, r2
 80017e8:	f7ff fdc4 	bl	8001374 <HAL_UART_Transmit>
  //HAL_UART_Transmit(&huart2, (uint8_t *) ptr, (uint16_t) len, 0xFFFFFFFF);
  return len;
}
 80017ec:	4620      	mov	r0, r4
 80017ee:	bd10      	pop	{r4, pc}
 80017f0:	20000100 	.word	0x20000100

080017f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f4:	4770      	bx	lr
	...

080017f8 <rn4020_uart_tx>:
#include <stdio.h>
#include <usart.h>
#include "rn4020.h"

void rn4020_uart_tx(uint8_t data) {
  printf("SUW,%s,%02x\n", CHARACTERISTIC_UUID, data);
 80017f8:	4602      	mov	r2, r0
 80017fa:	4902      	ldr	r1, [pc, #8]	; (8001804 <rn4020_uart_tx+0xc>)
 80017fc:	4802      	ldr	r0, [pc, #8]	; (8001808 <rn4020_uart_tx+0x10>)
 80017fe:	f000 b9ad 	b.w	8001b5c <iprintf>
 8001802:	bf00      	nop
 8001804:	0800296c 	.word	0x0800296c
 8001808:	0800298d 	.word	0x0800298d

0800180c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800180c:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <HAL_MspInit+0x3c>)
 8001810:	2100      	movs	r1, #0
 8001812:	9100      	str	r1, [sp, #0]
 8001814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001816:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800181a:	645a      	str	r2, [r3, #68]	; 0x44
 800181c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800181e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001822:	9200      	str	r2, [sp, #0]
 8001824:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001826:	9101      	str	r1, [sp, #4]
 8001828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800182a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800182e:	641a      	str	r2, [r3, #64]	; 0x40
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001836:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001838:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 800183a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800183c:	f7fe ff0c 	bl	8000658 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001840:	b003      	add	sp, #12
 8001842:	f85d fb04 	ldr.w	pc, [sp], #4
 8001846:	bf00      	nop
 8001848:	40023800 	.word	0x40023800

0800184c <NMI_Handler>:
 800184c:	4770      	bx	lr

0800184e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184e:	e7fe      	b.n	800184e <HardFault_Handler>

08001850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001850:	e7fe      	b.n	8001850 <MemManage_Handler>

08001852 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001852:	e7fe      	b.n	8001852 <BusFault_Handler>

08001854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001854:	e7fe      	b.n	8001854 <UsageFault_Handler>

08001856 <SVC_Handler>:
 8001856:	4770      	bx	lr

08001858 <DebugMon_Handler>:
 8001858:	4770      	bx	lr

0800185a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800185a:	4770      	bx	lr

0800185c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800185c:	f7fe bed6 	b.w	800060c <HAL_IncTick>

08001860 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001860:	4801      	ldr	r0, [pc, #4]	; (8001868 <USART1_IRQHandler+0x8>)
 8001862:	f7ff be25 	b.w	80014b0 <HAL_UART_IRQHandler>
 8001866:	bf00      	nop
 8001868:	20000100 	.word	0x20000100

0800186c <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800186c:	4801      	ldr	r0, [pc, #4]	; (8001874 <DMA2_Stream2_IRQHandler+0x8>)
 800186e:	f7ff b803 	b.w	8000878 <HAL_DMA_IRQHandler>
 8001872:	bf00      	nop
 8001874:	200000a0 	.word	0x200000a0

08001878 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001878:	b570      	push	{r4, r5, r6, lr}
 800187a:	460e      	mov	r6, r1
 800187c:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187e:	460c      	mov	r4, r1
 8001880:	1ba3      	subs	r3, r4, r6
 8001882:	429d      	cmp	r5, r3
 8001884:	dc01      	bgt.n	800188a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001886:	4628      	mov	r0, r5
 8001888:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800188a:	f3af 8000 	nop.w
 800188e:	f804 0b01 	strb.w	r0, [r4], #1
 8001892:	e7f5      	b.n	8001880 <_read+0x8>

08001894 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001894:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <_sbrk+0x2c>)
 8001898:	6819      	ldr	r1, [r3, #0]
{
 800189a:	4602      	mov	r2, r0
	if (heap_end == 0)
 800189c:	b909      	cbnz	r1, 80018a2 <_sbrk+0xe>
		heap_end = &end;
 800189e:	4909      	ldr	r1, [pc, #36]	; (80018c4 <_sbrk+0x30>)
 80018a0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80018a2:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80018a4:	4669      	mov	r1, sp
 80018a6:	4402      	add	r2, r0
 80018a8:	428a      	cmp	r2, r1
 80018aa:	d906      	bls.n	80018ba <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80018ac:	f000 f924 	bl	8001af8 <__errno>
 80018b0:	230c      	movs	r3, #12
 80018b2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80018b4:	f04f 30ff 	mov.w	r0, #4294967295
 80018b8:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80018ba:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80018bc:	bd08      	pop	{r3, pc}
 80018be:	bf00      	nop
 80018c0:	20000090 	.word	0x20000090
 80018c4:	20000184 	.word	0x20000184

080018c8 <_close>:

int _close(int file)
{
	return -1;
}
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295
 80018cc:	4770      	bx	lr

080018ce <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80018ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d2:	604b      	str	r3, [r1, #4]
	return 0;
}
 80018d4:	2000      	movs	r0, #0
 80018d6:	4770      	bx	lr

080018d8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80018d8:	2001      	movs	r0, #1
 80018da:	4770      	bx	lr

080018dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80018dc:	2000      	movs	r0, #0
 80018de:	4770      	bx	lr

080018e0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e0:	490f      	ldr	r1, [pc, #60]	; (8001920 <SystemInit+0x40>)
 80018e2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80018e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80018ee:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <SystemInit+0x44>)
 80018f0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018f2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80018f4:	f042 0201 	orr.w	r2, r2, #1
 80018f8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80018fa:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001902:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001906:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001908:	4a07      	ldr	r2, [pc, #28]	; (8001928 <SystemInit+0x48>)
 800190a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001912:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001914:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001916:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800191a:	608b      	str	r3, [r1, #8]
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e000ed00 	.word	0xe000ed00
 8001924:	40023800 	.word	0x40023800
 8001928:	24003010 	.word	0x24003010

0800192c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800192c:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 800192e:	480b      	ldr	r0, [pc, #44]	; (800195c <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 8001930:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <MX_USART1_UART_Init+0x34>)
 8001932:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8001936:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800193a:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800193c:	2300      	movs	r3, #0
 800193e:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001940:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001942:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001944:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001946:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001948:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800194a:	f7ff fce5 	bl	8001318 <HAL_UART_Init>
 800194e:	b118      	cbz	r0, 8001958 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8001950:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001954:	f7ff bf4e 	b.w	80017f4 <Error_Handler>
 8001958:	bd08      	pop	{r3, pc}
 800195a:	bf00      	nop
 800195c:	20000100 	.word	0x20000100
 8001960:	40011000 	.word	0x40011000

08001964 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001964:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8001966:	480b      	ldr	r0, [pc, #44]	; (8001994 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8001968:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <MX_USART2_UART_Init+0x34>)
 800196a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800196e:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001972:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001974:	2300      	movs	r3, #0
 8001976:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001978:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800197a:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800197c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800197e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001980:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001982:	f7ff fcc9 	bl	8001318 <HAL_UART_Init>
 8001986:	b118      	cbz	r0, 8001990 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8001988:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800198c:	f7ff bf32 	b.w	80017f4 <Error_Handler>
 8001990:	bd08      	pop	{r3, pc}
 8001992:	bf00      	nop
 8001994:	20000140 	.word	0x20000140
 8001998:	40004400 	.word	0x40004400

0800199c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800199c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199e:	2214      	movs	r2, #20
{
 80019a0:	b08a      	sub	sp, #40	; 0x28
 80019a2:	4606      	mov	r6, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	2100      	movs	r1, #0
 80019a6:	eb0d 0002 	add.w	r0, sp, r2
 80019aa:	f000 f8cf 	bl	8001b4c <memset>
  if(uartHandle->Instance==USART1)
 80019ae:	6833      	ldr	r3, [r6, #0]
 80019b0:	4a36      	ldr	r2, [pc, #216]	; (8001a8c <HAL_UART_MspInit+0xf0>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d146      	bne.n	8001a44 <HAL_UART_MspInit+0xa8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019b6:	2500      	movs	r5, #0
 80019b8:	4b35      	ldr	r3, [pc, #212]	; (8001a90 <HAL_UART_MspInit+0xf4>)
 80019ba:	9501      	str	r5, [sp, #4]
 80019bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019be:	4835      	ldr	r0, [pc, #212]	; (8001a94 <HAL_UART_MspInit+0xf8>)

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80019c0:	4c35      	ldr	r4, [pc, #212]	; (8001a98 <HAL_UART_MspInit+0xfc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80019c2:	f042 0210 	orr.w	r2, r2, #16
 80019c6:	645a      	str	r2, [r3, #68]	; 0x44
 80019c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019ca:	f002 0210 	and.w	r2, r2, #16
 80019ce:	9201      	str	r2, [sp, #4]
 80019d0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d2:	9502      	str	r5, [sp, #8]
 80019d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019d6:	f042 0201 	orr.w	r2, r2, #1
 80019da:	631a      	str	r2, [r3, #48]	; 0x30
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	9302      	str	r3, [sp, #8]
 80019e4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019ea:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ec:	2302      	movs	r3, #2
 80019ee:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019f0:	2301      	movs	r3, #1
 80019f2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f4:	2303      	movs	r3, #3
 80019f6:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f8:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019fa:	2307      	movs	r3, #7
 80019fc:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fe:	f7fe fff5 	bl	80009ec <HAL_GPIO_Init>
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001a02:	4a26      	ldr	r2, [pc, #152]	; (8001a9c <HAL_UART_MspInit+0x100>)
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a04:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001a06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001a0a:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001a0e:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a14:	60e5      	str	r5, [r4, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a16:	6123      	str	r3, [r4, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a18:	6165      	str	r5, [r4, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a1a:	61a5      	str	r5, [r4, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001a1c:	61e5      	str	r5, [r4, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a1e:	6225      	str	r5, [r4, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a20:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001a22:	f7fe fe99 	bl	8000758 <HAL_DMA_Init>
 8001a26:	b108      	cbz	r0, 8001a2c <HAL_UART_MspInit+0x90>
    {
      Error_Handler();
 8001a28:	f7ff fee4 	bl	80017f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001a2c:	6374      	str	r4, [r6, #52]	; 0x34

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 15);
 8001a2e:	2025      	movs	r0, #37	; 0x25
 8001a30:	220f      	movs	r2, #15
 8001a32:	2100      	movs	r1, #0
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001a34:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 15);
 8001a36:	f7fe fe21 	bl	800067c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a3a:	2025      	movs	r0, #37	; 0x25
 8001a3c:	f7fe fe52 	bl	80006e4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a40:	b00a      	add	sp, #40	; 0x28
 8001a42:	bd70      	pop	{r4, r5, r6, pc}
  else if(uartHandle->Instance==USART2)
 8001a44:	4a16      	ldr	r2, [pc, #88]	; (8001aa0 <HAL_UART_MspInit+0x104>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d1fa      	bne.n	8001a40 <HAL_UART_MspInit+0xa4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a4a:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <HAL_UART_MspInit+0xf4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4c:	4811      	ldr	r0, [pc, #68]	; (8001a94 <HAL_UART_MspInit+0xf8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a4e:	2100      	movs	r1, #0
 8001a50:	9103      	str	r1, [sp, #12]
 8001a52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a54:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001a58:	641a      	str	r2, [r3, #64]	; 0x40
 8001a5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a5c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001a60:	9203      	str	r2, [sp, #12]
 8001a62:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a64:	9104      	str	r1, [sp, #16]
 8001a66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a68:	f042 0201 	orr.w	r2, r2, #1
 8001a6c:	631a      	str	r2, [r3, #48]	; 0x30
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	9304      	str	r3, [sp, #16]
 8001a76:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a78:	230c      	movs	r3, #12
 8001a7a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a80:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a82:	2307      	movs	r3, #7
 8001a84:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a86:	f7fe ffb1 	bl	80009ec <HAL_GPIO_Init>
}
 8001a8a:	e7d9      	b.n	8001a40 <HAL_UART_MspInit+0xa4>
 8001a8c:	40011000 	.word	0x40011000
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40020000 	.word	0x40020000
 8001a98:	200000a0 	.word	0x200000a0
 8001a9c:	40026440 	.word	0x40026440
 8001aa0:	40004400 	.word	0x40004400

08001aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001aa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001adc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001aa8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001aaa:	e003      	b.n	8001ab4 <LoopCopyDataInit>

08001aac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001aae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ab0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ab2:	3104      	adds	r1, #4

08001ab4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ab4:	480b      	ldr	r0, [pc, #44]	; (8001ae4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ab6:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ab8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001aba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001abc:	d3f6      	bcc.n	8001aac <CopyDataInit>
  ldr  r2, =_sbss
 8001abe:	4a0b      	ldr	r2, [pc, #44]	; (8001aec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ac0:	e002      	b.n	8001ac8 <LoopFillZerobss>

08001ac2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ac2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ac4:	f842 3b04 	str.w	r3, [r2], #4

08001ac8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ac8:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001aca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001acc:	d3f9      	bcc.n	8001ac2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ace:	f7ff ff07 	bl	80018e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ad2:	f000 f817 	bl	8001b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ad6:	f7ff fe5d 	bl	8001794 <main>
  bx  lr    
 8001ada:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001adc:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001ae0:	08002a5c 	.word	0x08002a5c
  ldr  r0, =_sdata
 8001ae4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ae8:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001aec:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001af0:	20000184 	.word	0x20000184

08001af4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001af4:	e7fe      	b.n	8001af4 <ADC_IRQHandler>
	...

08001af8 <__errno>:
 8001af8:	4b01      	ldr	r3, [pc, #4]	; (8001b00 <__errno+0x8>)
 8001afa:	6818      	ldr	r0, [r3, #0]
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000010 	.word	0x20000010

08001b04 <__libc_init_array>:
 8001b04:	b570      	push	{r4, r5, r6, lr}
 8001b06:	4e0d      	ldr	r6, [pc, #52]	; (8001b3c <__libc_init_array+0x38>)
 8001b08:	4c0d      	ldr	r4, [pc, #52]	; (8001b40 <__libc_init_array+0x3c>)
 8001b0a:	1ba4      	subs	r4, r4, r6
 8001b0c:	10a4      	asrs	r4, r4, #2
 8001b0e:	2500      	movs	r5, #0
 8001b10:	42a5      	cmp	r5, r4
 8001b12:	d109      	bne.n	8001b28 <__libc_init_array+0x24>
 8001b14:	4e0b      	ldr	r6, [pc, #44]	; (8001b44 <__libc_init_array+0x40>)
 8001b16:	4c0c      	ldr	r4, [pc, #48]	; (8001b48 <__libc_init_array+0x44>)
 8001b18:	f000 ff18 	bl	800294c <_init>
 8001b1c:	1ba4      	subs	r4, r4, r6
 8001b1e:	10a4      	asrs	r4, r4, #2
 8001b20:	2500      	movs	r5, #0
 8001b22:	42a5      	cmp	r5, r4
 8001b24:	d105      	bne.n	8001b32 <__libc_init_array+0x2e>
 8001b26:	bd70      	pop	{r4, r5, r6, pc}
 8001b28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b2c:	4798      	blx	r3
 8001b2e:	3501      	adds	r5, #1
 8001b30:	e7ee      	b.n	8001b10 <__libc_init_array+0xc>
 8001b32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b36:	4798      	blx	r3
 8001b38:	3501      	adds	r5, #1
 8001b3a:	e7f2      	b.n	8001b22 <__libc_init_array+0x1e>
 8001b3c:	08002a54 	.word	0x08002a54
 8001b40:	08002a54 	.word	0x08002a54
 8001b44:	08002a54 	.word	0x08002a54
 8001b48:	08002a58 	.word	0x08002a58

08001b4c <memset>:
 8001b4c:	4402      	add	r2, r0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d100      	bne.n	8001b56 <memset+0xa>
 8001b54:	4770      	bx	lr
 8001b56:	f803 1b01 	strb.w	r1, [r3], #1
 8001b5a:	e7f9      	b.n	8001b50 <memset+0x4>

08001b5c <iprintf>:
 8001b5c:	b40f      	push	{r0, r1, r2, r3}
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <iprintf+0x2c>)
 8001b60:	b513      	push	{r0, r1, r4, lr}
 8001b62:	681c      	ldr	r4, [r3, #0]
 8001b64:	b124      	cbz	r4, 8001b70 <iprintf+0x14>
 8001b66:	69a3      	ldr	r3, [r4, #24]
 8001b68:	b913      	cbnz	r3, 8001b70 <iprintf+0x14>
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	f000 f84e 	bl	8001c0c <__sinit>
 8001b70:	ab05      	add	r3, sp, #20
 8001b72:	9a04      	ldr	r2, [sp, #16]
 8001b74:	68a1      	ldr	r1, [r4, #8]
 8001b76:	9301      	str	r3, [sp, #4]
 8001b78:	4620      	mov	r0, r4
 8001b7a:	f000 f959 	bl	8001e30 <_vfiprintf_r>
 8001b7e:	b002      	add	sp, #8
 8001b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b84:	b004      	add	sp, #16
 8001b86:	4770      	bx	lr
 8001b88:	20000010 	.word	0x20000010

08001b8c <_cleanup_r>:
 8001b8c:	4901      	ldr	r1, [pc, #4]	; (8001b94 <_cleanup_r+0x8>)
 8001b8e:	f000 b8a9 	b.w	8001ce4 <_fwalk_reent>
 8001b92:	bf00      	nop
 8001b94:	08002705 	.word	0x08002705

08001b98 <std.isra.0>:
 8001b98:	2300      	movs	r3, #0
 8001b9a:	b510      	push	{r4, lr}
 8001b9c:	4604      	mov	r4, r0
 8001b9e:	6003      	str	r3, [r0, #0]
 8001ba0:	6043      	str	r3, [r0, #4]
 8001ba2:	6083      	str	r3, [r0, #8]
 8001ba4:	8181      	strh	r1, [r0, #12]
 8001ba6:	6643      	str	r3, [r0, #100]	; 0x64
 8001ba8:	81c2      	strh	r2, [r0, #14]
 8001baa:	6103      	str	r3, [r0, #16]
 8001bac:	6143      	str	r3, [r0, #20]
 8001bae:	6183      	str	r3, [r0, #24]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	2208      	movs	r2, #8
 8001bb4:	305c      	adds	r0, #92	; 0x5c
 8001bb6:	f7ff ffc9 	bl	8001b4c <memset>
 8001bba:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <std.isra.0+0x38>)
 8001bbc:	6263      	str	r3, [r4, #36]	; 0x24
 8001bbe:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <std.isra.0+0x3c>)
 8001bc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8001bc2:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <std.isra.0+0x40>)
 8001bc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001bc6:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <std.isra.0+0x44>)
 8001bc8:	6224      	str	r4, [r4, #32]
 8001bca:	6323      	str	r3, [r4, #48]	; 0x30
 8001bcc:	bd10      	pop	{r4, pc}
 8001bce:	bf00      	nop
 8001bd0:	080023a9 	.word	0x080023a9
 8001bd4:	080023cb 	.word	0x080023cb
 8001bd8:	08002403 	.word	0x08002403
 8001bdc:	08002427 	.word	0x08002427

08001be0 <__sfmoreglue>:
 8001be0:	b570      	push	{r4, r5, r6, lr}
 8001be2:	1e4a      	subs	r2, r1, #1
 8001be4:	2568      	movs	r5, #104	; 0x68
 8001be6:	4355      	muls	r5, r2
 8001be8:	460e      	mov	r6, r1
 8001bea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001bee:	f000 f897 	bl	8001d20 <_malloc_r>
 8001bf2:	4604      	mov	r4, r0
 8001bf4:	b140      	cbz	r0, 8001c08 <__sfmoreglue+0x28>
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	e880 0042 	stmia.w	r0, {r1, r6}
 8001bfc:	300c      	adds	r0, #12
 8001bfe:	60a0      	str	r0, [r4, #8]
 8001c00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001c04:	f7ff ffa2 	bl	8001b4c <memset>
 8001c08:	4620      	mov	r0, r4
 8001c0a:	bd70      	pop	{r4, r5, r6, pc}

08001c0c <__sinit>:
 8001c0c:	6983      	ldr	r3, [r0, #24]
 8001c0e:	b510      	push	{r4, lr}
 8001c10:	4604      	mov	r4, r0
 8001c12:	bb33      	cbnz	r3, 8001c62 <__sinit+0x56>
 8001c14:	6483      	str	r3, [r0, #72]	; 0x48
 8001c16:	64c3      	str	r3, [r0, #76]	; 0x4c
 8001c18:	6503      	str	r3, [r0, #80]	; 0x50
 8001c1a:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <__sinit+0x58>)
 8001c1c:	4a12      	ldr	r2, [pc, #72]	; (8001c68 <__sinit+0x5c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6282      	str	r2, [r0, #40]	; 0x28
 8001c22:	4298      	cmp	r0, r3
 8001c24:	bf04      	itt	eq
 8001c26:	2301      	moveq	r3, #1
 8001c28:	6183      	streq	r3, [r0, #24]
 8001c2a:	f000 f81f 	bl	8001c6c <__sfp>
 8001c2e:	6060      	str	r0, [r4, #4]
 8001c30:	4620      	mov	r0, r4
 8001c32:	f000 f81b 	bl	8001c6c <__sfp>
 8001c36:	60a0      	str	r0, [r4, #8]
 8001c38:	4620      	mov	r0, r4
 8001c3a:	f000 f817 	bl	8001c6c <__sfp>
 8001c3e:	2200      	movs	r2, #0
 8001c40:	60e0      	str	r0, [r4, #12]
 8001c42:	2104      	movs	r1, #4
 8001c44:	6860      	ldr	r0, [r4, #4]
 8001c46:	f7ff ffa7 	bl	8001b98 <std.isra.0>
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	2109      	movs	r1, #9
 8001c4e:	68a0      	ldr	r0, [r4, #8]
 8001c50:	f7ff ffa2 	bl	8001b98 <std.isra.0>
 8001c54:	2202      	movs	r2, #2
 8001c56:	2112      	movs	r1, #18
 8001c58:	68e0      	ldr	r0, [r4, #12]
 8001c5a:	f7ff ff9d 	bl	8001b98 <std.isra.0>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	61a3      	str	r3, [r4, #24]
 8001c62:	bd10      	pop	{r4, pc}
 8001c64:	080029b4 	.word	0x080029b4
 8001c68:	08001b8d 	.word	0x08001b8d

08001c6c <__sfp>:
 8001c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ce0 <__sfp+0x74>)
 8001c70:	681e      	ldr	r6, [r3, #0]
 8001c72:	69b3      	ldr	r3, [r6, #24]
 8001c74:	4607      	mov	r7, r0
 8001c76:	b913      	cbnz	r3, 8001c7e <__sfp+0x12>
 8001c78:	4630      	mov	r0, r6
 8001c7a:	f7ff ffc7 	bl	8001c0c <__sinit>
 8001c7e:	3648      	adds	r6, #72	; 0x48
 8001c80:	68b4      	ldr	r4, [r6, #8]
 8001c82:	6873      	ldr	r3, [r6, #4]
 8001c84:	3b01      	subs	r3, #1
 8001c86:	d503      	bpl.n	8001c90 <__sfp+0x24>
 8001c88:	6833      	ldr	r3, [r6, #0]
 8001c8a:	b133      	cbz	r3, 8001c9a <__sfp+0x2e>
 8001c8c:	6836      	ldr	r6, [r6, #0]
 8001c8e:	e7f7      	b.n	8001c80 <__sfp+0x14>
 8001c90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001c94:	b16d      	cbz	r5, 8001cb2 <__sfp+0x46>
 8001c96:	3468      	adds	r4, #104	; 0x68
 8001c98:	e7f4      	b.n	8001c84 <__sfp+0x18>
 8001c9a:	2104      	movs	r1, #4
 8001c9c:	4638      	mov	r0, r7
 8001c9e:	f7ff ff9f 	bl	8001be0 <__sfmoreglue>
 8001ca2:	6030      	str	r0, [r6, #0]
 8001ca4:	2800      	cmp	r0, #0
 8001ca6:	d1f1      	bne.n	8001c8c <__sfp+0x20>
 8001ca8:	230c      	movs	r3, #12
 8001caa:	603b      	str	r3, [r7, #0]
 8001cac:	4604      	mov	r4, r0
 8001cae:	4620      	mov	r0, r4
 8001cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cb6:	81e3      	strh	r3, [r4, #14]
 8001cb8:	2301      	movs	r3, #1
 8001cba:	81a3      	strh	r3, [r4, #12]
 8001cbc:	6665      	str	r5, [r4, #100]	; 0x64
 8001cbe:	6025      	str	r5, [r4, #0]
 8001cc0:	60a5      	str	r5, [r4, #8]
 8001cc2:	6065      	str	r5, [r4, #4]
 8001cc4:	6125      	str	r5, [r4, #16]
 8001cc6:	6165      	str	r5, [r4, #20]
 8001cc8:	61a5      	str	r5, [r4, #24]
 8001cca:	2208      	movs	r2, #8
 8001ccc:	4629      	mov	r1, r5
 8001cce:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001cd2:	f7ff ff3b 	bl	8001b4c <memset>
 8001cd6:	6365      	str	r5, [r4, #52]	; 0x34
 8001cd8:	63a5      	str	r5, [r4, #56]	; 0x38
 8001cda:	64a5      	str	r5, [r4, #72]	; 0x48
 8001cdc:	64e5      	str	r5, [r4, #76]	; 0x4c
 8001cde:	e7e6      	b.n	8001cae <__sfp+0x42>
 8001ce0:	080029b4 	.word	0x080029b4

08001ce4 <_fwalk_reent>:
 8001ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ce8:	4680      	mov	r8, r0
 8001cea:	4689      	mov	r9, r1
 8001cec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001cf0:	2600      	movs	r6, #0
 8001cf2:	b914      	cbnz	r4, 8001cfa <_fwalk_reent+0x16>
 8001cf4:	4630      	mov	r0, r6
 8001cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001cfa:	68a5      	ldr	r5, [r4, #8]
 8001cfc:	6867      	ldr	r7, [r4, #4]
 8001cfe:	3f01      	subs	r7, #1
 8001d00:	d501      	bpl.n	8001d06 <_fwalk_reent+0x22>
 8001d02:	6824      	ldr	r4, [r4, #0]
 8001d04:	e7f5      	b.n	8001cf2 <_fwalk_reent+0xe>
 8001d06:	89ab      	ldrh	r3, [r5, #12]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d907      	bls.n	8001d1c <_fwalk_reent+0x38>
 8001d0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001d10:	3301      	adds	r3, #1
 8001d12:	d003      	beq.n	8001d1c <_fwalk_reent+0x38>
 8001d14:	4629      	mov	r1, r5
 8001d16:	4640      	mov	r0, r8
 8001d18:	47c8      	blx	r9
 8001d1a:	4306      	orrs	r6, r0
 8001d1c:	3568      	adds	r5, #104	; 0x68
 8001d1e:	e7ee      	b.n	8001cfe <_fwalk_reent+0x1a>

08001d20 <_malloc_r>:
 8001d20:	b570      	push	{r4, r5, r6, lr}
 8001d22:	1ccd      	adds	r5, r1, #3
 8001d24:	f025 0503 	bic.w	r5, r5, #3
 8001d28:	3508      	adds	r5, #8
 8001d2a:	2d0c      	cmp	r5, #12
 8001d2c:	bf38      	it	cc
 8001d2e:	250c      	movcc	r5, #12
 8001d30:	2d00      	cmp	r5, #0
 8001d32:	4606      	mov	r6, r0
 8001d34:	db01      	blt.n	8001d3a <_malloc_r+0x1a>
 8001d36:	42a9      	cmp	r1, r5
 8001d38:	d903      	bls.n	8001d42 <_malloc_r+0x22>
 8001d3a:	230c      	movs	r3, #12
 8001d3c:	6033      	str	r3, [r6, #0]
 8001d3e:	2000      	movs	r0, #0
 8001d40:	bd70      	pop	{r4, r5, r6, pc}
 8001d42:	f000 fd7f 	bl	8002844 <__malloc_lock>
 8001d46:	4a23      	ldr	r2, [pc, #140]	; (8001dd4 <_malloc_r+0xb4>)
 8001d48:	6814      	ldr	r4, [r2, #0]
 8001d4a:	4621      	mov	r1, r4
 8001d4c:	b991      	cbnz	r1, 8001d74 <_malloc_r+0x54>
 8001d4e:	4c22      	ldr	r4, [pc, #136]	; (8001dd8 <_malloc_r+0xb8>)
 8001d50:	6823      	ldr	r3, [r4, #0]
 8001d52:	b91b      	cbnz	r3, 8001d5c <_malloc_r+0x3c>
 8001d54:	4630      	mov	r0, r6
 8001d56:	f000 fb17 	bl	8002388 <_sbrk_r>
 8001d5a:	6020      	str	r0, [r4, #0]
 8001d5c:	4629      	mov	r1, r5
 8001d5e:	4630      	mov	r0, r6
 8001d60:	f000 fb12 	bl	8002388 <_sbrk_r>
 8001d64:	1c43      	adds	r3, r0, #1
 8001d66:	d126      	bne.n	8001db6 <_malloc_r+0x96>
 8001d68:	230c      	movs	r3, #12
 8001d6a:	6033      	str	r3, [r6, #0]
 8001d6c:	4630      	mov	r0, r6
 8001d6e:	f000 fd6a 	bl	8002846 <__malloc_unlock>
 8001d72:	e7e4      	b.n	8001d3e <_malloc_r+0x1e>
 8001d74:	680b      	ldr	r3, [r1, #0]
 8001d76:	1b5b      	subs	r3, r3, r5
 8001d78:	d41a      	bmi.n	8001db0 <_malloc_r+0x90>
 8001d7a:	2b0b      	cmp	r3, #11
 8001d7c:	d90f      	bls.n	8001d9e <_malloc_r+0x7e>
 8001d7e:	600b      	str	r3, [r1, #0]
 8001d80:	50cd      	str	r5, [r1, r3]
 8001d82:	18cc      	adds	r4, r1, r3
 8001d84:	4630      	mov	r0, r6
 8001d86:	f000 fd5e 	bl	8002846 <__malloc_unlock>
 8001d8a:	f104 000b 	add.w	r0, r4, #11
 8001d8e:	1d23      	adds	r3, r4, #4
 8001d90:	f020 0007 	bic.w	r0, r0, #7
 8001d94:	1ac3      	subs	r3, r0, r3
 8001d96:	d01b      	beq.n	8001dd0 <_malloc_r+0xb0>
 8001d98:	425a      	negs	r2, r3
 8001d9a:	50e2      	str	r2, [r4, r3]
 8001d9c:	bd70      	pop	{r4, r5, r6, pc}
 8001d9e:	428c      	cmp	r4, r1
 8001da0:	bf0d      	iteet	eq
 8001da2:	6863      	ldreq	r3, [r4, #4]
 8001da4:	684b      	ldrne	r3, [r1, #4]
 8001da6:	6063      	strne	r3, [r4, #4]
 8001da8:	6013      	streq	r3, [r2, #0]
 8001daa:	bf18      	it	ne
 8001dac:	460c      	movne	r4, r1
 8001dae:	e7e9      	b.n	8001d84 <_malloc_r+0x64>
 8001db0:	460c      	mov	r4, r1
 8001db2:	6849      	ldr	r1, [r1, #4]
 8001db4:	e7ca      	b.n	8001d4c <_malloc_r+0x2c>
 8001db6:	1cc4      	adds	r4, r0, #3
 8001db8:	f024 0403 	bic.w	r4, r4, #3
 8001dbc:	42a0      	cmp	r0, r4
 8001dbe:	d005      	beq.n	8001dcc <_malloc_r+0xac>
 8001dc0:	1a21      	subs	r1, r4, r0
 8001dc2:	4630      	mov	r0, r6
 8001dc4:	f000 fae0 	bl	8002388 <_sbrk_r>
 8001dc8:	3001      	adds	r0, #1
 8001dca:	d0cd      	beq.n	8001d68 <_malloc_r+0x48>
 8001dcc:	6025      	str	r5, [r4, #0]
 8001dce:	e7d9      	b.n	8001d84 <_malloc_r+0x64>
 8001dd0:	bd70      	pop	{r4, r5, r6, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000094 	.word	0x20000094
 8001dd8:	20000098 	.word	0x20000098

08001ddc <__sfputc_r>:
 8001ddc:	6893      	ldr	r3, [r2, #8]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	b410      	push	{r4}
 8001de4:	6093      	str	r3, [r2, #8]
 8001de6:	da09      	bge.n	8001dfc <__sfputc_r+0x20>
 8001de8:	6994      	ldr	r4, [r2, #24]
 8001dea:	42a3      	cmp	r3, r4
 8001dec:	db02      	blt.n	8001df4 <__sfputc_r+0x18>
 8001dee:	b2cb      	uxtb	r3, r1
 8001df0:	2b0a      	cmp	r3, #10
 8001df2:	d103      	bne.n	8001dfc <__sfputc_r+0x20>
 8001df4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001df8:	f000 bb1a 	b.w	8002430 <__swbuf_r>
 8001dfc:	6813      	ldr	r3, [r2, #0]
 8001dfe:	1c58      	adds	r0, r3, #1
 8001e00:	6010      	str	r0, [r2, #0]
 8001e02:	7019      	strb	r1, [r3, #0]
 8001e04:	b2c8      	uxtb	r0, r1
 8001e06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <__sfputs_r>:
 8001e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e0e:	4606      	mov	r6, r0
 8001e10:	460f      	mov	r7, r1
 8001e12:	4614      	mov	r4, r2
 8001e14:	18d5      	adds	r5, r2, r3
 8001e16:	42ac      	cmp	r4, r5
 8001e18:	d101      	bne.n	8001e1e <__sfputs_r+0x12>
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	e007      	b.n	8001e2e <__sfputs_r+0x22>
 8001e1e:	463a      	mov	r2, r7
 8001e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e24:	4630      	mov	r0, r6
 8001e26:	f7ff ffd9 	bl	8001ddc <__sfputc_r>
 8001e2a:	1c43      	adds	r3, r0, #1
 8001e2c:	d1f3      	bne.n	8001e16 <__sfputs_r+0xa>
 8001e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001e30 <_vfiprintf_r>:
 8001e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e34:	b09d      	sub	sp, #116	; 0x74
 8001e36:	460c      	mov	r4, r1
 8001e38:	4617      	mov	r7, r2
 8001e3a:	9303      	str	r3, [sp, #12]
 8001e3c:	4606      	mov	r6, r0
 8001e3e:	b118      	cbz	r0, 8001e48 <_vfiprintf_r+0x18>
 8001e40:	6983      	ldr	r3, [r0, #24]
 8001e42:	b90b      	cbnz	r3, 8001e48 <_vfiprintf_r+0x18>
 8001e44:	f7ff fee2 	bl	8001c0c <__sinit>
 8001e48:	4b7c      	ldr	r3, [pc, #496]	; (800203c <_vfiprintf_r+0x20c>)
 8001e4a:	429c      	cmp	r4, r3
 8001e4c:	d157      	bne.n	8001efe <_vfiprintf_r+0xce>
 8001e4e:	6874      	ldr	r4, [r6, #4]
 8001e50:	89a3      	ldrh	r3, [r4, #12]
 8001e52:	0718      	lsls	r0, r3, #28
 8001e54:	d55d      	bpl.n	8001f12 <_vfiprintf_r+0xe2>
 8001e56:	6923      	ldr	r3, [r4, #16]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d05a      	beq.n	8001f12 <_vfiprintf_r+0xe2>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8001e60:	2320      	movs	r3, #32
 8001e62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001e66:	2330      	movs	r3, #48	; 0x30
 8001e68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001e6c:	f04f 0b01 	mov.w	fp, #1
 8001e70:	46b8      	mov	r8, r7
 8001e72:	4645      	mov	r5, r8
 8001e74:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d155      	bne.n	8001f28 <_vfiprintf_r+0xf8>
 8001e7c:	ebb8 0a07 	subs.w	sl, r8, r7
 8001e80:	d00b      	beq.n	8001e9a <_vfiprintf_r+0x6a>
 8001e82:	4653      	mov	r3, sl
 8001e84:	463a      	mov	r2, r7
 8001e86:	4621      	mov	r1, r4
 8001e88:	4630      	mov	r0, r6
 8001e8a:	f7ff ffbf 	bl	8001e0c <__sfputs_r>
 8001e8e:	3001      	adds	r0, #1
 8001e90:	f000 80c4 	beq.w	800201c <_vfiprintf_r+0x1ec>
 8001e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e96:	4453      	add	r3, sl
 8001e98:	9309      	str	r3, [sp, #36]	; 0x24
 8001e9a:	f898 3000 	ldrb.w	r3, [r8]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 80bc 	beq.w	800201c <_vfiprintf_r+0x1ec>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8001eaa:	9304      	str	r3, [sp, #16]
 8001eac:	9307      	str	r3, [sp, #28]
 8001eae:	9205      	str	r2, [sp, #20]
 8001eb0:	9306      	str	r3, [sp, #24]
 8001eb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001eb6:	931a      	str	r3, [sp, #104]	; 0x68
 8001eb8:	2205      	movs	r2, #5
 8001eba:	7829      	ldrb	r1, [r5, #0]
 8001ebc:	4860      	ldr	r0, [pc, #384]	; (8002040 <_vfiprintf_r+0x210>)
 8001ebe:	f7fe f98f 	bl	80001e0 <memchr>
 8001ec2:	f105 0801 	add.w	r8, r5, #1
 8001ec6:	9b04      	ldr	r3, [sp, #16]
 8001ec8:	2800      	cmp	r0, #0
 8001eca:	d131      	bne.n	8001f30 <_vfiprintf_r+0x100>
 8001ecc:	06d9      	lsls	r1, r3, #27
 8001ece:	bf44      	itt	mi
 8001ed0:	2220      	movmi	r2, #32
 8001ed2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001ed6:	071a      	lsls	r2, r3, #28
 8001ed8:	bf44      	itt	mi
 8001eda:	222b      	movmi	r2, #43	; 0x2b
 8001edc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001ee0:	782a      	ldrb	r2, [r5, #0]
 8001ee2:	2a2a      	cmp	r2, #42	; 0x2a
 8001ee4:	d02c      	beq.n	8001f40 <_vfiprintf_r+0x110>
 8001ee6:	9a07      	ldr	r2, [sp, #28]
 8001ee8:	2100      	movs	r1, #0
 8001eea:	200a      	movs	r0, #10
 8001eec:	46a8      	mov	r8, r5
 8001eee:	3501      	adds	r5, #1
 8001ef0:	f898 3000 	ldrb.w	r3, [r8]
 8001ef4:	3b30      	subs	r3, #48	; 0x30
 8001ef6:	2b09      	cmp	r3, #9
 8001ef8:	d96d      	bls.n	8001fd6 <_vfiprintf_r+0x1a6>
 8001efa:	b371      	cbz	r1, 8001f5a <_vfiprintf_r+0x12a>
 8001efc:	e026      	b.n	8001f4c <_vfiprintf_r+0x11c>
 8001efe:	4b51      	ldr	r3, [pc, #324]	; (8002044 <_vfiprintf_r+0x214>)
 8001f00:	429c      	cmp	r4, r3
 8001f02:	d101      	bne.n	8001f08 <_vfiprintf_r+0xd8>
 8001f04:	68b4      	ldr	r4, [r6, #8]
 8001f06:	e7a3      	b.n	8001e50 <_vfiprintf_r+0x20>
 8001f08:	4b4f      	ldr	r3, [pc, #316]	; (8002048 <_vfiprintf_r+0x218>)
 8001f0a:	429c      	cmp	r4, r3
 8001f0c:	bf08      	it	eq
 8001f0e:	68f4      	ldreq	r4, [r6, #12]
 8001f10:	e79e      	b.n	8001e50 <_vfiprintf_r+0x20>
 8001f12:	4621      	mov	r1, r4
 8001f14:	4630      	mov	r0, r6
 8001f16:	f000 faef 	bl	80024f8 <__swsetup_r>
 8001f1a:	2800      	cmp	r0, #0
 8001f1c:	d09e      	beq.n	8001e5c <_vfiprintf_r+0x2c>
 8001f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f22:	b01d      	add	sp, #116	; 0x74
 8001f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f28:	2b25      	cmp	r3, #37	; 0x25
 8001f2a:	d0a7      	beq.n	8001e7c <_vfiprintf_r+0x4c>
 8001f2c:	46a8      	mov	r8, r5
 8001f2e:	e7a0      	b.n	8001e72 <_vfiprintf_r+0x42>
 8001f30:	4a43      	ldr	r2, [pc, #268]	; (8002040 <_vfiprintf_r+0x210>)
 8001f32:	1a80      	subs	r0, r0, r2
 8001f34:	fa0b f000 	lsl.w	r0, fp, r0
 8001f38:	4318      	orrs	r0, r3
 8001f3a:	9004      	str	r0, [sp, #16]
 8001f3c:	4645      	mov	r5, r8
 8001f3e:	e7bb      	b.n	8001eb8 <_vfiprintf_r+0x88>
 8001f40:	9a03      	ldr	r2, [sp, #12]
 8001f42:	1d11      	adds	r1, r2, #4
 8001f44:	6812      	ldr	r2, [r2, #0]
 8001f46:	9103      	str	r1, [sp, #12]
 8001f48:	2a00      	cmp	r2, #0
 8001f4a:	db01      	blt.n	8001f50 <_vfiprintf_r+0x120>
 8001f4c:	9207      	str	r2, [sp, #28]
 8001f4e:	e004      	b.n	8001f5a <_vfiprintf_r+0x12a>
 8001f50:	4252      	negs	r2, r2
 8001f52:	f043 0302 	orr.w	r3, r3, #2
 8001f56:	9207      	str	r2, [sp, #28]
 8001f58:	9304      	str	r3, [sp, #16]
 8001f5a:	f898 3000 	ldrb.w	r3, [r8]
 8001f5e:	2b2e      	cmp	r3, #46	; 0x2e
 8001f60:	d110      	bne.n	8001f84 <_vfiprintf_r+0x154>
 8001f62:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001f66:	2b2a      	cmp	r3, #42	; 0x2a
 8001f68:	f108 0101 	add.w	r1, r8, #1
 8001f6c:	d137      	bne.n	8001fde <_vfiprintf_r+0x1ae>
 8001f6e:	9b03      	ldr	r3, [sp, #12]
 8001f70:	1d1a      	adds	r2, r3, #4
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	9203      	str	r2, [sp, #12]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	bfb8      	it	lt
 8001f7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8001f7e:	f108 0802 	add.w	r8, r8, #2
 8001f82:	9305      	str	r3, [sp, #20]
 8001f84:	4d31      	ldr	r5, [pc, #196]	; (800204c <_vfiprintf_r+0x21c>)
 8001f86:	f898 1000 	ldrb.w	r1, [r8]
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	4628      	mov	r0, r5
 8001f8e:	f7fe f927 	bl	80001e0 <memchr>
 8001f92:	b140      	cbz	r0, 8001fa6 <_vfiprintf_r+0x176>
 8001f94:	2340      	movs	r3, #64	; 0x40
 8001f96:	1b40      	subs	r0, r0, r5
 8001f98:	fa03 f000 	lsl.w	r0, r3, r0
 8001f9c:	9b04      	ldr	r3, [sp, #16]
 8001f9e:	4303      	orrs	r3, r0
 8001fa0:	9304      	str	r3, [sp, #16]
 8001fa2:	f108 0801 	add.w	r8, r8, #1
 8001fa6:	f898 1000 	ldrb.w	r1, [r8]
 8001faa:	4829      	ldr	r0, [pc, #164]	; (8002050 <_vfiprintf_r+0x220>)
 8001fac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001fb0:	2206      	movs	r2, #6
 8001fb2:	f108 0701 	add.w	r7, r8, #1
 8001fb6:	f7fe f913 	bl	80001e0 <memchr>
 8001fba:	2800      	cmp	r0, #0
 8001fbc:	d034      	beq.n	8002028 <_vfiprintf_r+0x1f8>
 8001fbe:	4b25      	ldr	r3, [pc, #148]	; (8002054 <_vfiprintf_r+0x224>)
 8001fc0:	bb03      	cbnz	r3, 8002004 <_vfiprintf_r+0x1d4>
 8001fc2:	9b03      	ldr	r3, [sp, #12]
 8001fc4:	3307      	adds	r3, #7
 8001fc6:	f023 0307 	bic.w	r3, r3, #7
 8001fca:	3308      	adds	r3, #8
 8001fcc:	9303      	str	r3, [sp, #12]
 8001fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001fd0:	444b      	add	r3, r9
 8001fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8001fd4:	e74c      	b.n	8001e70 <_vfiprintf_r+0x40>
 8001fd6:	fb00 3202 	mla	r2, r0, r2, r3
 8001fda:	2101      	movs	r1, #1
 8001fdc:	e786      	b.n	8001eec <_vfiprintf_r+0xbc>
 8001fde:	2300      	movs	r3, #0
 8001fe0:	9305      	str	r3, [sp, #20]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	250a      	movs	r5, #10
 8001fe6:	4688      	mov	r8, r1
 8001fe8:	3101      	adds	r1, #1
 8001fea:	f898 2000 	ldrb.w	r2, [r8]
 8001fee:	3a30      	subs	r2, #48	; 0x30
 8001ff0:	2a09      	cmp	r2, #9
 8001ff2:	d903      	bls.n	8001ffc <_vfiprintf_r+0x1cc>
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0c5      	beq.n	8001f84 <_vfiprintf_r+0x154>
 8001ff8:	9005      	str	r0, [sp, #20]
 8001ffa:	e7c3      	b.n	8001f84 <_vfiprintf_r+0x154>
 8001ffc:	fb05 2000 	mla	r0, r5, r0, r2
 8002000:	2301      	movs	r3, #1
 8002002:	e7f0      	b.n	8001fe6 <_vfiprintf_r+0x1b6>
 8002004:	ab03      	add	r3, sp, #12
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	4622      	mov	r2, r4
 800200a:	4b13      	ldr	r3, [pc, #76]	; (8002058 <_vfiprintf_r+0x228>)
 800200c:	a904      	add	r1, sp, #16
 800200e:	4630      	mov	r0, r6
 8002010:	f3af 8000 	nop.w
 8002014:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002018:	4681      	mov	r9, r0
 800201a:	d1d8      	bne.n	8001fce <_vfiprintf_r+0x19e>
 800201c:	89a3      	ldrh	r3, [r4, #12]
 800201e:	065b      	lsls	r3, r3, #25
 8002020:	f53f af7d 	bmi.w	8001f1e <_vfiprintf_r+0xee>
 8002024:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002026:	e77c      	b.n	8001f22 <_vfiprintf_r+0xf2>
 8002028:	ab03      	add	r3, sp, #12
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	4622      	mov	r2, r4
 800202e:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <_vfiprintf_r+0x228>)
 8002030:	a904      	add	r1, sp, #16
 8002032:	4630      	mov	r0, r6
 8002034:	f000 f888 	bl	8002148 <_printf_i>
 8002038:	e7ec      	b.n	8002014 <_vfiprintf_r+0x1e4>
 800203a:	bf00      	nop
 800203c:	080029d8 	.word	0x080029d8
 8002040:	08002a18 	.word	0x08002a18
 8002044:	080029f8 	.word	0x080029f8
 8002048:	080029b8 	.word	0x080029b8
 800204c:	08002a1e 	.word	0x08002a1e
 8002050:	08002a22 	.word	0x08002a22
 8002054:	00000000 	.word	0x00000000
 8002058:	08001e0d 	.word	0x08001e0d

0800205c <_printf_common>:
 800205c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002060:	4691      	mov	r9, r2
 8002062:	461f      	mov	r7, r3
 8002064:	688a      	ldr	r2, [r1, #8]
 8002066:	690b      	ldr	r3, [r1, #16]
 8002068:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800206c:	4293      	cmp	r3, r2
 800206e:	bfb8      	it	lt
 8002070:	4613      	movlt	r3, r2
 8002072:	f8c9 3000 	str.w	r3, [r9]
 8002076:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800207a:	4606      	mov	r6, r0
 800207c:	460c      	mov	r4, r1
 800207e:	b112      	cbz	r2, 8002086 <_printf_common+0x2a>
 8002080:	3301      	adds	r3, #1
 8002082:	f8c9 3000 	str.w	r3, [r9]
 8002086:	6823      	ldr	r3, [r4, #0]
 8002088:	0699      	lsls	r1, r3, #26
 800208a:	bf42      	ittt	mi
 800208c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002090:	3302      	addmi	r3, #2
 8002092:	f8c9 3000 	strmi.w	r3, [r9]
 8002096:	6825      	ldr	r5, [r4, #0]
 8002098:	f015 0506 	ands.w	r5, r5, #6
 800209c:	d107      	bne.n	80020ae <_printf_common+0x52>
 800209e:	f104 0a19 	add.w	sl, r4, #25
 80020a2:	68e3      	ldr	r3, [r4, #12]
 80020a4:	f8d9 2000 	ldr.w	r2, [r9]
 80020a8:	1a9b      	subs	r3, r3, r2
 80020aa:	429d      	cmp	r5, r3
 80020ac:	db29      	blt.n	8002102 <_printf_common+0xa6>
 80020ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80020b2:	6822      	ldr	r2, [r4, #0]
 80020b4:	3300      	adds	r3, #0
 80020b6:	bf18      	it	ne
 80020b8:	2301      	movne	r3, #1
 80020ba:	0692      	lsls	r2, r2, #26
 80020bc:	d42e      	bmi.n	800211c <_printf_common+0xc0>
 80020be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80020c2:	4639      	mov	r1, r7
 80020c4:	4630      	mov	r0, r6
 80020c6:	47c0      	blx	r8
 80020c8:	3001      	adds	r0, #1
 80020ca:	d021      	beq.n	8002110 <_printf_common+0xb4>
 80020cc:	6823      	ldr	r3, [r4, #0]
 80020ce:	68e5      	ldr	r5, [r4, #12]
 80020d0:	f8d9 2000 	ldr.w	r2, [r9]
 80020d4:	f003 0306 	and.w	r3, r3, #6
 80020d8:	2b04      	cmp	r3, #4
 80020da:	bf08      	it	eq
 80020dc:	1aad      	subeq	r5, r5, r2
 80020de:	68a3      	ldr	r3, [r4, #8]
 80020e0:	6922      	ldr	r2, [r4, #16]
 80020e2:	bf0c      	ite	eq
 80020e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80020e8:	2500      	movne	r5, #0
 80020ea:	4293      	cmp	r3, r2
 80020ec:	bfc4      	itt	gt
 80020ee:	1a9b      	subgt	r3, r3, r2
 80020f0:	18ed      	addgt	r5, r5, r3
 80020f2:	f04f 0900 	mov.w	r9, #0
 80020f6:	341a      	adds	r4, #26
 80020f8:	454d      	cmp	r5, r9
 80020fa:	d11b      	bne.n	8002134 <_printf_common+0xd8>
 80020fc:	2000      	movs	r0, #0
 80020fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002102:	2301      	movs	r3, #1
 8002104:	4652      	mov	r2, sl
 8002106:	4639      	mov	r1, r7
 8002108:	4630      	mov	r0, r6
 800210a:	47c0      	blx	r8
 800210c:	3001      	adds	r0, #1
 800210e:	d103      	bne.n	8002118 <_printf_common+0xbc>
 8002110:	f04f 30ff 	mov.w	r0, #4294967295
 8002114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002118:	3501      	adds	r5, #1
 800211a:	e7c2      	b.n	80020a2 <_printf_common+0x46>
 800211c:	18e1      	adds	r1, r4, r3
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	2030      	movs	r0, #48	; 0x30
 8002122:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002126:	4422      	add	r2, r4
 8002128:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800212c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002130:	3302      	adds	r3, #2
 8002132:	e7c4      	b.n	80020be <_printf_common+0x62>
 8002134:	2301      	movs	r3, #1
 8002136:	4622      	mov	r2, r4
 8002138:	4639      	mov	r1, r7
 800213a:	4630      	mov	r0, r6
 800213c:	47c0      	blx	r8
 800213e:	3001      	adds	r0, #1
 8002140:	d0e6      	beq.n	8002110 <_printf_common+0xb4>
 8002142:	f109 0901 	add.w	r9, r9, #1
 8002146:	e7d7      	b.n	80020f8 <_printf_common+0x9c>

08002148 <_printf_i>:
 8002148:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800214c:	4617      	mov	r7, r2
 800214e:	7e0a      	ldrb	r2, [r1, #24]
 8002150:	b085      	sub	sp, #20
 8002152:	2a6e      	cmp	r2, #110	; 0x6e
 8002154:	4698      	mov	r8, r3
 8002156:	4606      	mov	r6, r0
 8002158:	460c      	mov	r4, r1
 800215a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800215c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002160:	f000 80bc 	beq.w	80022dc <_printf_i+0x194>
 8002164:	d81a      	bhi.n	800219c <_printf_i+0x54>
 8002166:	2a63      	cmp	r2, #99	; 0x63
 8002168:	d02e      	beq.n	80021c8 <_printf_i+0x80>
 800216a:	d80a      	bhi.n	8002182 <_printf_i+0x3a>
 800216c:	2a00      	cmp	r2, #0
 800216e:	f000 80c8 	beq.w	8002302 <_printf_i+0x1ba>
 8002172:	2a58      	cmp	r2, #88	; 0x58
 8002174:	f000 808a 	beq.w	800228c <_printf_i+0x144>
 8002178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800217c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002180:	e02a      	b.n	80021d8 <_printf_i+0x90>
 8002182:	2a64      	cmp	r2, #100	; 0x64
 8002184:	d001      	beq.n	800218a <_printf_i+0x42>
 8002186:	2a69      	cmp	r2, #105	; 0x69
 8002188:	d1f6      	bne.n	8002178 <_printf_i+0x30>
 800218a:	6821      	ldr	r1, [r4, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002192:	d023      	beq.n	80021dc <_printf_i+0x94>
 8002194:	1d11      	adds	r1, r2, #4
 8002196:	6019      	str	r1, [r3, #0]
 8002198:	6813      	ldr	r3, [r2, #0]
 800219a:	e027      	b.n	80021ec <_printf_i+0xa4>
 800219c:	2a73      	cmp	r2, #115	; 0x73
 800219e:	f000 80b4 	beq.w	800230a <_printf_i+0x1c2>
 80021a2:	d808      	bhi.n	80021b6 <_printf_i+0x6e>
 80021a4:	2a6f      	cmp	r2, #111	; 0x6f
 80021a6:	d02a      	beq.n	80021fe <_printf_i+0xb6>
 80021a8:	2a70      	cmp	r2, #112	; 0x70
 80021aa:	d1e5      	bne.n	8002178 <_printf_i+0x30>
 80021ac:	680a      	ldr	r2, [r1, #0]
 80021ae:	f042 0220 	orr.w	r2, r2, #32
 80021b2:	600a      	str	r2, [r1, #0]
 80021b4:	e003      	b.n	80021be <_printf_i+0x76>
 80021b6:	2a75      	cmp	r2, #117	; 0x75
 80021b8:	d021      	beq.n	80021fe <_printf_i+0xb6>
 80021ba:	2a78      	cmp	r2, #120	; 0x78
 80021bc:	d1dc      	bne.n	8002178 <_printf_i+0x30>
 80021be:	2278      	movs	r2, #120	; 0x78
 80021c0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80021c4:	496e      	ldr	r1, [pc, #440]	; (8002380 <_printf_i+0x238>)
 80021c6:	e064      	b.n	8002292 <_printf_i+0x14a>
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80021ce:	1d11      	adds	r1, r2, #4
 80021d0:	6019      	str	r1, [r3, #0]
 80021d2:	6813      	ldr	r3, [r2, #0]
 80021d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80021d8:	2301      	movs	r3, #1
 80021da:	e0a3      	b.n	8002324 <_printf_i+0x1dc>
 80021dc:	f011 0f40 	tst.w	r1, #64	; 0x40
 80021e0:	f102 0104 	add.w	r1, r2, #4
 80021e4:	6019      	str	r1, [r3, #0]
 80021e6:	d0d7      	beq.n	8002198 <_printf_i+0x50>
 80021e8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	da03      	bge.n	80021f8 <_printf_i+0xb0>
 80021f0:	222d      	movs	r2, #45	; 0x2d
 80021f2:	425b      	negs	r3, r3
 80021f4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80021f8:	4962      	ldr	r1, [pc, #392]	; (8002384 <_printf_i+0x23c>)
 80021fa:	220a      	movs	r2, #10
 80021fc:	e017      	b.n	800222e <_printf_i+0xe6>
 80021fe:	6820      	ldr	r0, [r4, #0]
 8002200:	6819      	ldr	r1, [r3, #0]
 8002202:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002206:	d003      	beq.n	8002210 <_printf_i+0xc8>
 8002208:	1d08      	adds	r0, r1, #4
 800220a:	6018      	str	r0, [r3, #0]
 800220c:	680b      	ldr	r3, [r1, #0]
 800220e:	e006      	b.n	800221e <_printf_i+0xd6>
 8002210:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002214:	f101 0004 	add.w	r0, r1, #4
 8002218:	6018      	str	r0, [r3, #0]
 800221a:	d0f7      	beq.n	800220c <_printf_i+0xc4>
 800221c:	880b      	ldrh	r3, [r1, #0]
 800221e:	4959      	ldr	r1, [pc, #356]	; (8002384 <_printf_i+0x23c>)
 8002220:	2a6f      	cmp	r2, #111	; 0x6f
 8002222:	bf14      	ite	ne
 8002224:	220a      	movne	r2, #10
 8002226:	2208      	moveq	r2, #8
 8002228:	2000      	movs	r0, #0
 800222a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800222e:	6865      	ldr	r5, [r4, #4]
 8002230:	60a5      	str	r5, [r4, #8]
 8002232:	2d00      	cmp	r5, #0
 8002234:	f2c0 809c 	blt.w	8002370 <_printf_i+0x228>
 8002238:	6820      	ldr	r0, [r4, #0]
 800223a:	f020 0004 	bic.w	r0, r0, #4
 800223e:	6020      	str	r0, [r4, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d13f      	bne.n	80022c4 <_printf_i+0x17c>
 8002244:	2d00      	cmp	r5, #0
 8002246:	f040 8095 	bne.w	8002374 <_printf_i+0x22c>
 800224a:	4675      	mov	r5, lr
 800224c:	2a08      	cmp	r2, #8
 800224e:	d10b      	bne.n	8002268 <_printf_i+0x120>
 8002250:	6823      	ldr	r3, [r4, #0]
 8002252:	07da      	lsls	r2, r3, #31
 8002254:	d508      	bpl.n	8002268 <_printf_i+0x120>
 8002256:	6923      	ldr	r3, [r4, #16]
 8002258:	6862      	ldr	r2, [r4, #4]
 800225a:	429a      	cmp	r2, r3
 800225c:	bfde      	ittt	le
 800225e:	2330      	movle	r3, #48	; 0x30
 8002260:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002264:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002268:	ebae 0305 	sub.w	r3, lr, r5
 800226c:	6123      	str	r3, [r4, #16]
 800226e:	f8cd 8000 	str.w	r8, [sp]
 8002272:	463b      	mov	r3, r7
 8002274:	aa03      	add	r2, sp, #12
 8002276:	4621      	mov	r1, r4
 8002278:	4630      	mov	r0, r6
 800227a:	f7ff feef 	bl	800205c <_printf_common>
 800227e:	3001      	adds	r0, #1
 8002280:	d155      	bne.n	800232e <_printf_i+0x1e6>
 8002282:	f04f 30ff 	mov.w	r0, #4294967295
 8002286:	b005      	add	sp, #20
 8002288:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800228c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002290:	493c      	ldr	r1, [pc, #240]	; (8002384 <_printf_i+0x23c>)
 8002292:	6822      	ldr	r2, [r4, #0]
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	f012 0f80 	tst.w	r2, #128	; 0x80
 800229a:	f100 0504 	add.w	r5, r0, #4
 800229e:	601d      	str	r5, [r3, #0]
 80022a0:	d001      	beq.n	80022a6 <_printf_i+0x15e>
 80022a2:	6803      	ldr	r3, [r0, #0]
 80022a4:	e002      	b.n	80022ac <_printf_i+0x164>
 80022a6:	0655      	lsls	r5, r2, #25
 80022a8:	d5fb      	bpl.n	80022a2 <_printf_i+0x15a>
 80022aa:	8803      	ldrh	r3, [r0, #0]
 80022ac:	07d0      	lsls	r0, r2, #31
 80022ae:	bf44      	itt	mi
 80022b0:	f042 0220 	orrmi.w	r2, r2, #32
 80022b4:	6022      	strmi	r2, [r4, #0]
 80022b6:	b91b      	cbnz	r3, 80022c0 <_printf_i+0x178>
 80022b8:	6822      	ldr	r2, [r4, #0]
 80022ba:	f022 0220 	bic.w	r2, r2, #32
 80022be:	6022      	str	r2, [r4, #0]
 80022c0:	2210      	movs	r2, #16
 80022c2:	e7b1      	b.n	8002228 <_printf_i+0xe0>
 80022c4:	4675      	mov	r5, lr
 80022c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80022ca:	fb02 3310 	mls	r3, r2, r0, r3
 80022ce:	5ccb      	ldrb	r3, [r1, r3]
 80022d0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80022d4:	4603      	mov	r3, r0
 80022d6:	2800      	cmp	r0, #0
 80022d8:	d1f5      	bne.n	80022c6 <_printf_i+0x17e>
 80022da:	e7b7      	b.n	800224c <_printf_i+0x104>
 80022dc:	6808      	ldr	r0, [r1, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	6949      	ldr	r1, [r1, #20]
 80022e2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80022e6:	d004      	beq.n	80022f2 <_printf_i+0x1aa>
 80022e8:	1d10      	adds	r0, r2, #4
 80022ea:	6018      	str	r0, [r3, #0]
 80022ec:	6813      	ldr	r3, [r2, #0]
 80022ee:	6019      	str	r1, [r3, #0]
 80022f0:	e007      	b.n	8002302 <_printf_i+0x1ba>
 80022f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80022f6:	f102 0004 	add.w	r0, r2, #4
 80022fa:	6018      	str	r0, [r3, #0]
 80022fc:	6813      	ldr	r3, [r2, #0]
 80022fe:	d0f6      	beq.n	80022ee <_printf_i+0x1a6>
 8002300:	8019      	strh	r1, [r3, #0]
 8002302:	2300      	movs	r3, #0
 8002304:	6123      	str	r3, [r4, #16]
 8002306:	4675      	mov	r5, lr
 8002308:	e7b1      	b.n	800226e <_printf_i+0x126>
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	1d11      	adds	r1, r2, #4
 800230e:	6019      	str	r1, [r3, #0]
 8002310:	6815      	ldr	r5, [r2, #0]
 8002312:	6862      	ldr	r2, [r4, #4]
 8002314:	2100      	movs	r1, #0
 8002316:	4628      	mov	r0, r5
 8002318:	f7fd ff62 	bl	80001e0 <memchr>
 800231c:	b108      	cbz	r0, 8002322 <_printf_i+0x1da>
 800231e:	1b40      	subs	r0, r0, r5
 8002320:	6060      	str	r0, [r4, #4]
 8002322:	6863      	ldr	r3, [r4, #4]
 8002324:	6123      	str	r3, [r4, #16]
 8002326:	2300      	movs	r3, #0
 8002328:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800232c:	e79f      	b.n	800226e <_printf_i+0x126>
 800232e:	6923      	ldr	r3, [r4, #16]
 8002330:	462a      	mov	r2, r5
 8002332:	4639      	mov	r1, r7
 8002334:	4630      	mov	r0, r6
 8002336:	47c0      	blx	r8
 8002338:	3001      	adds	r0, #1
 800233a:	d0a2      	beq.n	8002282 <_printf_i+0x13a>
 800233c:	6823      	ldr	r3, [r4, #0]
 800233e:	079b      	lsls	r3, r3, #30
 8002340:	d507      	bpl.n	8002352 <_printf_i+0x20a>
 8002342:	2500      	movs	r5, #0
 8002344:	f104 0919 	add.w	r9, r4, #25
 8002348:	68e3      	ldr	r3, [r4, #12]
 800234a:	9a03      	ldr	r2, [sp, #12]
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	429d      	cmp	r5, r3
 8002350:	db05      	blt.n	800235e <_printf_i+0x216>
 8002352:	68e0      	ldr	r0, [r4, #12]
 8002354:	9b03      	ldr	r3, [sp, #12]
 8002356:	4298      	cmp	r0, r3
 8002358:	bfb8      	it	lt
 800235a:	4618      	movlt	r0, r3
 800235c:	e793      	b.n	8002286 <_printf_i+0x13e>
 800235e:	2301      	movs	r3, #1
 8002360:	464a      	mov	r2, r9
 8002362:	4639      	mov	r1, r7
 8002364:	4630      	mov	r0, r6
 8002366:	47c0      	blx	r8
 8002368:	3001      	adds	r0, #1
 800236a:	d08a      	beq.n	8002282 <_printf_i+0x13a>
 800236c:	3501      	adds	r5, #1
 800236e:	e7eb      	b.n	8002348 <_printf_i+0x200>
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1a7      	bne.n	80022c4 <_printf_i+0x17c>
 8002374:	780b      	ldrb	r3, [r1, #0]
 8002376:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800237a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800237e:	e765      	b.n	800224c <_printf_i+0x104>
 8002380:	08002a3a 	.word	0x08002a3a
 8002384:	08002a29 	.word	0x08002a29

08002388 <_sbrk_r>:
 8002388:	b538      	push	{r3, r4, r5, lr}
 800238a:	4c06      	ldr	r4, [pc, #24]	; (80023a4 <_sbrk_r+0x1c>)
 800238c:	2300      	movs	r3, #0
 800238e:	4605      	mov	r5, r0
 8002390:	4608      	mov	r0, r1
 8002392:	6023      	str	r3, [r4, #0]
 8002394:	f7ff fa7e 	bl	8001894 <_sbrk>
 8002398:	1c43      	adds	r3, r0, #1
 800239a:	d102      	bne.n	80023a2 <_sbrk_r+0x1a>
 800239c:	6823      	ldr	r3, [r4, #0]
 800239e:	b103      	cbz	r3, 80023a2 <_sbrk_r+0x1a>
 80023a0:	602b      	str	r3, [r5, #0]
 80023a2:	bd38      	pop	{r3, r4, r5, pc}
 80023a4:	20000180 	.word	0x20000180

080023a8 <__sread>:
 80023a8:	b510      	push	{r4, lr}
 80023aa:	460c      	mov	r4, r1
 80023ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023b0:	f000 fa98 	bl	80028e4 <_read_r>
 80023b4:	2800      	cmp	r0, #0
 80023b6:	bfab      	itete	ge
 80023b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80023ba:	89a3      	ldrhlt	r3, [r4, #12]
 80023bc:	181b      	addge	r3, r3, r0
 80023be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80023c2:	bfac      	ite	ge
 80023c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80023c6:	81a3      	strhlt	r3, [r4, #12]
 80023c8:	bd10      	pop	{r4, pc}

080023ca <__swrite>:
 80023ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023ce:	461f      	mov	r7, r3
 80023d0:	898b      	ldrh	r3, [r1, #12]
 80023d2:	05db      	lsls	r3, r3, #23
 80023d4:	4605      	mov	r5, r0
 80023d6:	460c      	mov	r4, r1
 80023d8:	4616      	mov	r6, r2
 80023da:	d505      	bpl.n	80023e8 <__swrite+0x1e>
 80023dc:	2302      	movs	r3, #2
 80023de:	2200      	movs	r2, #0
 80023e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023e4:	f000 f9b8 	bl	8002758 <_lseek_r>
 80023e8:	89a3      	ldrh	r3, [r4, #12]
 80023ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80023ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023f2:	81a3      	strh	r3, [r4, #12]
 80023f4:	4632      	mov	r2, r6
 80023f6:	463b      	mov	r3, r7
 80023f8:	4628      	mov	r0, r5
 80023fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80023fe:	f000 b869 	b.w	80024d4 <_write_r>

08002402 <__sseek>:
 8002402:	b510      	push	{r4, lr}
 8002404:	460c      	mov	r4, r1
 8002406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800240a:	f000 f9a5 	bl	8002758 <_lseek_r>
 800240e:	1c43      	adds	r3, r0, #1
 8002410:	89a3      	ldrh	r3, [r4, #12]
 8002412:	bf15      	itete	ne
 8002414:	6560      	strne	r0, [r4, #84]	; 0x54
 8002416:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800241a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800241e:	81a3      	strheq	r3, [r4, #12]
 8002420:	bf18      	it	ne
 8002422:	81a3      	strhne	r3, [r4, #12]
 8002424:	bd10      	pop	{r4, pc}

08002426 <__sclose>:
 8002426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800242a:	f000 b8d3 	b.w	80025d4 <_close_r>
	...

08002430 <__swbuf_r>:
 8002430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002432:	460e      	mov	r6, r1
 8002434:	4614      	mov	r4, r2
 8002436:	4605      	mov	r5, r0
 8002438:	b118      	cbz	r0, 8002442 <__swbuf_r+0x12>
 800243a:	6983      	ldr	r3, [r0, #24]
 800243c:	b90b      	cbnz	r3, 8002442 <__swbuf_r+0x12>
 800243e:	f7ff fbe5 	bl	8001c0c <__sinit>
 8002442:	4b21      	ldr	r3, [pc, #132]	; (80024c8 <__swbuf_r+0x98>)
 8002444:	429c      	cmp	r4, r3
 8002446:	d12a      	bne.n	800249e <__swbuf_r+0x6e>
 8002448:	686c      	ldr	r4, [r5, #4]
 800244a:	69a3      	ldr	r3, [r4, #24]
 800244c:	60a3      	str	r3, [r4, #8]
 800244e:	89a3      	ldrh	r3, [r4, #12]
 8002450:	071a      	lsls	r2, r3, #28
 8002452:	d52e      	bpl.n	80024b2 <__swbuf_r+0x82>
 8002454:	6923      	ldr	r3, [r4, #16]
 8002456:	b363      	cbz	r3, 80024b2 <__swbuf_r+0x82>
 8002458:	6923      	ldr	r3, [r4, #16]
 800245a:	6820      	ldr	r0, [r4, #0]
 800245c:	1ac0      	subs	r0, r0, r3
 800245e:	6963      	ldr	r3, [r4, #20]
 8002460:	b2f6      	uxtb	r6, r6
 8002462:	4298      	cmp	r0, r3
 8002464:	4637      	mov	r7, r6
 8002466:	db04      	blt.n	8002472 <__swbuf_r+0x42>
 8002468:	4621      	mov	r1, r4
 800246a:	4628      	mov	r0, r5
 800246c:	f000 f94a 	bl	8002704 <_fflush_r>
 8002470:	bb28      	cbnz	r0, 80024be <__swbuf_r+0x8e>
 8002472:	68a3      	ldr	r3, [r4, #8]
 8002474:	3b01      	subs	r3, #1
 8002476:	60a3      	str	r3, [r4, #8]
 8002478:	6823      	ldr	r3, [r4, #0]
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	6022      	str	r2, [r4, #0]
 800247e:	701e      	strb	r6, [r3, #0]
 8002480:	6963      	ldr	r3, [r4, #20]
 8002482:	3001      	adds	r0, #1
 8002484:	4298      	cmp	r0, r3
 8002486:	d004      	beq.n	8002492 <__swbuf_r+0x62>
 8002488:	89a3      	ldrh	r3, [r4, #12]
 800248a:	07db      	lsls	r3, r3, #31
 800248c:	d519      	bpl.n	80024c2 <__swbuf_r+0x92>
 800248e:	2e0a      	cmp	r6, #10
 8002490:	d117      	bne.n	80024c2 <__swbuf_r+0x92>
 8002492:	4621      	mov	r1, r4
 8002494:	4628      	mov	r0, r5
 8002496:	f000 f935 	bl	8002704 <_fflush_r>
 800249a:	b190      	cbz	r0, 80024c2 <__swbuf_r+0x92>
 800249c:	e00f      	b.n	80024be <__swbuf_r+0x8e>
 800249e:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <__swbuf_r+0x9c>)
 80024a0:	429c      	cmp	r4, r3
 80024a2:	d101      	bne.n	80024a8 <__swbuf_r+0x78>
 80024a4:	68ac      	ldr	r4, [r5, #8]
 80024a6:	e7d0      	b.n	800244a <__swbuf_r+0x1a>
 80024a8:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <__swbuf_r+0xa0>)
 80024aa:	429c      	cmp	r4, r3
 80024ac:	bf08      	it	eq
 80024ae:	68ec      	ldreq	r4, [r5, #12]
 80024b0:	e7cb      	b.n	800244a <__swbuf_r+0x1a>
 80024b2:	4621      	mov	r1, r4
 80024b4:	4628      	mov	r0, r5
 80024b6:	f000 f81f 	bl	80024f8 <__swsetup_r>
 80024ba:	2800      	cmp	r0, #0
 80024bc:	d0cc      	beq.n	8002458 <__swbuf_r+0x28>
 80024be:	f04f 37ff 	mov.w	r7, #4294967295
 80024c2:	4638      	mov	r0, r7
 80024c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024c6:	bf00      	nop
 80024c8:	080029d8 	.word	0x080029d8
 80024cc:	080029f8 	.word	0x080029f8
 80024d0:	080029b8 	.word	0x080029b8

080024d4 <_write_r>:
 80024d4:	b538      	push	{r3, r4, r5, lr}
 80024d6:	4c07      	ldr	r4, [pc, #28]	; (80024f4 <_write_r+0x20>)
 80024d8:	4605      	mov	r5, r0
 80024da:	4608      	mov	r0, r1
 80024dc:	4611      	mov	r1, r2
 80024de:	2200      	movs	r2, #0
 80024e0:	6022      	str	r2, [r4, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	f7ff f97a 	bl	80017dc <_write>
 80024e8:	1c43      	adds	r3, r0, #1
 80024ea:	d102      	bne.n	80024f2 <_write_r+0x1e>
 80024ec:	6823      	ldr	r3, [r4, #0]
 80024ee:	b103      	cbz	r3, 80024f2 <_write_r+0x1e>
 80024f0:	602b      	str	r3, [r5, #0]
 80024f2:	bd38      	pop	{r3, r4, r5, pc}
 80024f4:	20000180 	.word	0x20000180

080024f8 <__swsetup_r>:
 80024f8:	4b32      	ldr	r3, [pc, #200]	; (80025c4 <__swsetup_r+0xcc>)
 80024fa:	b570      	push	{r4, r5, r6, lr}
 80024fc:	681d      	ldr	r5, [r3, #0]
 80024fe:	4606      	mov	r6, r0
 8002500:	460c      	mov	r4, r1
 8002502:	b125      	cbz	r5, 800250e <__swsetup_r+0x16>
 8002504:	69ab      	ldr	r3, [r5, #24]
 8002506:	b913      	cbnz	r3, 800250e <__swsetup_r+0x16>
 8002508:	4628      	mov	r0, r5
 800250a:	f7ff fb7f 	bl	8001c0c <__sinit>
 800250e:	4b2e      	ldr	r3, [pc, #184]	; (80025c8 <__swsetup_r+0xd0>)
 8002510:	429c      	cmp	r4, r3
 8002512:	d10f      	bne.n	8002534 <__swsetup_r+0x3c>
 8002514:	686c      	ldr	r4, [r5, #4]
 8002516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800251a:	b29a      	uxth	r2, r3
 800251c:	0715      	lsls	r5, r2, #28
 800251e:	d42c      	bmi.n	800257a <__swsetup_r+0x82>
 8002520:	06d0      	lsls	r0, r2, #27
 8002522:	d411      	bmi.n	8002548 <__swsetup_r+0x50>
 8002524:	2209      	movs	r2, #9
 8002526:	6032      	str	r2, [r6, #0]
 8002528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800252c:	81a3      	strh	r3, [r4, #12]
 800252e:	f04f 30ff 	mov.w	r0, #4294967295
 8002532:	bd70      	pop	{r4, r5, r6, pc}
 8002534:	4b25      	ldr	r3, [pc, #148]	; (80025cc <__swsetup_r+0xd4>)
 8002536:	429c      	cmp	r4, r3
 8002538:	d101      	bne.n	800253e <__swsetup_r+0x46>
 800253a:	68ac      	ldr	r4, [r5, #8]
 800253c:	e7eb      	b.n	8002516 <__swsetup_r+0x1e>
 800253e:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <__swsetup_r+0xd8>)
 8002540:	429c      	cmp	r4, r3
 8002542:	bf08      	it	eq
 8002544:	68ec      	ldreq	r4, [r5, #12]
 8002546:	e7e6      	b.n	8002516 <__swsetup_r+0x1e>
 8002548:	0751      	lsls	r1, r2, #29
 800254a:	d512      	bpl.n	8002572 <__swsetup_r+0x7a>
 800254c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800254e:	b141      	cbz	r1, 8002562 <__swsetup_r+0x6a>
 8002550:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002554:	4299      	cmp	r1, r3
 8002556:	d002      	beq.n	800255e <__swsetup_r+0x66>
 8002558:	4630      	mov	r0, r6
 800255a:	f000 f975 	bl	8002848 <_free_r>
 800255e:	2300      	movs	r3, #0
 8002560:	6363      	str	r3, [r4, #52]	; 0x34
 8002562:	89a3      	ldrh	r3, [r4, #12]
 8002564:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002568:	81a3      	strh	r3, [r4, #12]
 800256a:	2300      	movs	r3, #0
 800256c:	6063      	str	r3, [r4, #4]
 800256e:	6923      	ldr	r3, [r4, #16]
 8002570:	6023      	str	r3, [r4, #0]
 8002572:	89a3      	ldrh	r3, [r4, #12]
 8002574:	f043 0308 	orr.w	r3, r3, #8
 8002578:	81a3      	strh	r3, [r4, #12]
 800257a:	6923      	ldr	r3, [r4, #16]
 800257c:	b94b      	cbnz	r3, 8002592 <__swsetup_r+0x9a>
 800257e:	89a3      	ldrh	r3, [r4, #12]
 8002580:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002588:	d003      	beq.n	8002592 <__swsetup_r+0x9a>
 800258a:	4621      	mov	r1, r4
 800258c:	4630      	mov	r0, r6
 800258e:	f000 f919 	bl	80027c4 <__smakebuf_r>
 8002592:	89a2      	ldrh	r2, [r4, #12]
 8002594:	f012 0301 	ands.w	r3, r2, #1
 8002598:	d00c      	beq.n	80025b4 <__swsetup_r+0xbc>
 800259a:	2300      	movs	r3, #0
 800259c:	60a3      	str	r3, [r4, #8]
 800259e:	6963      	ldr	r3, [r4, #20]
 80025a0:	425b      	negs	r3, r3
 80025a2:	61a3      	str	r3, [r4, #24]
 80025a4:	6923      	ldr	r3, [r4, #16]
 80025a6:	b953      	cbnz	r3, 80025be <__swsetup_r+0xc6>
 80025a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025ac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80025b0:	d1ba      	bne.n	8002528 <__swsetup_r+0x30>
 80025b2:	bd70      	pop	{r4, r5, r6, pc}
 80025b4:	0792      	lsls	r2, r2, #30
 80025b6:	bf58      	it	pl
 80025b8:	6963      	ldrpl	r3, [r4, #20]
 80025ba:	60a3      	str	r3, [r4, #8]
 80025bc:	e7f2      	b.n	80025a4 <__swsetup_r+0xac>
 80025be:	2000      	movs	r0, #0
 80025c0:	e7f7      	b.n	80025b2 <__swsetup_r+0xba>
 80025c2:	bf00      	nop
 80025c4:	20000010 	.word	0x20000010
 80025c8:	080029d8 	.word	0x080029d8
 80025cc:	080029f8 	.word	0x080029f8
 80025d0:	080029b8 	.word	0x080029b8

080025d4 <_close_r>:
 80025d4:	b538      	push	{r3, r4, r5, lr}
 80025d6:	4c06      	ldr	r4, [pc, #24]	; (80025f0 <_close_r+0x1c>)
 80025d8:	2300      	movs	r3, #0
 80025da:	4605      	mov	r5, r0
 80025dc:	4608      	mov	r0, r1
 80025de:	6023      	str	r3, [r4, #0]
 80025e0:	f7ff f972 	bl	80018c8 <_close>
 80025e4:	1c43      	adds	r3, r0, #1
 80025e6:	d102      	bne.n	80025ee <_close_r+0x1a>
 80025e8:	6823      	ldr	r3, [r4, #0]
 80025ea:	b103      	cbz	r3, 80025ee <_close_r+0x1a>
 80025ec:	602b      	str	r3, [r5, #0]
 80025ee:	bd38      	pop	{r3, r4, r5, pc}
 80025f0:	20000180 	.word	0x20000180

080025f4 <__sflush_r>:
 80025f4:	898a      	ldrh	r2, [r1, #12]
 80025f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025fa:	4605      	mov	r5, r0
 80025fc:	0710      	lsls	r0, r2, #28
 80025fe:	460c      	mov	r4, r1
 8002600:	d45a      	bmi.n	80026b8 <__sflush_r+0xc4>
 8002602:	684b      	ldr	r3, [r1, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	dc05      	bgt.n	8002614 <__sflush_r+0x20>
 8002608:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800260a:	2b00      	cmp	r3, #0
 800260c:	dc02      	bgt.n	8002614 <__sflush_r+0x20>
 800260e:	2000      	movs	r0, #0
 8002610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002614:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002616:	2e00      	cmp	r6, #0
 8002618:	d0f9      	beq.n	800260e <__sflush_r+0x1a>
 800261a:	2300      	movs	r3, #0
 800261c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002620:	682f      	ldr	r7, [r5, #0]
 8002622:	602b      	str	r3, [r5, #0]
 8002624:	d033      	beq.n	800268e <__sflush_r+0x9a>
 8002626:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002628:	89a3      	ldrh	r3, [r4, #12]
 800262a:	075a      	lsls	r2, r3, #29
 800262c:	d505      	bpl.n	800263a <__sflush_r+0x46>
 800262e:	6863      	ldr	r3, [r4, #4]
 8002630:	1ac0      	subs	r0, r0, r3
 8002632:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002634:	b10b      	cbz	r3, 800263a <__sflush_r+0x46>
 8002636:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002638:	1ac0      	subs	r0, r0, r3
 800263a:	2300      	movs	r3, #0
 800263c:	4602      	mov	r2, r0
 800263e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002640:	6a21      	ldr	r1, [r4, #32]
 8002642:	4628      	mov	r0, r5
 8002644:	47b0      	blx	r6
 8002646:	1c43      	adds	r3, r0, #1
 8002648:	89a3      	ldrh	r3, [r4, #12]
 800264a:	d106      	bne.n	800265a <__sflush_r+0x66>
 800264c:	6829      	ldr	r1, [r5, #0]
 800264e:	291d      	cmp	r1, #29
 8002650:	d84b      	bhi.n	80026ea <__sflush_r+0xf6>
 8002652:	4a2b      	ldr	r2, [pc, #172]	; (8002700 <__sflush_r+0x10c>)
 8002654:	40ca      	lsrs	r2, r1
 8002656:	07d6      	lsls	r6, r2, #31
 8002658:	d547      	bpl.n	80026ea <__sflush_r+0xf6>
 800265a:	2200      	movs	r2, #0
 800265c:	6062      	str	r2, [r4, #4]
 800265e:	04d9      	lsls	r1, r3, #19
 8002660:	6922      	ldr	r2, [r4, #16]
 8002662:	6022      	str	r2, [r4, #0]
 8002664:	d504      	bpl.n	8002670 <__sflush_r+0x7c>
 8002666:	1c42      	adds	r2, r0, #1
 8002668:	d101      	bne.n	800266e <__sflush_r+0x7a>
 800266a:	682b      	ldr	r3, [r5, #0]
 800266c:	b903      	cbnz	r3, 8002670 <__sflush_r+0x7c>
 800266e:	6560      	str	r0, [r4, #84]	; 0x54
 8002670:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002672:	602f      	str	r7, [r5, #0]
 8002674:	2900      	cmp	r1, #0
 8002676:	d0ca      	beq.n	800260e <__sflush_r+0x1a>
 8002678:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800267c:	4299      	cmp	r1, r3
 800267e:	d002      	beq.n	8002686 <__sflush_r+0x92>
 8002680:	4628      	mov	r0, r5
 8002682:	f000 f8e1 	bl	8002848 <_free_r>
 8002686:	2000      	movs	r0, #0
 8002688:	6360      	str	r0, [r4, #52]	; 0x34
 800268a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800268e:	6a21      	ldr	r1, [r4, #32]
 8002690:	2301      	movs	r3, #1
 8002692:	4628      	mov	r0, r5
 8002694:	47b0      	blx	r6
 8002696:	1c41      	adds	r1, r0, #1
 8002698:	d1c6      	bne.n	8002628 <__sflush_r+0x34>
 800269a:	682b      	ldr	r3, [r5, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0c3      	beq.n	8002628 <__sflush_r+0x34>
 80026a0:	2b1d      	cmp	r3, #29
 80026a2:	d001      	beq.n	80026a8 <__sflush_r+0xb4>
 80026a4:	2b16      	cmp	r3, #22
 80026a6:	d101      	bne.n	80026ac <__sflush_r+0xb8>
 80026a8:	602f      	str	r7, [r5, #0]
 80026aa:	e7b0      	b.n	800260e <__sflush_r+0x1a>
 80026ac:	89a3      	ldrh	r3, [r4, #12]
 80026ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026b2:	81a3      	strh	r3, [r4, #12]
 80026b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026b8:	690f      	ldr	r7, [r1, #16]
 80026ba:	2f00      	cmp	r7, #0
 80026bc:	d0a7      	beq.n	800260e <__sflush_r+0x1a>
 80026be:	0793      	lsls	r3, r2, #30
 80026c0:	680e      	ldr	r6, [r1, #0]
 80026c2:	bf08      	it	eq
 80026c4:	694b      	ldreq	r3, [r1, #20]
 80026c6:	600f      	str	r7, [r1, #0]
 80026c8:	bf18      	it	ne
 80026ca:	2300      	movne	r3, #0
 80026cc:	eba6 0807 	sub.w	r8, r6, r7
 80026d0:	608b      	str	r3, [r1, #8]
 80026d2:	f1b8 0f00 	cmp.w	r8, #0
 80026d6:	dd9a      	ble.n	800260e <__sflush_r+0x1a>
 80026d8:	4643      	mov	r3, r8
 80026da:	463a      	mov	r2, r7
 80026dc:	6a21      	ldr	r1, [r4, #32]
 80026de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80026e0:	4628      	mov	r0, r5
 80026e2:	47b0      	blx	r6
 80026e4:	2800      	cmp	r0, #0
 80026e6:	dc07      	bgt.n	80026f8 <__sflush_r+0x104>
 80026e8:	89a3      	ldrh	r3, [r4, #12]
 80026ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026ee:	81a3      	strh	r3, [r4, #12]
 80026f0:	f04f 30ff 	mov.w	r0, #4294967295
 80026f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026f8:	4407      	add	r7, r0
 80026fa:	eba8 0800 	sub.w	r8, r8, r0
 80026fe:	e7e8      	b.n	80026d2 <__sflush_r+0xde>
 8002700:	20400001 	.word	0x20400001

08002704 <_fflush_r>:
 8002704:	b538      	push	{r3, r4, r5, lr}
 8002706:	690b      	ldr	r3, [r1, #16]
 8002708:	4605      	mov	r5, r0
 800270a:	460c      	mov	r4, r1
 800270c:	b1db      	cbz	r3, 8002746 <_fflush_r+0x42>
 800270e:	b118      	cbz	r0, 8002718 <_fflush_r+0x14>
 8002710:	6983      	ldr	r3, [r0, #24]
 8002712:	b90b      	cbnz	r3, 8002718 <_fflush_r+0x14>
 8002714:	f7ff fa7a 	bl	8001c0c <__sinit>
 8002718:	4b0c      	ldr	r3, [pc, #48]	; (800274c <_fflush_r+0x48>)
 800271a:	429c      	cmp	r4, r3
 800271c:	d109      	bne.n	8002732 <_fflush_r+0x2e>
 800271e:	686c      	ldr	r4, [r5, #4]
 8002720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002724:	b17b      	cbz	r3, 8002746 <_fflush_r+0x42>
 8002726:	4621      	mov	r1, r4
 8002728:	4628      	mov	r0, r5
 800272a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800272e:	f7ff bf61 	b.w	80025f4 <__sflush_r>
 8002732:	4b07      	ldr	r3, [pc, #28]	; (8002750 <_fflush_r+0x4c>)
 8002734:	429c      	cmp	r4, r3
 8002736:	d101      	bne.n	800273c <_fflush_r+0x38>
 8002738:	68ac      	ldr	r4, [r5, #8]
 800273a:	e7f1      	b.n	8002720 <_fflush_r+0x1c>
 800273c:	4b05      	ldr	r3, [pc, #20]	; (8002754 <_fflush_r+0x50>)
 800273e:	429c      	cmp	r4, r3
 8002740:	bf08      	it	eq
 8002742:	68ec      	ldreq	r4, [r5, #12]
 8002744:	e7ec      	b.n	8002720 <_fflush_r+0x1c>
 8002746:	2000      	movs	r0, #0
 8002748:	bd38      	pop	{r3, r4, r5, pc}
 800274a:	bf00      	nop
 800274c:	080029d8 	.word	0x080029d8
 8002750:	080029f8 	.word	0x080029f8
 8002754:	080029b8 	.word	0x080029b8

08002758 <_lseek_r>:
 8002758:	b538      	push	{r3, r4, r5, lr}
 800275a:	4c07      	ldr	r4, [pc, #28]	; (8002778 <_lseek_r+0x20>)
 800275c:	4605      	mov	r5, r0
 800275e:	4608      	mov	r0, r1
 8002760:	4611      	mov	r1, r2
 8002762:	2200      	movs	r2, #0
 8002764:	6022      	str	r2, [r4, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	f7ff f8b8 	bl	80018dc <_lseek>
 800276c:	1c43      	adds	r3, r0, #1
 800276e:	d102      	bne.n	8002776 <_lseek_r+0x1e>
 8002770:	6823      	ldr	r3, [r4, #0]
 8002772:	b103      	cbz	r3, 8002776 <_lseek_r+0x1e>
 8002774:	602b      	str	r3, [r5, #0]
 8002776:	bd38      	pop	{r3, r4, r5, pc}
 8002778:	20000180 	.word	0x20000180

0800277c <__swhatbuf_r>:
 800277c:	b570      	push	{r4, r5, r6, lr}
 800277e:	460e      	mov	r6, r1
 8002780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002784:	2900      	cmp	r1, #0
 8002786:	b090      	sub	sp, #64	; 0x40
 8002788:	4614      	mov	r4, r2
 800278a:	461d      	mov	r5, r3
 800278c:	da07      	bge.n	800279e <__swhatbuf_r+0x22>
 800278e:	2300      	movs	r3, #0
 8002790:	602b      	str	r3, [r5, #0]
 8002792:	89b3      	ldrh	r3, [r6, #12]
 8002794:	061a      	lsls	r2, r3, #24
 8002796:	d410      	bmi.n	80027ba <__swhatbuf_r+0x3e>
 8002798:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800279c:	e00e      	b.n	80027bc <__swhatbuf_r+0x40>
 800279e:	aa01      	add	r2, sp, #4
 80027a0:	f000 f8b2 	bl	8002908 <_fstat_r>
 80027a4:	2800      	cmp	r0, #0
 80027a6:	dbf2      	blt.n	800278e <__swhatbuf_r+0x12>
 80027a8:	9a02      	ldr	r2, [sp, #8]
 80027aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80027ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80027b2:	425a      	negs	r2, r3
 80027b4:	415a      	adcs	r2, r3
 80027b6:	602a      	str	r2, [r5, #0]
 80027b8:	e7ee      	b.n	8002798 <__swhatbuf_r+0x1c>
 80027ba:	2340      	movs	r3, #64	; 0x40
 80027bc:	2000      	movs	r0, #0
 80027be:	6023      	str	r3, [r4, #0]
 80027c0:	b010      	add	sp, #64	; 0x40
 80027c2:	bd70      	pop	{r4, r5, r6, pc}

080027c4 <__smakebuf_r>:
 80027c4:	898b      	ldrh	r3, [r1, #12]
 80027c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80027c8:	079d      	lsls	r5, r3, #30
 80027ca:	4606      	mov	r6, r0
 80027cc:	460c      	mov	r4, r1
 80027ce:	d507      	bpl.n	80027e0 <__smakebuf_r+0x1c>
 80027d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80027d4:	6023      	str	r3, [r4, #0]
 80027d6:	6123      	str	r3, [r4, #16]
 80027d8:	2301      	movs	r3, #1
 80027da:	6163      	str	r3, [r4, #20]
 80027dc:	b002      	add	sp, #8
 80027de:	bd70      	pop	{r4, r5, r6, pc}
 80027e0:	ab01      	add	r3, sp, #4
 80027e2:	466a      	mov	r2, sp
 80027e4:	f7ff ffca 	bl	800277c <__swhatbuf_r>
 80027e8:	9900      	ldr	r1, [sp, #0]
 80027ea:	4605      	mov	r5, r0
 80027ec:	4630      	mov	r0, r6
 80027ee:	f7ff fa97 	bl	8001d20 <_malloc_r>
 80027f2:	b948      	cbnz	r0, 8002808 <__smakebuf_r+0x44>
 80027f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027f8:	059a      	lsls	r2, r3, #22
 80027fa:	d4ef      	bmi.n	80027dc <__smakebuf_r+0x18>
 80027fc:	f023 0303 	bic.w	r3, r3, #3
 8002800:	f043 0302 	orr.w	r3, r3, #2
 8002804:	81a3      	strh	r3, [r4, #12]
 8002806:	e7e3      	b.n	80027d0 <__smakebuf_r+0xc>
 8002808:	4b0d      	ldr	r3, [pc, #52]	; (8002840 <__smakebuf_r+0x7c>)
 800280a:	62b3      	str	r3, [r6, #40]	; 0x28
 800280c:	89a3      	ldrh	r3, [r4, #12]
 800280e:	6020      	str	r0, [r4, #0]
 8002810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002814:	81a3      	strh	r3, [r4, #12]
 8002816:	9b00      	ldr	r3, [sp, #0]
 8002818:	6163      	str	r3, [r4, #20]
 800281a:	9b01      	ldr	r3, [sp, #4]
 800281c:	6120      	str	r0, [r4, #16]
 800281e:	b15b      	cbz	r3, 8002838 <__smakebuf_r+0x74>
 8002820:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002824:	4630      	mov	r0, r6
 8002826:	f000 f881 	bl	800292c <_isatty_r>
 800282a:	b128      	cbz	r0, 8002838 <__smakebuf_r+0x74>
 800282c:	89a3      	ldrh	r3, [r4, #12]
 800282e:	f023 0303 	bic.w	r3, r3, #3
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	81a3      	strh	r3, [r4, #12]
 8002838:	89a3      	ldrh	r3, [r4, #12]
 800283a:	431d      	orrs	r5, r3
 800283c:	81a5      	strh	r5, [r4, #12]
 800283e:	e7cd      	b.n	80027dc <__smakebuf_r+0x18>
 8002840:	08001b8d 	.word	0x08001b8d

08002844 <__malloc_lock>:
 8002844:	4770      	bx	lr

08002846 <__malloc_unlock>:
 8002846:	4770      	bx	lr

08002848 <_free_r>:
 8002848:	b538      	push	{r3, r4, r5, lr}
 800284a:	4605      	mov	r5, r0
 800284c:	2900      	cmp	r1, #0
 800284e:	d045      	beq.n	80028dc <_free_r+0x94>
 8002850:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002854:	1f0c      	subs	r4, r1, #4
 8002856:	2b00      	cmp	r3, #0
 8002858:	bfb8      	it	lt
 800285a:	18e4      	addlt	r4, r4, r3
 800285c:	f7ff fff2 	bl	8002844 <__malloc_lock>
 8002860:	4a1f      	ldr	r2, [pc, #124]	; (80028e0 <_free_r+0x98>)
 8002862:	6813      	ldr	r3, [r2, #0]
 8002864:	4610      	mov	r0, r2
 8002866:	b933      	cbnz	r3, 8002876 <_free_r+0x2e>
 8002868:	6063      	str	r3, [r4, #4]
 800286a:	6014      	str	r4, [r2, #0]
 800286c:	4628      	mov	r0, r5
 800286e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002872:	f7ff bfe8 	b.w	8002846 <__malloc_unlock>
 8002876:	42a3      	cmp	r3, r4
 8002878:	d90c      	bls.n	8002894 <_free_r+0x4c>
 800287a:	6821      	ldr	r1, [r4, #0]
 800287c:	1862      	adds	r2, r4, r1
 800287e:	4293      	cmp	r3, r2
 8002880:	bf04      	itt	eq
 8002882:	681a      	ldreq	r2, [r3, #0]
 8002884:	685b      	ldreq	r3, [r3, #4]
 8002886:	6063      	str	r3, [r4, #4]
 8002888:	bf04      	itt	eq
 800288a:	1852      	addeq	r2, r2, r1
 800288c:	6022      	streq	r2, [r4, #0]
 800288e:	6004      	str	r4, [r0, #0]
 8002890:	e7ec      	b.n	800286c <_free_r+0x24>
 8002892:	4613      	mov	r3, r2
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	b10a      	cbz	r2, 800289c <_free_r+0x54>
 8002898:	42a2      	cmp	r2, r4
 800289a:	d9fa      	bls.n	8002892 <_free_r+0x4a>
 800289c:	6819      	ldr	r1, [r3, #0]
 800289e:	1858      	adds	r0, r3, r1
 80028a0:	42a0      	cmp	r0, r4
 80028a2:	d10b      	bne.n	80028bc <_free_r+0x74>
 80028a4:	6820      	ldr	r0, [r4, #0]
 80028a6:	4401      	add	r1, r0
 80028a8:	1858      	adds	r0, r3, r1
 80028aa:	4282      	cmp	r2, r0
 80028ac:	6019      	str	r1, [r3, #0]
 80028ae:	d1dd      	bne.n	800286c <_free_r+0x24>
 80028b0:	6810      	ldr	r0, [r2, #0]
 80028b2:	6852      	ldr	r2, [r2, #4]
 80028b4:	605a      	str	r2, [r3, #4]
 80028b6:	4401      	add	r1, r0
 80028b8:	6019      	str	r1, [r3, #0]
 80028ba:	e7d7      	b.n	800286c <_free_r+0x24>
 80028bc:	d902      	bls.n	80028c4 <_free_r+0x7c>
 80028be:	230c      	movs	r3, #12
 80028c0:	602b      	str	r3, [r5, #0]
 80028c2:	e7d3      	b.n	800286c <_free_r+0x24>
 80028c4:	6820      	ldr	r0, [r4, #0]
 80028c6:	1821      	adds	r1, r4, r0
 80028c8:	428a      	cmp	r2, r1
 80028ca:	bf04      	itt	eq
 80028cc:	6811      	ldreq	r1, [r2, #0]
 80028ce:	6852      	ldreq	r2, [r2, #4]
 80028d0:	6062      	str	r2, [r4, #4]
 80028d2:	bf04      	itt	eq
 80028d4:	1809      	addeq	r1, r1, r0
 80028d6:	6021      	streq	r1, [r4, #0]
 80028d8:	605c      	str	r4, [r3, #4]
 80028da:	e7c7      	b.n	800286c <_free_r+0x24>
 80028dc:	bd38      	pop	{r3, r4, r5, pc}
 80028de:	bf00      	nop
 80028e0:	20000094 	.word	0x20000094

080028e4 <_read_r>:
 80028e4:	b538      	push	{r3, r4, r5, lr}
 80028e6:	4c07      	ldr	r4, [pc, #28]	; (8002904 <_read_r+0x20>)
 80028e8:	4605      	mov	r5, r0
 80028ea:	4608      	mov	r0, r1
 80028ec:	4611      	mov	r1, r2
 80028ee:	2200      	movs	r2, #0
 80028f0:	6022      	str	r2, [r4, #0]
 80028f2:	461a      	mov	r2, r3
 80028f4:	f7fe ffc0 	bl	8001878 <_read>
 80028f8:	1c43      	adds	r3, r0, #1
 80028fa:	d102      	bne.n	8002902 <_read_r+0x1e>
 80028fc:	6823      	ldr	r3, [r4, #0]
 80028fe:	b103      	cbz	r3, 8002902 <_read_r+0x1e>
 8002900:	602b      	str	r3, [r5, #0]
 8002902:	bd38      	pop	{r3, r4, r5, pc}
 8002904:	20000180 	.word	0x20000180

08002908 <_fstat_r>:
 8002908:	b538      	push	{r3, r4, r5, lr}
 800290a:	4c07      	ldr	r4, [pc, #28]	; (8002928 <_fstat_r+0x20>)
 800290c:	2300      	movs	r3, #0
 800290e:	4605      	mov	r5, r0
 8002910:	4608      	mov	r0, r1
 8002912:	4611      	mov	r1, r2
 8002914:	6023      	str	r3, [r4, #0]
 8002916:	f7fe ffda 	bl	80018ce <_fstat>
 800291a:	1c43      	adds	r3, r0, #1
 800291c:	d102      	bne.n	8002924 <_fstat_r+0x1c>
 800291e:	6823      	ldr	r3, [r4, #0]
 8002920:	b103      	cbz	r3, 8002924 <_fstat_r+0x1c>
 8002922:	602b      	str	r3, [r5, #0]
 8002924:	bd38      	pop	{r3, r4, r5, pc}
 8002926:	bf00      	nop
 8002928:	20000180 	.word	0x20000180

0800292c <_isatty_r>:
 800292c:	b538      	push	{r3, r4, r5, lr}
 800292e:	4c06      	ldr	r4, [pc, #24]	; (8002948 <_isatty_r+0x1c>)
 8002930:	2300      	movs	r3, #0
 8002932:	4605      	mov	r5, r0
 8002934:	4608      	mov	r0, r1
 8002936:	6023      	str	r3, [r4, #0]
 8002938:	f7fe ffce 	bl	80018d8 <_isatty>
 800293c:	1c43      	adds	r3, r0, #1
 800293e:	d102      	bne.n	8002946 <_isatty_r+0x1a>
 8002940:	6823      	ldr	r3, [r4, #0]
 8002942:	b103      	cbz	r3, 8002946 <_isatty_r+0x1a>
 8002944:	602b      	str	r3, [r5, #0]
 8002946:	bd38      	pop	{r3, r4, r5, pc}
 8002948:	20000180 	.word	0x20000180

0800294c <_init>:
 800294c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800294e:	bf00      	nop
 8002950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002952:	bc08      	pop	{r3}
 8002954:	469e      	mov	lr, r3
 8002956:	4770      	bx	lr

08002958 <_fini>:
 8002958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800295a:	bf00      	nop
 800295c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800295e:	bc08      	pop	{r3}
 8002960:	469e      	mov	lr, r3
 8002962:	4770      	bx	lr
