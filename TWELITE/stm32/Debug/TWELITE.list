
TWELITE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bc4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001d58  08001d58  00011d58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001d98  08001d98  00011d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001da0  08001da0  00011da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001da4  08001da4  00011da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000104  2000000c  08001db4  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000110  08001db4  00020110  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000980b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001dca  00000000  00000000  00029847  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002a39  00000000  00000000  0002b611  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000610  00000000  00000000  0002e050  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000768  00000000  00000000  0002e660  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000036c9  00000000  00000000  0002edc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000260c  00000000  00000000  00032491  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00034a9d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000f04  00000000  00000000  00034b1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001d40 	.word	0x08001d40

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08001d40 	.word	0x08001d40

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b97a 	b.w	80004e0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	468c      	mov	ip, r1
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	9e08      	ldr	r6, [sp, #32]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d151      	bne.n	80002b8 <__udivmoddi4+0xb4>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d96d      	bls.n	80002f6 <__udivmoddi4+0xf2>
 800021a:	fab2 fe82 	clz	lr, r2
 800021e:	f1be 0f00 	cmp.w	lr, #0
 8000222:	d00b      	beq.n	800023c <__udivmoddi4+0x38>
 8000224:	f1ce 0c20 	rsb	ip, lr, #32
 8000228:	fa01 f50e 	lsl.w	r5, r1, lr
 800022c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000230:	fa02 f70e 	lsl.w	r7, r2, lr
 8000234:	ea4c 0c05 	orr.w	ip, ip, r5
 8000238:	fa00 f40e 	lsl.w	r4, r0, lr
 800023c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000240:	0c25      	lsrs	r5, r4, #16
 8000242:	fbbc f8fa 	udiv	r8, ip, sl
 8000246:	fa1f f987 	uxth.w	r9, r7
 800024a:	fb0a cc18 	mls	ip, sl, r8, ip
 800024e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000252:	fb08 f309 	mul.w	r3, r8, r9
 8000256:	42ab      	cmp	r3, r5
 8000258:	d90a      	bls.n	8000270 <__udivmoddi4+0x6c>
 800025a:	19ed      	adds	r5, r5, r7
 800025c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000260:	f080 8123 	bcs.w	80004aa <__udivmoddi4+0x2a6>
 8000264:	42ab      	cmp	r3, r5
 8000266:	f240 8120 	bls.w	80004aa <__udivmoddi4+0x2a6>
 800026a:	f1a8 0802 	sub.w	r8, r8, #2
 800026e:	443d      	add	r5, r7
 8000270:	1aed      	subs	r5, r5, r3
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb5 f0fa 	udiv	r0, r5, sl
 8000278:	fb0a 5510 	mls	r5, sl, r0, r5
 800027c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000280:	fb00 f909 	mul.w	r9, r0, r9
 8000284:	45a1      	cmp	r9, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x98>
 8000288:	19e4      	adds	r4, r4, r7
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 810a 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 8000292:	45a1      	cmp	r9, r4
 8000294:	f240 8107 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	eba4 0409 	sub.w	r4, r4, r9
 80002a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a4:	2100      	movs	r1, #0
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	d061      	beq.n	800036e <__udivmoddi4+0x16a>
 80002aa:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ae:	2300      	movs	r3, #0
 80002b0:	6034      	str	r4, [r6, #0]
 80002b2:	6073      	str	r3, [r6, #4]
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d907      	bls.n	80002cc <__udivmoddi4+0xc8>
 80002bc:	2e00      	cmp	r6, #0
 80002be:	d054      	beq.n	800036a <__udivmoddi4+0x166>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	f040 808e 	bne.w	80003f2 <__udivmoddi4+0x1ee>
 80002d6:	42ab      	cmp	r3, r5
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xdc>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2d0>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb65 0503 	sbc.w	r5, r5, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	46ac      	mov	ip, r5
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d03f      	beq.n	800036e <__udivmoddi4+0x16a>
 80002ee:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b912      	cbnz	r2, 80002fe <__udivmoddi4+0xfa>
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fe:	fab7 fe87 	clz	lr, r7
 8000302:	f1be 0f00 	cmp.w	lr, #0
 8000306:	d134      	bne.n	8000372 <__udivmoddi4+0x16e>
 8000308:	1beb      	subs	r3, r5, r7
 800030a:	0c3a      	lsrs	r2, r7, #16
 800030c:	fa1f fc87 	uxth.w	ip, r7
 8000310:	2101      	movs	r1, #1
 8000312:	fbb3 f8f2 	udiv	r8, r3, r2
 8000316:	0c25      	lsrs	r5, r4, #16
 8000318:	fb02 3318 	mls	r3, r2, r8, r3
 800031c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000320:	fb0c f308 	mul.w	r3, ip, r8
 8000324:	42ab      	cmp	r3, r5
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x134>
 8000328:	19ed      	adds	r5, r5, r7
 800032a:	f108 30ff 	add.w	r0, r8, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x132>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f200 80d1 	bhi.w	80004d8 <__udivmoddi4+0x2d4>
 8000336:	4680      	mov	r8, r0
 8000338:	1aed      	subs	r5, r5, r3
 800033a:	b2a3      	uxth	r3, r4
 800033c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000340:	fb02 5510 	mls	r5, r2, r0, r5
 8000344:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000348:	fb0c fc00 	mul.w	ip, ip, r0
 800034c:	45a4      	cmp	ip, r4
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x15c>
 8000350:	19e4      	adds	r4, r4, r7
 8000352:	f100 33ff 	add.w	r3, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x15a>
 8000358:	45a4      	cmp	ip, r4
 800035a:	f200 80b8 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 800035e:	4618      	mov	r0, r3
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000368:	e79d      	b.n	80002a6 <__udivmoddi4+0xa2>
 800036a:	4631      	mov	r1, r6
 800036c:	4630      	mov	r0, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	f1ce 0420 	rsb	r4, lr, #32
 8000376:	fa05 f30e 	lsl.w	r3, r5, lr
 800037a:	fa07 f70e 	lsl.w	r7, r7, lr
 800037e:	fa20 f804 	lsr.w	r8, r0, r4
 8000382:	0c3a      	lsrs	r2, r7, #16
 8000384:	fa25 f404 	lsr.w	r4, r5, r4
 8000388:	ea48 0803 	orr.w	r8, r8, r3
 800038c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000390:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000394:	fb02 4411 	mls	r4, r2, r1, r4
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a0:	fb01 f30c 	mul.w	r3, r1, ip
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1bc>
 80003ac:	19ed      	adds	r5, r5, r7
 80003ae:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b2:	f080 808a 	bcs.w	80004ca <__udivmoddi4+0x2c6>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	f240 8087 	bls.w	80004ca <__udivmoddi4+0x2c6>
 80003bc:	3902      	subs	r1, #2
 80003be:	443d      	add	r5, r7
 80003c0:	1aeb      	subs	r3, r5, r3
 80003c2:	fa1f f588 	uxth.w	r5, r8
 80003c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ca:	fb02 3310 	mls	r3, r2, r0, r3
 80003ce:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d2:	fb00 f30c 	mul.w	r3, r0, ip
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1e6>
 80003da:	19ed      	adds	r5, r5, r7
 80003dc:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e0:	d26f      	bcs.n	80004c2 <__udivmoddi4+0x2be>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d96d      	bls.n	80004c2 <__udivmoddi4+0x2be>
 80003e6:	3802      	subs	r0, #2
 80003e8:	443d      	add	r5, r7
 80003ea:	1aeb      	subs	r3, r5, r3
 80003ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f0:	e78f      	b.n	8000312 <__udivmoddi4+0x10e>
 80003f2:	f1c1 0720 	rsb	r7, r1, #32
 80003f6:	fa22 f807 	lsr.w	r8, r2, r7
 80003fa:	408b      	lsls	r3, r1
 80003fc:	fa05 f401 	lsl.w	r4, r5, r1
 8000400:	ea48 0303 	orr.w	r3, r8, r3
 8000404:	fa20 fe07 	lsr.w	lr, r0, r7
 8000408:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800040c:	40fd      	lsrs	r5, r7
 800040e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000412:	fbb5 f9fc 	udiv	r9, r5, ip
 8000416:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041a:	fb0c 5519 	mls	r5, ip, r9, r5
 800041e:	fa1f f883 	uxth.w	r8, r3
 8000422:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000426:	fb09 f408 	mul.w	r4, r9, r8
 800042a:	42ac      	cmp	r4, r5
 800042c:	fa02 f201 	lsl.w	r2, r2, r1
 8000430:	fa00 fa01 	lsl.w	sl, r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x244>
 8000436:	18ed      	adds	r5, r5, r3
 8000438:	f109 30ff 	add.w	r0, r9, #4294967295
 800043c:	d243      	bcs.n	80004c6 <__udivmoddi4+0x2c2>
 800043e:	42ac      	cmp	r4, r5
 8000440:	d941      	bls.n	80004c6 <__udivmoddi4+0x2c2>
 8000442:	f1a9 0902 	sub.w	r9, r9, #2
 8000446:	441d      	add	r5, r3
 8000448:	1b2d      	subs	r5, r5, r4
 800044a:	fa1f fe8e 	uxth.w	lr, lr
 800044e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000452:	fb0c 5510 	mls	r5, ip, r0, r5
 8000456:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045a:	fb00 f808 	mul.w	r8, r0, r8
 800045e:	45a0      	cmp	r8, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x26e>
 8000462:	18e4      	adds	r4, r4, r3
 8000464:	f100 35ff 	add.w	r5, r0, #4294967295
 8000468:	d229      	bcs.n	80004be <__udivmoddi4+0x2ba>
 800046a:	45a0      	cmp	r8, r4
 800046c:	d927      	bls.n	80004be <__udivmoddi4+0x2ba>
 800046e:	3802      	subs	r0, #2
 8000470:	441c      	add	r4, r3
 8000472:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000476:	eba4 0408 	sub.w	r4, r4, r8
 800047a:	fba0 8902 	umull	r8, r9, r0, r2
 800047e:	454c      	cmp	r4, r9
 8000480:	46c6      	mov	lr, r8
 8000482:	464d      	mov	r5, r9
 8000484:	d315      	bcc.n	80004b2 <__udivmoddi4+0x2ae>
 8000486:	d012      	beq.n	80004ae <__udivmoddi4+0x2aa>
 8000488:	b156      	cbz	r6, 80004a0 <__udivmoddi4+0x29c>
 800048a:	ebba 030e 	subs.w	r3, sl, lr
 800048e:	eb64 0405 	sbc.w	r4, r4, r5
 8000492:	fa04 f707 	lsl.w	r7, r4, r7
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431f      	orrs	r7, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	6037      	str	r7, [r6, #0]
 800049e:	6074      	str	r4, [r6, #4]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	4618      	mov	r0, r3
 80004a8:	e6f8      	b.n	800029c <__udivmoddi4+0x98>
 80004aa:	4690      	mov	r8, r2
 80004ac:	e6e0      	b.n	8000270 <__udivmoddi4+0x6c>
 80004ae:	45c2      	cmp	sl, r8
 80004b0:	d2ea      	bcs.n	8000488 <__udivmoddi4+0x284>
 80004b2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ba:	3801      	subs	r0, #1
 80004bc:	e7e4      	b.n	8000488 <__udivmoddi4+0x284>
 80004be:	4628      	mov	r0, r5
 80004c0:	e7d7      	b.n	8000472 <__udivmoddi4+0x26e>
 80004c2:	4640      	mov	r0, r8
 80004c4:	e791      	b.n	80003ea <__udivmoddi4+0x1e6>
 80004c6:	4681      	mov	r9, r0
 80004c8:	e7be      	b.n	8000448 <__udivmoddi4+0x244>
 80004ca:	4601      	mov	r1, r0
 80004cc:	e778      	b.n	80003c0 <__udivmoddi4+0x1bc>
 80004ce:	3802      	subs	r0, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	e745      	b.n	8000360 <__udivmoddi4+0x15c>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xe6>
 80004d8:	f1a8 0802 	sub.w	r8, r8, #2
 80004dc:	443d      	add	r5, r7
 80004de:	e72b      	b.n	8000338 <__udivmoddi4+0x134>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e6:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <HAL_InitTick+0x3c>)
 80004e8:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <HAL_InitTick+0x40>)
{
 80004ea:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004ec:	7818      	ldrb	r0, [r3, #0]
 80004ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f2:	fbb3 f3f0 	udiv	r3, r3, r0
 80004f6:	6810      	ldr	r0, [r2, #0]
 80004f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80004fc:	f000 f8aa 	bl	8000654 <HAL_SYSTICK_Config>
 8000500:	4604      	mov	r4, r0
 8000502:	b958      	cbnz	r0, 800051c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000504:	2d0f      	cmp	r5, #15
 8000506:	d809      	bhi.n	800051c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000508:	4602      	mov	r2, r0
 800050a:	4629      	mov	r1, r5
 800050c:	f04f 30ff 	mov.w	r0, #4294967295
 8000510:	f000 f85e 	bl	80005d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000514:	4b04      	ldr	r3, [pc, #16]	; (8000528 <HAL_InitTick+0x44>)
 8000516:	4620      	mov	r0, r4
 8000518:	601d      	str	r5, [r3, #0]
 800051a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800051c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800051e:	bd38      	pop	{r3, r4, r5, pc}
 8000520:	20000008 	.word	0x20000008
 8000524:	20000000 	.word	0x20000000
 8000528:	20000004 	.word	0x20000004

0800052c <HAL_Init>:
{
 800052c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800052e:	4b0b      	ldr	r3, [pc, #44]	; (800055c <HAL_Init+0x30>)
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000536:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800053e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000546:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000548:	2003      	movs	r0, #3
 800054a:	f000 f82f 	bl	80005ac <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800054e:	2000      	movs	r0, #0
 8000550:	f7ff ffc8 	bl	80004e4 <HAL_InitTick>
  HAL_MspInit();
 8000554:	f001 fa12 	bl	800197c <HAL_MspInit>
}
 8000558:	2000      	movs	r0, #0
 800055a:	bd08      	pop	{r3, pc}
 800055c:	40023c00 	.word	0x40023c00

08000560 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000560:	4a03      	ldr	r2, [pc, #12]	; (8000570 <HAL_IncTick+0x10>)
 8000562:	4b04      	ldr	r3, [pc, #16]	; (8000574 <HAL_IncTick+0x14>)
 8000564:	6811      	ldr	r1, [r2, #0]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	440b      	add	r3, r1
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	2000002c 	.word	0x2000002c
 8000574:	20000000 	.word	0x20000000

08000578 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000578:	4b01      	ldr	r3, [pc, #4]	; (8000580 <HAL_GetTick+0x8>)
 800057a:	6818      	ldr	r0, [r3, #0]
}
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	2000002c 	.word	0x2000002c

08000584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000584:	b538      	push	{r3, r4, r5, lr}
 8000586:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000588:	f7ff fff6 	bl	8000578 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800058c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800058e:	bf1c      	itt	ne
 8000590:	4b05      	ldrne	r3, [pc, #20]	; (80005a8 <HAL_Delay+0x24>)
 8000592:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000594:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000596:	bf18      	it	ne
 8000598:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800059a:	f7ff ffed 	bl	8000578 <HAL_GetTick>
 800059e:	1b40      	subs	r0, r0, r5
 80005a0:	4284      	cmp	r4, r0
 80005a2:	d8fa      	bhi.n	800059a <HAL_Delay+0x16>
  {
  }
}
 80005a4:	bd38      	pop	{r3, r4, r5, pc}
 80005a6:	bf00      	nop
 80005a8:	20000000 	.word	0x20000000

080005ac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005ac:	4a07      	ldr	r2, [pc, #28]	; (80005cc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005ae:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005b4:	041b      	lsls	r3, r3, #16
 80005b6:	0c1b      	lsrs	r3, r3, #16
 80005b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005bc:	0200      	lsls	r0, r0, #8
 80005be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005c6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005c8:	60d3      	str	r3, [r2, #12]
 80005ca:	4770      	bx	lr
 80005cc:	e000ed00 	.word	0xe000ed00

080005d0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005d0:	4b17      	ldr	r3, [pc, #92]	; (8000630 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005d2:	b530      	push	{r4, r5, lr}
 80005d4:	68dc      	ldr	r4, [r3, #12]
 80005d6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005da:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005de:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e0:	2b04      	cmp	r3, #4
 80005e2:	bf28      	it	cs
 80005e4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e8:	f04f 0501 	mov.w	r5, #1
 80005ec:	fa05 f303 	lsl.w	r3, r5, r3
 80005f0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f4:	bf8c      	ite	hi
 80005f6:	3c03      	subhi	r4, #3
 80005f8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fa:	4019      	ands	r1, r3
 80005fc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005fe:	fa05 f404 	lsl.w	r4, r5, r4
 8000602:	3c01      	subs	r4, #1
 8000604:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000606:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000608:	ea42 0201 	orr.w	r2, r2, r1
 800060c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000610:	bfad      	iteet	ge
 8000612:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000616:	f000 000f 	andlt.w	r0, r0, #15
 800061a:	4b06      	ldrlt	r3, [pc, #24]	; (8000634 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000620:	bfb5      	itete	lt
 8000622:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000624:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000626:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000628:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800062c:	bd30      	pop	{r4, r5, pc}
 800062e:	bf00      	nop
 8000630:	e000ed00 	.word	0xe000ed00
 8000634:	e000ed14 	.word	0xe000ed14

08000638 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000638:	2800      	cmp	r0, #0
 800063a:	db08      	blt.n	800064e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800063c:	0942      	lsrs	r2, r0, #5
 800063e:	2301      	movs	r3, #1
 8000640:	f000 001f 	and.w	r0, r0, #31
 8000644:	fa03 f000 	lsl.w	r0, r3, r0
 8000648:	4b01      	ldr	r3, [pc, #4]	; (8000650 <HAL_NVIC_EnableIRQ+0x18>)
 800064a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800064e:	4770      	bx	lr
 8000650:	e000e100 	.word	0xe000e100

08000654 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000654:	3801      	subs	r0, #1
 8000656:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800065a:	d20a      	bcs.n	8000672 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065e:	4a07      	ldr	r2, [pc, #28]	; (800067c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000660:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000662:	21f0      	movs	r1, #240	; 0xf0
 8000664:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000668:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800066c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000672:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	e000e010 	.word	0xe000e010
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000680:	6803      	ldr	r3, [r0, #0]
 8000682:	b2da      	uxtb	r2, r3
 8000684:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000688:	f023 0303 	bic.w	r3, r3, #3
 800068c:	2118      	movs	r1, #24
 800068e:	3a10      	subs	r2, #16
 8000690:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000694:	4904      	ldr	r1, [pc, #16]	; (80006a8 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000696:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000698:	bf88      	it	hi
 800069a:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800069c:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800069e:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80006a0:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 80006a2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	08001d72 	.word	0x08001d72

080006ac <HAL_DMA_Init>:
{
 80006ac:	b570      	push	{r4, r5, r6, lr}
 80006ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80006b0:	f7ff ff62 	bl	8000578 <HAL_GetTick>
 80006b4:	4605      	mov	r5, r0
  if(hdma == NULL)
 80006b6:	2c00      	cmp	r4, #0
 80006b8:	d071      	beq.n	800079e <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80006ba:	2300      	movs	r3, #0
 80006bc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80006c0:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80006c2:	2302      	movs	r3, #2
 80006c4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80006c8:	6813      	ldr	r3, [r2, #0]
 80006ca:	f023 0301 	bic.w	r3, r3, #1
 80006ce:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80006d0:	6821      	ldr	r1, [r4, #0]
 80006d2:	680b      	ldr	r3, [r1, #0]
 80006d4:	07d8      	lsls	r0, r3, #31
 80006d6:	d43c      	bmi.n	8000752 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 80006d8:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80006da:	4d32      	ldr	r5, [pc, #200]	; (80007a4 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80006dc:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80006de:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80006e0:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80006e2:	68a3      	ldr	r3, [r4, #8]
 80006e4:	4313      	orrs	r3, r2
 80006e6:	68e2      	ldr	r2, [r4, #12]
 80006e8:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80006ea:	6922      	ldr	r2, [r4, #16]
 80006ec:	4313      	orrs	r3, r2
 80006ee:	6962      	ldr	r2, [r4, #20]
 80006f0:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80006f2:	69e2      	ldr	r2, [r4, #28]
 80006f4:	4303      	orrs	r3, r0
 80006f6:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80006f8:	6a22      	ldr	r2, [r4, #32]
 80006fa:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80006fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80006fe:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000700:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000704:	bf01      	itttt	eq
 8000706:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8000708:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 800070a:	4335      	orreq	r5, r6
 800070c:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 800070e:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000710:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000712:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000714:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000718:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800071c:	d10b      	bne.n	8000736 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 800071e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000720:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000722:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000724:	b13d      	cbz	r5, 8000736 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000726:	b9f8      	cbnz	r0, 8000768 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8000728:	2a01      	cmp	r2, #1
 800072a:	d02d      	beq.n	8000788 <HAL_DMA_Init+0xdc>
 800072c:	d301      	bcc.n	8000732 <HAL_DMA_Init+0x86>
 800072e:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000730:	d101      	bne.n	8000736 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000732:	01ea      	lsls	r2, r5, #7
 8000734:	d42b      	bmi.n	800078e <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8000736:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000738:	4620      	mov	r0, r4
 800073a:	f7ff ffa1 	bl	8000680 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800073e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000740:	233f      	movs	r3, #63	; 0x3f
 8000742:	4093      	lsls	r3, r2
 8000744:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000746:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000748:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800074a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800074c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000750:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000752:	f7ff ff11 	bl	8000578 <HAL_GetTick>
 8000756:	1b40      	subs	r0, r0, r5
 8000758:	2805      	cmp	r0, #5
 800075a:	d9b9      	bls.n	80006d0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800075c:	2320      	movs	r3, #32
 800075e:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000760:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8000762:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000766:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000768:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800076c:	d113      	bne.n	8000796 <HAL_DMA_Init+0xea>
    switch (tmp)
 800076e:	2a03      	cmp	r2, #3
 8000770:	d8e1      	bhi.n	8000736 <HAL_DMA_Init+0x8a>
 8000772:	a001      	add	r0, pc, #4	; (adr r0, 8000778 <HAL_DMA_Init+0xcc>)
 8000774:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000778:	0800078f 	.word	0x0800078f
 800077c:	08000733 	.word	0x08000733
 8000780:	0800078f 	.word	0x0800078f
 8000784:	08000789 	.word	0x08000789
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000788:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800078c:	d1d3      	bne.n	8000736 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800078e:	2340      	movs	r3, #64	; 0x40
 8000790:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000792:	2001      	movs	r0, #1
 8000794:	e7e5      	b.n	8000762 <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000796:	2a02      	cmp	r2, #2
 8000798:	d9f9      	bls.n	800078e <HAL_DMA_Init+0xe2>
 800079a:	2a03      	cmp	r2, #3
 800079c:	e7c8      	b.n	8000730 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 800079e:	2001      	movs	r0, #1
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	bf00      	nop
 80007a4:	f010803f 	.word	0xf010803f

080007a8 <HAL_DMA_Start_IT>:
{
 80007a8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80007aa:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80007ae:	2c01      	cmp	r4, #1
 80007b0:	d036      	beq.n	8000820 <HAL_DMA_Start_IT+0x78>
 80007b2:	2401      	movs	r4, #1
 80007b4:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80007b8:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80007bc:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 80007be:	2c01      	cmp	r4, #1
 80007c0:	f04f 0500 	mov.w	r5, #0
 80007c4:	f04f 0402 	mov.w	r4, #2
 80007c8:	d128      	bne.n	800081c <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 80007ca:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80007ce:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007d0:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80007d2:	6825      	ldr	r5, [r4, #0]
 80007d4:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80007d8:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80007da:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80007dc:	6883      	ldr	r3, [r0, #8]
 80007de:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 80007e0:	bf0e      	itee	eq
 80007e2:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80007e4:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80007e6:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80007e8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 80007ea:	bf08      	it	eq
 80007ec:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80007ee:	233f      	movs	r3, #63	; 0x3f
 80007f0:	4093      	lsls	r3, r2
 80007f2:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80007f4:	6823      	ldr	r3, [r4, #0]
 80007f6:	f043 0316 	orr.w	r3, r3, #22
 80007fa:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80007fc:	6963      	ldr	r3, [r4, #20]
 80007fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000802:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8000804:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000806:	b11b      	cbz	r3, 8000810 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000808:	6823      	ldr	r3, [r4, #0]
 800080a:	f043 0308 	orr.w	r3, r3, #8
 800080e:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000810:	6823      	ldr	r3, [r4, #0]
 8000812:	f043 0301 	orr.w	r3, r3, #1
 8000816:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000818:	2000      	movs	r0, #0
 800081a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 800081c:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8000820:	2002      	movs	r0, #2
}
 8000822:	bd70      	pop	{r4, r5, r6, pc}

08000824 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000824:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000828:	2b02      	cmp	r3, #2
 800082a:	d003      	beq.n	8000834 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800082c:	2380      	movs	r3, #128	; 0x80
 800082e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000830:	2001      	movs	r0, #1
 8000832:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8000834:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000836:	2305      	movs	r3, #5
 8000838:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800083c:	6813      	ldr	r3, [r2, #0]
 800083e:	f023 0301 	bic.w	r3, r3, #1
 8000842:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8000844:	2000      	movs	r0, #0
}
 8000846:	4770      	bx	lr

08000848 <HAL_DMA_IRQHandler>:
{
 8000848:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 800084a:	2300      	movs	r3, #0
 800084c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800084e:	4b5a      	ldr	r3, [pc, #360]	; (80009b8 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000850:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8000852:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000854:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000856:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000858:	2208      	movs	r2, #8
 800085a:	409a      	lsls	r2, r3
 800085c:	4216      	tst	r6, r2
{
 800085e:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000860:	d00c      	beq.n	800087c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000862:	6801      	ldr	r1, [r0, #0]
 8000864:	6808      	ldr	r0, [r1, #0]
 8000866:	0740      	lsls	r0, r0, #29
 8000868:	d508      	bpl.n	800087c <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800086a:	6808      	ldr	r0, [r1, #0]
 800086c:	f020 0004 	bic.w	r0, r0, #4
 8000870:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000872:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000874:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000876:	f042 0201 	orr.w	r2, r2, #1
 800087a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800087c:	2201      	movs	r2, #1
 800087e:	409a      	lsls	r2, r3
 8000880:	4216      	tst	r6, r2
 8000882:	d008      	beq.n	8000896 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000884:	6821      	ldr	r1, [r4, #0]
 8000886:	6949      	ldr	r1, [r1, #20]
 8000888:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800088a:	bf41      	itttt	mi
 800088c:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800088e:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000890:	f042 0202 	orrmi.w	r2, r2, #2
 8000894:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000896:	2204      	movs	r2, #4
 8000898:	409a      	lsls	r2, r3
 800089a:	4216      	tst	r6, r2
 800089c:	d008      	beq.n	80008b0 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800089e:	6821      	ldr	r1, [r4, #0]
 80008a0:	6809      	ldr	r1, [r1, #0]
 80008a2:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80008a4:	bf41      	itttt	mi
 80008a6:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80008a8:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80008aa:	f042 0204 	orrmi.w	r2, r2, #4
 80008ae:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80008b0:	2210      	movs	r2, #16
 80008b2:	409a      	lsls	r2, r3
 80008b4:	4216      	tst	r6, r2
 80008b6:	d010      	beq.n	80008da <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80008b8:	6823      	ldr	r3, [r4, #0]
 80008ba:	6819      	ldr	r1, [r3, #0]
 80008bc:	0709      	lsls	r1, r1, #28
 80008be:	d50c      	bpl.n	80008da <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80008c0:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	0350      	lsls	r0, r2, #13
 80008c6:	d535      	bpl.n	8000934 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	0319      	lsls	r1, r3, #12
 80008cc:	d401      	bmi.n	80008d2 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80008ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008d0:	e000      	b.n	80008d4 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80008d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80008d4:	b10b      	cbz	r3, 80008da <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80008d6:	4620      	mov	r0, r4
 80008d8:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80008da:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80008dc:	2220      	movs	r2, #32
 80008de:	408a      	lsls	r2, r1
 80008e0:	4216      	tst	r6, r2
 80008e2:	d038      	beq.n	8000956 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80008e4:	6823      	ldr	r3, [r4, #0]
 80008e6:	6818      	ldr	r0, [r3, #0]
 80008e8:	06c6      	lsls	r6, r0, #27
 80008ea:	d534      	bpl.n	8000956 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80008ec:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80008ee:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80008f2:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80008f4:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80008f6:	d125      	bne.n	8000944 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80008f8:	f022 0216 	bic.w	r2, r2, #22
 80008fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80008fe:	695a      	ldr	r2, [r3, #20]
 8000900:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000904:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000906:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000908:	b90a      	cbnz	r2, 800090e <HAL_DMA_IRQHandler+0xc6>
 800090a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800090c:	b11a      	cbz	r2, 8000916 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	f022 0208 	bic.w	r2, r2, #8
 8000914:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000916:	233f      	movs	r3, #63	; 0x3f
 8000918:	408b      	lsls	r3, r1
 800091a:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 800091c:	2300      	movs	r3, #0
 800091e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000922:	2301      	movs	r3, #1
 8000924:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000928:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800092a:	b10b      	cbz	r3, 8000930 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 800092c:	4620      	mov	r0, r4
 800092e:	4798      	blx	r3
}
 8000930:	b003      	add	sp, #12
 8000932:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000938:	bf5e      	ittt	pl
 800093a:	681a      	ldrpl	r2, [r3, #0]
 800093c:	f022 0208 	bicpl.w	r2, r2, #8
 8000940:	601a      	strpl	r2, [r3, #0]
 8000942:	e7c4      	b.n	80008ce <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000944:	0350      	lsls	r0, r2, #13
 8000946:	d528      	bpl.n	800099a <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	0319      	lsls	r1, r3, #12
 800094c:	d432      	bmi.n	80009b4 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 800094e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000950:	b10b      	cbz	r3, 8000956 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8000952:	4620      	mov	r0, r4
 8000954:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000956:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000958:	2b00      	cmp	r3, #0
 800095a:	d0e9      	beq.n	8000930 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800095c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800095e:	07da      	lsls	r2, r3, #31
 8000960:	d519      	bpl.n	8000996 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000962:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000964:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000966:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800096a:	6813      	ldr	r3, [r2, #0]
 800096c:	f023 0301 	bic.w	r3, r3, #1
 8000970:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000972:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000976:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 800097a:	9b01      	ldr	r3, [sp, #4]
 800097c:	3301      	adds	r3, #1
 800097e:	429f      	cmp	r7, r3
 8000980:	9301      	str	r3, [sp, #4]
 8000982:	d302      	bcc.n	800098a <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000984:	6813      	ldr	r3, [r2, #0]
 8000986:	07db      	lsls	r3, r3, #31
 8000988:	d4f7      	bmi.n	800097a <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 800098a:	2300      	movs	r3, #0
 800098c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000990:	2301      	movs	r3, #1
 8000992:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000996:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000998:	e7c7      	b.n	800092a <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80009a0:	d108      	bne.n	80009b4 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80009a2:	6819      	ldr	r1, [r3, #0]
 80009a4:	f021 0110 	bic.w	r1, r1, #16
 80009a8:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80009aa:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80009ac:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80009b0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80009b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80009b6:	e7cb      	b.n	8000950 <HAL_DMA_IRQHandler+0x108>
 80009b8:	20000008 	.word	0x20000008

080009bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009c0:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009c2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c4:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8000b64 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009c8:	4a64      	ldr	r2, [pc, #400]	; (8000b5c <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009ca:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 80009cc:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009d0:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009d2:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80009d4:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009d8:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 80009dc:	42b7      	cmp	r7, r6
 80009de:	f040 80ad 	bne.w	8000b3c <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009e2:	684c      	ldr	r4, [r1, #4]
 80009e4:	f024 0a10 	bic.w	sl, r4, #16
 80009e8:	f1ba 0f02 	cmp.w	sl, #2
 80009ec:	d116      	bne.n	8000a1c <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 80009ee:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 80009f2:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80009f6:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80009fa:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80009fe:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000a02:	f04f 0e0f 	mov.w	lr, #15
 8000a06:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000a0a:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a0e:	690d      	ldr	r5, [r1, #16]
 8000a10:	fa05 f50b 	lsl.w	r5, r5, fp
 8000a14:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000a18:	f8cc 5020 	str.w	r5, [ip, #32]
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a20:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000a22:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a26:	fa05 f50c 	lsl.w	r5, r5, ip
 8000a2a:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a2c:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a30:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a34:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a38:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a3c:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a40:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a44:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 8000a46:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a4a:	d815      	bhi.n	8000a78 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 8000a4c:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a50:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a54:	68cd      	ldr	r5, [r1, #12]
 8000a56:	fa05 fa0c 	lsl.w	sl, r5, ip
 8000a5a:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 8000a5e:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8000a62:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a66:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a6a:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 8000a6e:	fa0e fe03 	lsl.w	lr, lr, r3
 8000a72:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8000a76:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000a78:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a7a:	9d00      	ldr	r5, [sp, #0]
 8000a7c:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a7e:	688f      	ldr	r7, [r1, #8]
 8000a80:	fa07 f70c 	lsl.w	r7, r7, ip
 8000a84:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000a86:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a88:	00e5      	lsls	r5, r4, #3
 8000a8a:	d557      	bpl.n	8000b3c <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8c:	f04f 0b00 	mov.w	fp, #0
 8000a90:	f8cd b00c 	str.w	fp, [sp, #12]
 8000a94:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a98:	4d31      	ldr	r5, [pc, #196]	; (8000b60 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000a9e:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000aa2:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000aa6:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000aaa:	9703      	str	r7, [sp, #12]
 8000aac:	9f03      	ldr	r7, [sp, #12]
 8000aae:	f023 0703 	bic.w	r7, r3, #3
 8000ab2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000ab6:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000aba:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000abe:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ac2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000ac6:	f04f 0e0f 	mov.w	lr, #15
 8000aca:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ace:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ad0:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ad4:	d039      	beq.n	8000b4a <HAL_GPIO_Init+0x18e>
 8000ad6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ada:	42a8      	cmp	r0, r5
 8000adc:	d037      	beq.n	8000b4e <HAL_GPIO_Init+0x192>
 8000ade:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ae2:	42a8      	cmp	r0, r5
 8000ae4:	d035      	beq.n	8000b52 <HAL_GPIO_Init+0x196>
 8000ae6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000aea:	42a8      	cmp	r0, r5
 8000aec:	d033      	beq.n	8000b56 <HAL_GPIO_Init+0x19a>
 8000aee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000af2:	42a8      	cmp	r0, r5
 8000af4:	bf14      	ite	ne
 8000af6:	2507      	movne	r5, #7
 8000af8:	2504      	moveq	r5, #4
 8000afa:	fa05 f50c 	lsl.w	r5, r5, ip
 8000afe:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b02:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000b04:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000b06:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b08:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000b0c:	bf0c      	ite	eq
 8000b0e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000b10:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000b12:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000b14:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b16:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000b1a:	bf0c      	ite	eq
 8000b1c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000b1e:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000b20:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b22:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b24:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000b28:	bf0c      	ite	eq
 8000b2a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000b2c:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000b2e:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000b30:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b32:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000b34:	bf54      	ite	pl
 8000b36:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000b38:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000b3a:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	2b10      	cmp	r3, #16
 8000b40:	f47f af47 	bne.w	80009d2 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000b44:	b005      	add	sp, #20
 8000b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b4a:	465d      	mov	r5, fp
 8000b4c:	e7d5      	b.n	8000afa <HAL_GPIO_Init+0x13e>
 8000b4e:	2501      	movs	r5, #1
 8000b50:	e7d3      	b.n	8000afa <HAL_GPIO_Init+0x13e>
 8000b52:	2502      	movs	r5, #2
 8000b54:	e7d1      	b.n	8000afa <HAL_GPIO_Init+0x13e>
 8000b56:	2503      	movs	r5, #3
 8000b58:	e7cf      	b.n	8000afa <HAL_GPIO_Init+0x13e>
 8000b5a:	bf00      	nop
 8000b5c:	40013c00 	.word	0x40013c00
 8000b60:	40020000 	.word	0x40020000
 8000b64:	40023800 	.word	0x40023800

08000b68 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b68:	b10a      	cbz	r2, 8000b6e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b6a:	6181      	str	r1, [r0, #24]
 8000b6c:	4770      	bx	lr
 8000b6e:	0409      	lsls	r1, r1, #16
 8000b70:	e7fb      	b.n	8000b6a <HAL_GPIO_WritePin+0x2>
	...

08000b74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b78:	4604      	mov	r4, r0
 8000b7a:	b918      	cbnz	r0, 8000b84 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000b7c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000b7e:	b002      	add	sp, #8
 8000b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b84:	6803      	ldr	r3, [r0, #0]
 8000b86:	07dd      	lsls	r5, r3, #31
 8000b88:	d410      	bmi.n	8000bac <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b8a:	6823      	ldr	r3, [r4, #0]
 8000b8c:	0798      	lsls	r0, r3, #30
 8000b8e:	d458      	bmi.n	8000c42 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b90:	6823      	ldr	r3, [r4, #0]
 8000b92:	071a      	lsls	r2, r3, #28
 8000b94:	f100 809a 	bmi.w	8000ccc <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b98:	6823      	ldr	r3, [r4, #0]
 8000b9a:	075b      	lsls	r3, r3, #29
 8000b9c:	f100 80b8 	bmi.w	8000d10 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ba0:	69a2      	ldr	r2, [r4, #24]
 8000ba2:	2a00      	cmp	r2, #0
 8000ba4:	f040 8119 	bne.w	8000dda <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000ba8:	2000      	movs	r0, #0
 8000baa:	e7e8      	b.n	8000b7e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bac:	4ba6      	ldr	r3, [pc, #664]	; (8000e48 <HAL_RCC_OscConfig+0x2d4>)
 8000bae:	689a      	ldr	r2, [r3, #8]
 8000bb0:	f002 020c 	and.w	r2, r2, #12
 8000bb4:	2a04      	cmp	r2, #4
 8000bb6:	d007      	beq.n	8000bc8 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bb8:	689a      	ldr	r2, [r3, #8]
 8000bba:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bbe:	2a08      	cmp	r2, #8
 8000bc0:	d10a      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	0259      	lsls	r1, r3, #9
 8000bc6:	d507      	bpl.n	8000bd8 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bc8:	4b9f      	ldr	r3, [pc, #636]	; (8000e48 <HAL_RCC_OscConfig+0x2d4>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	039a      	lsls	r2, r3, #14
 8000bce:	d5dc      	bpl.n	8000b8a <HAL_RCC_OscConfig+0x16>
 8000bd0:	6863      	ldr	r3, [r4, #4]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1d9      	bne.n	8000b8a <HAL_RCC_OscConfig+0x16>
 8000bd6:	e7d1      	b.n	8000b7c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bd8:	6863      	ldr	r3, [r4, #4]
 8000bda:	4d9b      	ldr	r5, [pc, #620]	; (8000e48 <HAL_RCC_OscConfig+0x2d4>)
 8000bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000be0:	d111      	bne.n	8000c06 <HAL_RCC_OscConfig+0x92>
 8000be2:	682b      	ldr	r3, [r5, #0]
 8000be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000be8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000bea:	f7ff fcc5 	bl	8000578 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bee:	4d96      	ldr	r5, [pc, #600]	; (8000e48 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000bf0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bf2:	682b      	ldr	r3, [r5, #0]
 8000bf4:	039b      	lsls	r3, r3, #14
 8000bf6:	d4c8      	bmi.n	8000b8a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bf8:	f7ff fcbe 	bl	8000578 <HAL_GetTick>
 8000bfc:	1b80      	subs	r0, r0, r6
 8000bfe:	2864      	cmp	r0, #100	; 0x64
 8000c00:	d9f7      	bls.n	8000bf2 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000c02:	2003      	movs	r0, #3
 8000c04:	e7bb      	b.n	8000b7e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c0a:	d104      	bne.n	8000c16 <HAL_RCC_OscConfig+0xa2>
 8000c0c:	682b      	ldr	r3, [r5, #0]
 8000c0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c12:	602b      	str	r3, [r5, #0]
 8000c14:	e7e5      	b.n	8000be2 <HAL_RCC_OscConfig+0x6e>
 8000c16:	682a      	ldr	r2, [r5, #0]
 8000c18:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000c1c:	602a      	str	r2, [r5, #0]
 8000c1e:	682a      	ldr	r2, [r5, #0]
 8000c20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c24:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d1df      	bne.n	8000bea <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8000c2a:	f7ff fca5 	bl	8000578 <HAL_GetTick>
 8000c2e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c30:	682b      	ldr	r3, [r5, #0]
 8000c32:	039f      	lsls	r7, r3, #14
 8000c34:	d5a9      	bpl.n	8000b8a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c36:	f7ff fc9f 	bl	8000578 <HAL_GetTick>
 8000c3a:	1b80      	subs	r0, r0, r6
 8000c3c:	2864      	cmp	r0, #100	; 0x64
 8000c3e:	d9f7      	bls.n	8000c30 <HAL_RCC_OscConfig+0xbc>
 8000c40:	e7df      	b.n	8000c02 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c42:	4b81      	ldr	r3, [pc, #516]	; (8000e48 <HAL_RCC_OscConfig+0x2d4>)
 8000c44:	689a      	ldr	r2, [r3, #8]
 8000c46:	f012 0f0c 	tst.w	r2, #12
 8000c4a:	d007      	beq.n	8000c5c <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c4c:	689a      	ldr	r2, [r3, #8]
 8000c4e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c52:	2a08      	cmp	r2, #8
 8000c54:	d111      	bne.n	8000c7a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	025e      	lsls	r6, r3, #9
 8000c5a:	d40e      	bmi.n	8000c7a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c5c:	4b7a      	ldr	r3, [pc, #488]	; (8000e48 <HAL_RCC_OscConfig+0x2d4>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	0795      	lsls	r5, r2, #30
 8000c62:	d502      	bpl.n	8000c6a <HAL_RCC_OscConfig+0xf6>
 8000c64:	68e2      	ldr	r2, [r4, #12]
 8000c66:	2a01      	cmp	r2, #1
 8000c68:	d188      	bne.n	8000b7c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	6921      	ldr	r1, [r4, #16]
 8000c6e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000c72:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000c76:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c78:	e78a      	b.n	8000b90 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c7a:	68e2      	ldr	r2, [r4, #12]
 8000c7c:	4b73      	ldr	r3, [pc, #460]	; (8000e4c <HAL_RCC_OscConfig+0x2d8>)
 8000c7e:	b1b2      	cbz	r2, 8000cae <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000c80:	2201      	movs	r2, #1
 8000c82:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c84:	f7ff fc78 	bl	8000578 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c88:	4d6f      	ldr	r5, [pc, #444]	; (8000e48 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000c8a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c8c:	682b      	ldr	r3, [r5, #0]
 8000c8e:	0798      	lsls	r0, r3, #30
 8000c90:	d507      	bpl.n	8000ca2 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c92:	682b      	ldr	r3, [r5, #0]
 8000c94:	6922      	ldr	r2, [r4, #16]
 8000c96:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000c9a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000c9e:	602b      	str	r3, [r5, #0]
 8000ca0:	e776      	b.n	8000b90 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ca2:	f7ff fc69 	bl	8000578 <HAL_GetTick>
 8000ca6:	1b80      	subs	r0, r0, r6
 8000ca8:	2802      	cmp	r0, #2
 8000caa:	d9ef      	bls.n	8000c8c <HAL_RCC_OscConfig+0x118>
 8000cac:	e7a9      	b.n	8000c02 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000cae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000cb0:	f7ff fc62 	bl	8000578 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cb4:	4d64      	ldr	r5, [pc, #400]	; (8000e48 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000cb6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cb8:	682b      	ldr	r3, [r5, #0]
 8000cba:	0799      	lsls	r1, r3, #30
 8000cbc:	f57f af68 	bpl.w	8000b90 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cc0:	f7ff fc5a 	bl	8000578 <HAL_GetTick>
 8000cc4:	1b80      	subs	r0, r0, r6
 8000cc6:	2802      	cmp	r0, #2
 8000cc8:	d9f6      	bls.n	8000cb8 <HAL_RCC_OscConfig+0x144>
 8000cca:	e79a      	b.n	8000c02 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000ccc:	6962      	ldr	r2, [r4, #20]
 8000cce:	4b60      	ldr	r3, [pc, #384]	; (8000e50 <HAL_RCC_OscConfig+0x2dc>)
 8000cd0:	b17a      	cbz	r2, 8000cf2 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000cd6:	f7ff fc4f 	bl	8000578 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cda:	4d5b      	ldr	r5, [pc, #364]	; (8000e48 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000cdc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cde:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000ce0:	079f      	lsls	r7, r3, #30
 8000ce2:	f53f af59 	bmi.w	8000b98 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ce6:	f7ff fc47 	bl	8000578 <HAL_GetTick>
 8000cea:	1b80      	subs	r0, r0, r6
 8000cec:	2802      	cmp	r0, #2
 8000cee:	d9f6      	bls.n	8000cde <HAL_RCC_OscConfig+0x16a>
 8000cf0:	e787      	b.n	8000c02 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000cf2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000cf4:	f7ff fc40 	bl	8000578 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cf8:	4d53      	ldr	r5, [pc, #332]	; (8000e48 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000cfa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cfc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000cfe:	0798      	lsls	r0, r3, #30
 8000d00:	f57f af4a 	bpl.w	8000b98 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d04:	f7ff fc38 	bl	8000578 <HAL_GetTick>
 8000d08:	1b80      	subs	r0, r0, r6
 8000d0a:	2802      	cmp	r0, #2
 8000d0c:	d9f6      	bls.n	8000cfc <HAL_RCC_OscConfig+0x188>
 8000d0e:	e778      	b.n	8000c02 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d10:	4b4d      	ldr	r3, [pc, #308]	; (8000e48 <HAL_RCC_OscConfig+0x2d4>)
 8000d12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d14:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000d18:	d128      	bne.n	8000d6c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	9201      	str	r2, [sp, #4]
 8000d1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d1e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d22:	641a      	str	r2, [r3, #64]	; 0x40
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	9301      	str	r3, [sp, #4]
 8000d2c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000d2e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d30:	4d48      	ldr	r5, [pc, #288]	; (8000e54 <HAL_RCC_OscConfig+0x2e0>)
 8000d32:	682b      	ldr	r3, [r5, #0]
 8000d34:	05d9      	lsls	r1, r3, #23
 8000d36:	d51b      	bpl.n	8000d70 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d38:	68a3      	ldr	r3, [r4, #8]
 8000d3a:	4d43      	ldr	r5, [pc, #268]	; (8000e48 <HAL_RCC_OscConfig+0x2d4>)
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d127      	bne.n	8000d90 <HAL_RCC_OscConfig+0x21c>
 8000d40:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000d48:	f7ff fc16 	bl	8000578 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d4c:	4d3e      	ldr	r5, [pc, #248]	; (8000e48 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000d4e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d50:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d54:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d56:	079b      	lsls	r3, r3, #30
 8000d58:	d539      	bpl.n	8000dce <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	f43f af20 	beq.w	8000ba0 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d60:	4a39      	ldr	r2, [pc, #228]	; (8000e48 <HAL_RCC_OscConfig+0x2d4>)
 8000d62:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000d64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d68:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6a:	e719      	b.n	8000ba0 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e7df      	b.n	8000d30 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d70:	682b      	ldr	r3, [r5, #0]
 8000d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d76:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000d78:	f7ff fbfe 	bl	8000578 <HAL_GetTick>
 8000d7c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d7e:	682b      	ldr	r3, [r5, #0]
 8000d80:	05da      	lsls	r2, r3, #23
 8000d82:	d4d9      	bmi.n	8000d38 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d84:	f7ff fbf8 	bl	8000578 <HAL_GetTick>
 8000d88:	1bc0      	subs	r0, r0, r7
 8000d8a:	2802      	cmp	r0, #2
 8000d8c:	d9f7      	bls.n	8000d7e <HAL_RCC_OscConfig+0x20a>
 8000d8e:	e738      	b.n	8000c02 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d90:	2b05      	cmp	r3, #5
 8000d92:	d104      	bne.n	8000d9e <HAL_RCC_OscConfig+0x22a>
 8000d94:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d96:	f043 0304 	orr.w	r3, r3, #4
 8000d9a:	672b      	str	r3, [r5, #112]	; 0x70
 8000d9c:	e7d0      	b.n	8000d40 <HAL_RCC_OscConfig+0x1cc>
 8000d9e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000da0:	f022 0201 	bic.w	r2, r2, #1
 8000da4:	672a      	str	r2, [r5, #112]	; 0x70
 8000da6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000da8:	f022 0204 	bic.w	r2, r2, #4
 8000dac:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d1ca      	bne.n	8000d48 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000db2:	f7ff fbe1 	bl	8000578 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000db6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000dba:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dbc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000dbe:	0798      	lsls	r0, r3, #30
 8000dc0:	d5cb      	bpl.n	8000d5a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dc2:	f7ff fbd9 	bl	8000578 <HAL_GetTick>
 8000dc6:	1bc0      	subs	r0, r0, r7
 8000dc8:	4540      	cmp	r0, r8
 8000dca:	d9f7      	bls.n	8000dbc <HAL_RCC_OscConfig+0x248>
 8000dcc:	e719      	b.n	8000c02 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dce:	f7ff fbd3 	bl	8000578 <HAL_GetTick>
 8000dd2:	1bc0      	subs	r0, r0, r7
 8000dd4:	4540      	cmp	r0, r8
 8000dd6:	d9bd      	bls.n	8000d54 <HAL_RCC_OscConfig+0x1e0>
 8000dd8:	e713      	b.n	8000c02 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000dda:	4d1b      	ldr	r5, [pc, #108]	; (8000e48 <HAL_RCC_OscConfig+0x2d4>)
 8000ddc:	68ab      	ldr	r3, [r5, #8]
 8000dde:	f003 030c 	and.w	r3, r3, #12
 8000de2:	2b08      	cmp	r3, #8
 8000de4:	f43f aeca 	beq.w	8000b7c <HAL_RCC_OscConfig+0x8>
 8000de8:	4e1b      	ldr	r6, [pc, #108]	; (8000e58 <HAL_RCC_OscConfig+0x2e4>)
 8000dea:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dec:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000dee:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000df0:	d134      	bne.n	8000e5c <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000df2:	f7ff fbc1 	bl	8000578 <HAL_GetTick>
 8000df6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000df8:	682b      	ldr	r3, [r5, #0]
 8000dfa:	0199      	lsls	r1, r3, #6
 8000dfc:	d41e      	bmi.n	8000e3c <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000dfe:	6a22      	ldr	r2, [r4, #32]
 8000e00:	69e3      	ldr	r3, [r4, #28]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e06:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000e0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000e0c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000e10:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e12:	4c0d      	ldr	r4, [pc, #52]	; (8000e48 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000e14:	0852      	lsrs	r2, r2, #1
 8000e16:	3a01      	subs	r2, #1
 8000e18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e1c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000e1e:	2301      	movs	r3, #1
 8000e20:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000e22:	f7ff fba9 	bl	8000578 <HAL_GetTick>
 8000e26:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e28:	6823      	ldr	r3, [r4, #0]
 8000e2a:	019a      	lsls	r2, r3, #6
 8000e2c:	f53f aebc 	bmi.w	8000ba8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e30:	f7ff fba2 	bl	8000578 <HAL_GetTick>
 8000e34:	1b40      	subs	r0, r0, r5
 8000e36:	2802      	cmp	r0, #2
 8000e38:	d9f6      	bls.n	8000e28 <HAL_RCC_OscConfig+0x2b4>
 8000e3a:	e6e2      	b.n	8000c02 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e3c:	f7ff fb9c 	bl	8000578 <HAL_GetTick>
 8000e40:	1bc0      	subs	r0, r0, r7
 8000e42:	2802      	cmp	r0, #2
 8000e44:	d9d8      	bls.n	8000df8 <HAL_RCC_OscConfig+0x284>
 8000e46:	e6dc      	b.n	8000c02 <HAL_RCC_OscConfig+0x8e>
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	42470000 	.word	0x42470000
 8000e50:	42470e80 	.word	0x42470e80
 8000e54:	40007000 	.word	0x40007000
 8000e58:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000e5c:	f7ff fb8c 	bl	8000578 <HAL_GetTick>
 8000e60:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e62:	682b      	ldr	r3, [r5, #0]
 8000e64:	019b      	lsls	r3, r3, #6
 8000e66:	f57f ae9f 	bpl.w	8000ba8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e6a:	f7ff fb85 	bl	8000578 <HAL_GetTick>
 8000e6e:	1b00      	subs	r0, r0, r4
 8000e70:	2802      	cmp	r0, #2
 8000e72:	d9f6      	bls.n	8000e62 <HAL_RCC_OscConfig+0x2ee>
 8000e74:	e6c5      	b.n	8000c02 <HAL_RCC_OscConfig+0x8e>
 8000e76:	bf00      	nop

08000e78 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e78:	4913      	ldr	r1, [pc, #76]	; (8000ec8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000e7a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e7c:	688b      	ldr	r3, [r1, #8]
 8000e7e:	f003 030c 	and.w	r3, r3, #12
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	d003      	beq.n	8000e8e <HAL_RCC_GetSysClockFreq+0x16>
 8000e86:	2b08      	cmp	r3, #8
 8000e88:	d003      	beq.n	8000e92 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000e8a:	4810      	ldr	r0, [pc, #64]	; (8000ecc <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000e8c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000e8e:	4810      	ldr	r0, [pc, #64]	; (8000ed0 <HAL_RCC_GetSysClockFreq+0x58>)
 8000e90:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e92:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e94:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e96:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e98:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e9c:	bf14      	ite	ne
 8000e9e:	480c      	ldrne	r0, [pc, #48]	; (8000ed0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ea0:	480a      	ldreq	r0, [pc, #40]	; (8000ecc <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ea2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000ea6:	bf18      	it	ne
 8000ea8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000eaa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000eae:	fba1 0100 	umull	r0, r1, r1, r0
 8000eb2:	f7ff f98f 	bl	80001d4 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000eb6:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <HAL_RCC_GetSysClockFreq+0x50>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000ec2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ec6:	bd08      	pop	{r3, pc}
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	00f42400 	.word	0x00f42400
 8000ed0:	007a1200 	.word	0x007a1200

08000ed4 <HAL_RCC_ClockConfig>:
{
 8000ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ed8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000eda:	4604      	mov	r4, r0
 8000edc:	b910      	cbnz	r0, 8000ee4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000ede:	2001      	movs	r0, #1
 8000ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ee4:	4b44      	ldr	r3, [pc, #272]	; (8000ff8 <HAL_RCC_ClockConfig+0x124>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	f002 020f 	and.w	r2, r2, #15
 8000eec:	428a      	cmp	r2, r1
 8000eee:	d328      	bcc.n	8000f42 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ef0:	6821      	ldr	r1, [r4, #0]
 8000ef2:	078f      	lsls	r7, r1, #30
 8000ef4:	d42d      	bmi.n	8000f52 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ef6:	07c8      	lsls	r0, r1, #31
 8000ef8:	d440      	bmi.n	8000f7c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000efa:	4b3f      	ldr	r3, [pc, #252]	; (8000ff8 <HAL_RCC_ClockConfig+0x124>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	f002 020f 	and.w	r2, r2, #15
 8000f02:	4295      	cmp	r5, r2
 8000f04:	d366      	bcc.n	8000fd4 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f06:	6822      	ldr	r2, [r4, #0]
 8000f08:	0751      	lsls	r1, r2, #29
 8000f0a:	d46c      	bmi.n	8000fe6 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f0c:	0713      	lsls	r3, r2, #28
 8000f0e:	d507      	bpl.n	8000f20 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000f10:	4a3a      	ldr	r2, [pc, #232]	; (8000ffc <HAL_RCC_ClockConfig+0x128>)
 8000f12:	6921      	ldr	r1, [r4, #16]
 8000f14:	6893      	ldr	r3, [r2, #8]
 8000f16:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000f1a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f1e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000f20:	f7ff ffaa 	bl	8000e78 <HAL_RCC_GetSysClockFreq>
 8000f24:	4b35      	ldr	r3, [pc, #212]	; (8000ffc <HAL_RCC_ClockConfig+0x128>)
 8000f26:	4a36      	ldr	r2, [pc, #216]	; (8001000 <HAL_RCC_ClockConfig+0x12c>)
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000f2e:	5cd3      	ldrb	r3, [r2, r3]
 8000f30:	40d8      	lsrs	r0, r3
 8000f32:	4b34      	ldr	r3, [pc, #208]	; (8001004 <HAL_RCC_ClockConfig+0x130>)
 8000f34:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f36:	2000      	movs	r0, #0
 8000f38:	f7ff fad4 	bl	80004e4 <HAL_InitTick>
  return HAL_OK;
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f42:	b2ca      	uxtb	r2, r1
 8000f44:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 030f 	and.w	r3, r3, #15
 8000f4c:	4299      	cmp	r1, r3
 8000f4e:	d1c6      	bne.n	8000ede <HAL_RCC_ClockConfig+0xa>
 8000f50:	e7ce      	b.n	8000ef0 <HAL_RCC_ClockConfig+0x1c>
 8000f52:	4b2a      	ldr	r3, [pc, #168]	; (8000ffc <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f54:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f58:	bf1e      	ittt	ne
 8000f5a:	689a      	ldrne	r2, [r3, #8]
 8000f5c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000f60:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f62:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f64:	bf42      	ittt	mi
 8000f66:	689a      	ldrmi	r2, [r3, #8]
 8000f68:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000f6c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	68a0      	ldr	r0, [r4, #8]
 8000f72:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000f76:	4302      	orrs	r2, r0
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	e7bc      	b.n	8000ef6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f7c:	6862      	ldr	r2, [r4, #4]
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <HAL_RCC_ClockConfig+0x128>)
 8000f80:	2a01      	cmp	r2, #1
 8000f82:	d11d      	bne.n	8000fc0 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f8a:	d0a8      	beq.n	8000ede <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f8c:	4e1b      	ldr	r6, [pc, #108]	; (8000ffc <HAL_RCC_ClockConfig+0x128>)
 8000f8e:	68b3      	ldr	r3, [r6, #8]
 8000f90:	f023 0303 	bic.w	r3, r3, #3
 8000f94:	4313      	orrs	r3, r2
 8000f96:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000f98:	f7ff faee 	bl	8000578 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f9c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000fa0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fa2:	68b3      	ldr	r3, [r6, #8]
 8000fa4:	6862      	ldr	r2, [r4, #4]
 8000fa6:	f003 030c 	and.w	r3, r3, #12
 8000faa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000fae:	d0a4      	beq.n	8000efa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fb0:	f7ff fae2 	bl	8000578 <HAL_GetTick>
 8000fb4:	1bc0      	subs	r0, r0, r7
 8000fb6:	4540      	cmp	r0, r8
 8000fb8:	d9f3      	bls.n	8000fa2 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000fba:	2003      	movs	r0, #3
}
 8000fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fc0:	1e91      	subs	r1, r2, #2
 8000fc2:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fc4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fc6:	d802      	bhi.n	8000fce <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fc8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000fcc:	e7dd      	b.n	8000f8a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fce:	f013 0f02 	tst.w	r3, #2
 8000fd2:	e7da      	b.n	8000f8a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fd4:	b2ea      	uxtb	r2, r5
 8000fd6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 030f 	and.w	r3, r3, #15
 8000fde:	429d      	cmp	r5, r3
 8000fe0:	f47f af7d 	bne.w	8000ede <HAL_RCC_ClockConfig+0xa>
 8000fe4:	e78f      	b.n	8000f06 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fe6:	4905      	ldr	r1, [pc, #20]	; (8000ffc <HAL_RCC_ClockConfig+0x128>)
 8000fe8:	68e0      	ldr	r0, [r4, #12]
 8000fea:	688b      	ldr	r3, [r1, #8]
 8000fec:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000ff0:	4303      	orrs	r3, r0
 8000ff2:	608b      	str	r3, [r1, #8]
 8000ff4:	e78a      	b.n	8000f0c <HAL_RCC_ClockConfig+0x38>
 8000ff6:	bf00      	nop
 8000ff8:	40023c00 	.word	0x40023c00
 8000ffc:	40023800 	.word	0x40023800
 8001000:	08001d80 	.word	0x08001d80
 8001004:	20000008 	.word	0x20000008

08001008 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <HAL_RCC_GetPCLK1Freq+0x14>)
 800100a:	4a05      	ldr	r2, [pc, #20]	; (8001020 <HAL_RCC_GetPCLK1Freq+0x18>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001012:	5cd3      	ldrb	r3, [r2, r3]
 8001014:	4a03      	ldr	r2, [pc, #12]	; (8001024 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001016:	6810      	ldr	r0, [r2, #0]
}
 8001018:	40d8      	lsrs	r0, r3
 800101a:	4770      	bx	lr
 800101c:	40023800 	.word	0x40023800
 8001020:	08001d90 	.word	0x08001d90
 8001024:	20000008 	.word	0x20000008

08001028 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <HAL_RCC_GetPCLK2Freq+0x14>)
 800102a:	4a05      	ldr	r2, [pc, #20]	; (8001040 <HAL_RCC_GetPCLK2Freq+0x18>)
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001032:	5cd3      	ldrb	r3, [r2, r3]
 8001034:	4a03      	ldr	r2, [pc, #12]	; (8001044 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001036:	6810      	ldr	r0, [r2, #0]
}
 8001038:	40d8      	lsrs	r0, r3
 800103a:	4770      	bx	lr
 800103c:	40023800 	.word	0x40023800
 8001040:	08001d90 	.word	0x08001d90
 8001044:	20000008 	.word	0x20000008

08001048 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001048:	6803      	ldr	r3, [r0, #0]
 800104a:	68da      	ldr	r2, [r3, #12]
 800104c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001050:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001052:	695a      	ldr	r2, [r3, #20]
 8001054:	f022 0201 	bic.w	r2, r2, #1
 8001058:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800105a:	2320      	movs	r3, #32
 800105c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001060:	4770      	bx	lr
	...

08001064 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001068:	6806      	ldr	r6, [r0, #0]
 800106a:	68c2      	ldr	r2, [r0, #12]
 800106c:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800106e:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001070:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001074:	4313      	orrs	r3, r2
 8001076:	6133      	str	r3, [r6, #16]
{
 8001078:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800107a:	6883      	ldr	r3, [r0, #8]
 800107c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800107e:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001080:	4303      	orrs	r3, r0
 8001082:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001084:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001088:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800108a:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800108e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 8001090:	4313      	orrs	r3, r2
 8001092:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001094:	6973      	ldr	r3, [r6, #20]
 8001096:	69a2      	ldr	r2, [r4, #24]
 8001098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800109c:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800109e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80010a2:	6173      	str	r3, [r6, #20]
 80010a4:	4b7a      	ldr	r3, [pc, #488]	; (8001290 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010a6:	d17c      	bne.n	80011a2 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80010a8:	429e      	cmp	r6, r3
 80010aa:	d003      	beq.n	80010b4 <UART_SetConfig+0x50>
 80010ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010b0:	429e      	cmp	r6, r3
 80010b2:	d144      	bne.n	800113e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80010b4:	f7ff ffb8 	bl	8001028 <HAL_RCC_GetPCLK2Freq>
 80010b8:	2519      	movs	r5, #25
 80010ba:	fb05 f300 	mul.w	r3, r5, r0
 80010be:	6860      	ldr	r0, [r4, #4]
 80010c0:	f04f 0964 	mov.w	r9, #100	; 0x64
 80010c4:	0040      	lsls	r0, r0, #1
 80010c6:	fbb3 f3f0 	udiv	r3, r3, r0
 80010ca:	fbb3 f3f9 	udiv	r3, r3, r9
 80010ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80010d2:	f7ff ffa9 	bl	8001028 <HAL_RCC_GetPCLK2Freq>
 80010d6:	6863      	ldr	r3, [r4, #4]
 80010d8:	4368      	muls	r0, r5
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	fbb0 f7f3 	udiv	r7, r0, r3
 80010e0:	f7ff ffa2 	bl	8001028 <HAL_RCC_GetPCLK2Freq>
 80010e4:	6863      	ldr	r3, [r4, #4]
 80010e6:	4368      	muls	r0, r5
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80010ee:	fbb3 f3f9 	udiv	r3, r3, r9
 80010f2:	fb09 7313 	mls	r3, r9, r3, r7
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	3332      	adds	r3, #50	; 0x32
 80010fa:	fbb3 f3f9 	udiv	r3, r3, r9
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001104:	f7ff ff90 	bl	8001028 <HAL_RCC_GetPCLK2Freq>
 8001108:	6862      	ldr	r2, [r4, #4]
 800110a:	4368      	muls	r0, r5
 800110c:	0052      	lsls	r2, r2, #1
 800110e:	fbb0 faf2 	udiv	sl, r0, r2
 8001112:	f7ff ff89 	bl	8001028 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001116:	6863      	ldr	r3, [r4, #4]
 8001118:	4368      	muls	r0, r5
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001120:	fbb3 f3f9 	udiv	r3, r3, r9
 8001124:	fb09 a313 	mls	r3, r9, r3, sl
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	3332      	adds	r3, #50	; 0x32
 800112c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001130:	f003 0307 	and.w	r3, r3, #7
 8001134:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001136:	443b      	add	r3, r7
 8001138:	60b3      	str	r3, [r6, #8]
 800113a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800113e:	f7ff ff63 	bl	8001008 <HAL_RCC_GetPCLK1Freq>
 8001142:	2519      	movs	r5, #25
 8001144:	fb05 f300 	mul.w	r3, r5, r0
 8001148:	6860      	ldr	r0, [r4, #4]
 800114a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800114e:	0040      	lsls	r0, r0, #1
 8001150:	fbb3 f3f0 	udiv	r3, r3, r0
 8001154:	fbb3 f3f9 	udiv	r3, r3, r9
 8001158:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800115c:	f7ff ff54 	bl	8001008 <HAL_RCC_GetPCLK1Freq>
 8001160:	6863      	ldr	r3, [r4, #4]
 8001162:	4368      	muls	r0, r5
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	fbb0 f7f3 	udiv	r7, r0, r3
 800116a:	f7ff ff4d 	bl	8001008 <HAL_RCC_GetPCLK1Freq>
 800116e:	6863      	ldr	r3, [r4, #4]
 8001170:	4368      	muls	r0, r5
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	fbb0 f3f3 	udiv	r3, r0, r3
 8001178:	fbb3 f3f9 	udiv	r3, r3, r9
 800117c:	fb09 7313 	mls	r3, r9, r3, r7
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	3332      	adds	r3, #50	; 0x32
 8001184:	fbb3 f3f9 	udiv	r3, r3, r9
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800118e:	f7ff ff3b 	bl	8001008 <HAL_RCC_GetPCLK1Freq>
 8001192:	6862      	ldr	r2, [r4, #4]
 8001194:	4368      	muls	r0, r5
 8001196:	0052      	lsls	r2, r2, #1
 8001198:	fbb0 faf2 	udiv	sl, r0, r2
 800119c:	f7ff ff34 	bl	8001008 <HAL_RCC_GetPCLK1Freq>
 80011a0:	e7b9      	b.n	8001116 <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80011a2:	429e      	cmp	r6, r3
 80011a4:	d002      	beq.n	80011ac <UART_SetConfig+0x148>
 80011a6:	4b3b      	ldr	r3, [pc, #236]	; (8001294 <UART_SetConfig+0x230>)
 80011a8:	429e      	cmp	r6, r3
 80011aa:	d140      	bne.n	800122e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80011ac:	f7ff ff3c 	bl	8001028 <HAL_RCC_GetPCLK2Freq>
 80011b0:	6867      	ldr	r7, [r4, #4]
 80011b2:	2519      	movs	r5, #25
 80011b4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80011b8:	fb05 f300 	mul.w	r3, r5, r0
 80011bc:	00bf      	lsls	r7, r7, #2
 80011be:	fbb3 f3f7 	udiv	r3, r3, r7
 80011c2:	fbb3 f3f9 	udiv	r3, r3, r9
 80011c6:	011f      	lsls	r7, r3, #4
 80011c8:	f7ff ff2e 	bl	8001028 <HAL_RCC_GetPCLK2Freq>
 80011cc:	6863      	ldr	r3, [r4, #4]
 80011ce:	4368      	muls	r0, r5
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	fbb0 f8f3 	udiv	r8, r0, r3
 80011d6:	f7ff ff27 	bl	8001028 <HAL_RCC_GetPCLK2Freq>
 80011da:	6863      	ldr	r3, [r4, #4]
 80011dc:	4368      	muls	r0, r5
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80011e4:	fbb3 f3f9 	udiv	r3, r3, r9
 80011e8:	fb09 8313 	mls	r3, r9, r3, r8
 80011ec:	011b      	lsls	r3, r3, #4
 80011ee:	3332      	adds	r3, #50	; 0x32
 80011f0:	fbb3 f3f9 	udiv	r3, r3, r9
 80011f4:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80011f8:	f7ff ff16 	bl	8001028 <HAL_RCC_GetPCLK2Freq>
 80011fc:	6862      	ldr	r2, [r4, #4]
 80011fe:	4368      	muls	r0, r5
 8001200:	0092      	lsls	r2, r2, #2
 8001202:	fbb0 faf2 	udiv	sl, r0, r2
 8001206:	f7ff ff0f 	bl	8001028 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800120a:	6863      	ldr	r3, [r4, #4]
 800120c:	4368      	muls	r0, r5
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	fbb0 f3f3 	udiv	r3, r0, r3
 8001214:	fbb3 f3f9 	udiv	r3, r3, r9
 8001218:	fb09 a313 	mls	r3, r9, r3, sl
 800121c:	011b      	lsls	r3, r3, #4
 800121e:	3332      	adds	r3, #50	; 0x32
 8001220:	fbb3 f3f9 	udiv	r3, r3, r9
 8001224:	f003 030f 	and.w	r3, r3, #15
 8001228:	ea43 0308 	orr.w	r3, r3, r8
 800122c:	e783      	b.n	8001136 <UART_SetConfig+0xd2>
 800122e:	f7ff feeb 	bl	8001008 <HAL_RCC_GetPCLK1Freq>
 8001232:	6867      	ldr	r7, [r4, #4]
 8001234:	2519      	movs	r5, #25
 8001236:	f04f 0964 	mov.w	r9, #100	; 0x64
 800123a:	fb05 f300 	mul.w	r3, r5, r0
 800123e:	00bf      	lsls	r7, r7, #2
 8001240:	fbb3 f3f7 	udiv	r3, r3, r7
 8001244:	fbb3 f3f9 	udiv	r3, r3, r9
 8001248:	011f      	lsls	r7, r3, #4
 800124a:	f7ff fedd 	bl	8001008 <HAL_RCC_GetPCLK1Freq>
 800124e:	6863      	ldr	r3, [r4, #4]
 8001250:	4368      	muls	r0, r5
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	fbb0 f8f3 	udiv	r8, r0, r3
 8001258:	f7ff fed6 	bl	8001008 <HAL_RCC_GetPCLK1Freq>
 800125c:	6863      	ldr	r3, [r4, #4]
 800125e:	4368      	muls	r0, r5
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	fbb0 f3f3 	udiv	r3, r0, r3
 8001266:	fbb3 f3f9 	udiv	r3, r3, r9
 800126a:	fb09 8313 	mls	r3, r9, r3, r8
 800126e:	011b      	lsls	r3, r3, #4
 8001270:	3332      	adds	r3, #50	; 0x32
 8001272:	fbb3 f3f9 	udiv	r3, r3, r9
 8001276:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800127a:	f7ff fec5 	bl	8001008 <HAL_RCC_GetPCLK1Freq>
 800127e:	6862      	ldr	r2, [r4, #4]
 8001280:	4368      	muls	r0, r5
 8001282:	0092      	lsls	r2, r2, #2
 8001284:	fbb0 faf2 	udiv	sl, r0, r2
 8001288:	f7ff febe 	bl	8001008 <HAL_RCC_GetPCLK1Freq>
 800128c:	e7bd      	b.n	800120a <UART_SetConfig+0x1a6>
 800128e:	bf00      	nop
 8001290:	40011000 	.word	0x40011000
 8001294:	40011400 	.word	0x40011400

08001298 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800129a:	4604      	mov	r4, r0
 800129c:	460e      	mov	r6, r1
 800129e:	4617      	mov	r7, r2
 80012a0:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80012a2:	6821      	ldr	r1, [r4, #0]
 80012a4:	680b      	ldr	r3, [r1, #0]
 80012a6:	ea36 0303 	bics.w	r3, r6, r3
 80012aa:	d101      	bne.n	80012b0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80012ac:	2000      	movs	r0, #0
}
 80012ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80012b0:	1c6b      	adds	r3, r5, #1
 80012b2:	d0f7      	beq.n	80012a4 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80012b4:	b995      	cbnz	r5, 80012dc <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80012b6:	6823      	ldr	r3, [r4, #0]
 80012b8:	68da      	ldr	r2, [r3, #12]
 80012ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80012be:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80012c0:	695a      	ldr	r2, [r3, #20]
 80012c2:	f022 0201 	bic.w	r2, r2, #1
 80012c6:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80012c8:	2320      	movs	r3, #32
 80012ca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80012ce:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80012d2:	2300      	movs	r3, #0
 80012d4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80012d8:	2003      	movs	r0, #3
 80012da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80012dc:	f7ff f94c 	bl	8000578 <HAL_GetTick>
 80012e0:	1bc0      	subs	r0, r0, r7
 80012e2:	4285      	cmp	r5, r0
 80012e4:	d2dd      	bcs.n	80012a2 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80012e6:	e7e6      	b.n	80012b6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080012e8 <HAL_UART_Init>:
{
 80012e8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80012ea:	4604      	mov	r4, r0
 80012ec:	b340      	cbz	r0, 8001340 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80012ee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80012f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80012f6:	b91b      	cbnz	r3, 8001300 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80012f8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80012fc:	f000 fc46 	bl	8001b8c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001300:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001302:	2324      	movs	r3, #36	; 0x24
 8001304:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001308:	68d3      	ldr	r3, [r2, #12]
 800130a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800130e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001310:	4620      	mov	r0, r4
 8001312:	f7ff fea7 	bl	8001064 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001316:	6823      	ldr	r3, [r4, #0]
 8001318:	691a      	ldr	r2, [r3, #16]
 800131a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800131e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001320:	695a      	ldr	r2, [r3, #20]
 8001322:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001326:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001328:	68da      	ldr	r2, [r3, #12]
 800132a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800132e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001330:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001332:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001334:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001336:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800133a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800133e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001340:	2001      	movs	r0, #1
}
 8001342:	bd10      	pop	{r4, pc}

08001344 <HAL_UART_Transmit>:
{
 8001344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001348:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800134a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800134e:	2b20      	cmp	r3, #32
{
 8001350:	4604      	mov	r4, r0
 8001352:	460d      	mov	r5, r1
 8001354:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001356:	d14f      	bne.n	80013f8 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8001358:	2900      	cmp	r1, #0
 800135a:	d04a      	beq.n	80013f2 <HAL_UART_Transmit+0xae>
 800135c:	2a00      	cmp	r2, #0
 800135e:	d048      	beq.n	80013f2 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001360:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001364:	2b01      	cmp	r3, #1
 8001366:	d047      	beq.n	80013f8 <HAL_UART_Transmit+0xb4>
 8001368:	2301      	movs	r3, #1
 800136a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800136e:	2300      	movs	r3, #0
 8001370:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001372:	2321      	movs	r3, #33	; 0x21
 8001374:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001378:	f7ff f8fe 	bl	8000578 <HAL_GetTick>
    huart->TxXferSize = Size;
 800137c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001380:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001382:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001386:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001388:	b29b      	uxth	r3, r3
 800138a:	b96b      	cbnz	r3, 80013a8 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800138c:	463b      	mov	r3, r7
 800138e:	4632      	mov	r2, r6
 8001390:	2140      	movs	r1, #64	; 0x40
 8001392:	4620      	mov	r0, r4
 8001394:	f7ff ff80 	bl	8001298 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001398:	b9b0      	cbnz	r0, 80013c8 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 800139a:	2320      	movs	r3, #32
 800139c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80013a0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 80013a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80013a8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80013aa:	3b01      	subs	r3, #1
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80013b0:	68a3      	ldr	r3, [r4, #8]
 80013b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013b6:	4632      	mov	r2, r6
 80013b8:	463b      	mov	r3, r7
 80013ba:	f04f 0180 	mov.w	r1, #128	; 0x80
 80013be:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80013c0:	d10e      	bne.n	80013e0 <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013c2:	f7ff ff69 	bl	8001298 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80013c6:	b110      	cbz	r0, 80013ce <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 80013c8:	2003      	movs	r0, #3
 80013ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80013ce:	882b      	ldrh	r3, [r5, #0]
 80013d0:	6822      	ldr	r2, [r4, #0]
 80013d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013d6:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80013d8:	6923      	ldr	r3, [r4, #16]
 80013da:	b943      	cbnz	r3, 80013ee <HAL_UART_Transmit+0xaa>
          pData += 2U;
 80013dc:	3502      	adds	r5, #2
 80013de:	e7d2      	b.n	8001386 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013e0:	f7ff ff5a 	bl	8001298 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80013e4:	2800      	cmp	r0, #0
 80013e6:	d1ef      	bne.n	80013c8 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80013e8:	6823      	ldr	r3, [r4, #0]
 80013ea:	782a      	ldrb	r2, [r5, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	3501      	adds	r5, #1
 80013f0:	e7c9      	b.n	8001386 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80013f2:	2001      	movs	r0, #1
 80013f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80013f8:	2002      	movs	r0, #2
}
 80013fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001400 <HAL_UART_Receive_DMA>:
{
 8001400:	4613      	mov	r3, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8001402:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 8001406:	2a20      	cmp	r2, #32
{
 8001408:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800140a:	4605      	mov	r5, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 800140c:	d138      	bne.n	8001480 <HAL_UART_Receive_DMA+0x80>
    if ((pData == NULL) || (Size == 0U))
 800140e:	2900      	cmp	r1, #0
 8001410:	d034      	beq.n	800147c <HAL_UART_Receive_DMA+0x7c>
 8001412:	2b00      	cmp	r3, #0
 8001414:	d032      	beq.n	800147c <HAL_UART_Receive_DMA+0x7c>
    __HAL_LOCK(huart);
 8001416:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800141a:	2a01      	cmp	r2, #1
 800141c:	d030      	beq.n	8001480 <HAL_UART_Receive_DMA+0x80>
 800141e:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001420:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 8001422:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001426:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001428:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->pRxBuffPtr = pData;
 800142a:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 800142c:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800142e:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001432:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001434:	4a13      	ldr	r2, [pc, #76]	; (8001484 <HAL_UART_Receive_DMA+0x84>)
 8001436:	63c2      	str	r2, [r0, #60]	; 0x3c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001438:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800143a:	4a13      	ldr	r2, [pc, #76]	; (8001488 <HAL_UART_Receive_DMA+0x88>)
 800143c:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800143e:	4a13      	ldr	r2, [pc, #76]	; (800148c <HAL_UART_Receive_DMA+0x8c>)
 8001440:	64c2      	str	r2, [r0, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 8001442:	6504      	str	r4, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001444:	460a      	mov	r2, r1
 8001446:	1d31      	adds	r1, r6, #4
 8001448:	f7ff f9ae 	bl	80007a8 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 800144c:	682b      	ldr	r3, [r5, #0]
 800144e:	9401      	str	r4, [sp, #4]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	9201      	str	r2, [sp, #4]
 8001454:	685a      	ldr	r2, [r3, #4]
 8001456:	9201      	str	r2, [sp, #4]
 8001458:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800145a:	68da      	ldr	r2, [r3, #12]
    __HAL_UNLOCK(huart);
 800145c:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001460:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001464:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001466:	695a      	ldr	r2, [r3, #20]
 8001468:	f042 0201 	orr.w	r2, r2, #1
 800146c:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800146e:	695a      	ldr	r2, [r3, #20]
 8001470:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001474:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 8001476:	4620      	mov	r0, r4
}
 8001478:	b002      	add	sp, #8
 800147a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800147c:	2001      	movs	r0, #1
 800147e:	e7fb      	b.n	8001478 <HAL_UART_Receive_DMA+0x78>
    return HAL_BUSY;
 8001480:	2002      	movs	r0, #2
 8001482:	e7f9      	b.n	8001478 <HAL_UART_Receive_DMA+0x78>
 8001484:	08001493 	.word	0x08001493
 8001488:	08001549 	.word	0x08001549
 800148c:	08001555 	.word	0x08001555

08001490 <HAL_UART_TxCpltCallback>:
 8001490:	4770      	bx	lr

08001492 <UART_DMAReceiveCplt>:
{
 8001492:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001494:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001496:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800149e:	d110      	bne.n	80014c2 <UART_DMAReceiveCplt+0x30>
    huart->RxXferCount = 0U;
 80014a0:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80014a2:	6813      	ldr	r3, [r2, #0]
 80014a4:	68d9      	ldr	r1, [r3, #12]
 80014a6:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80014aa:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80014ac:	6959      	ldr	r1, [r3, #20]
 80014ae:	f021 0101 	bic.w	r1, r1, #1
 80014b2:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80014b4:	6959      	ldr	r1, [r3, #20]
 80014b6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80014ba:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 80014bc:	2320      	movs	r3, #32
 80014be:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 80014c2:	4610      	mov	r0, r2
 80014c4:	f000 fa52 	bl	800196c <HAL_UART_RxCpltCallback>
 80014c8:	bd08      	pop	{r3, pc}

080014ca <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80014ca:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80014ce:	2b22      	cmp	r3, #34	; 0x22
{
 80014d0:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80014d2:	d136      	bne.n	8001542 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80014d4:	6883      	ldr	r3, [r0, #8]
 80014d6:	6901      	ldr	r1, [r0, #16]
 80014d8:	6802      	ldr	r2, [r0, #0]
 80014da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014de:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80014e0:	d123      	bne.n	800152a <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80014e2:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80014e4:	b9e9      	cbnz	r1, 8001522 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80014e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80014ea:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80014ee:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80014f0:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80014f2:	3c01      	subs	r4, #1
 80014f4:	b2a4      	uxth	r4, r4
 80014f6:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80014f8:	b98c      	cbnz	r4, 800151e <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80014fa:	6803      	ldr	r3, [r0, #0]
 80014fc:	68da      	ldr	r2, [r3, #12]
 80014fe:	f022 0220 	bic.w	r2, r2, #32
 8001502:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001504:	68da      	ldr	r2, [r3, #12]
 8001506:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800150a:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800150c:	695a      	ldr	r2, [r3, #20]
 800150e:	f022 0201 	bic.w	r2, r2, #1
 8001512:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001514:	2320      	movs	r3, #32
 8001516:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800151a:	f000 fa27 	bl	800196c <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 800151e:	2000      	movs	r0, #0
}
 8001520:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	f823 2b01 	strh.w	r2, [r3], #1
 8001528:	e7e1      	b.n	80014ee <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 800152a:	b921      	cbnz	r1, 8001536 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800152c:	1c59      	adds	r1, r3, #1
 800152e:	6852      	ldr	r2, [r2, #4]
 8001530:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001532:	701a      	strb	r2, [r3, #0]
 8001534:	e7dc      	b.n	80014f0 <UART_Receive_IT+0x26>
 8001536:	6852      	ldr	r2, [r2, #4]
 8001538:	1c59      	adds	r1, r3, #1
 800153a:	6281      	str	r1, [r0, #40]	; 0x28
 800153c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001540:	e7f7      	b.n	8001532 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8001542:	2002      	movs	r0, #2
 8001544:	bd10      	pop	{r4, pc}

08001546 <HAL_UART_RxHalfCpltCallback>:
 8001546:	4770      	bx	lr

08001548 <UART_DMARxHalfCplt>:
{
 8001548:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 800154a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800154c:	f7ff fffb 	bl	8001546 <HAL_UART_RxHalfCpltCallback>
 8001550:	bd08      	pop	{r3, pc}

08001552 <HAL_UART_ErrorCallback>:
 8001552:	4770      	bx	lr

08001554 <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001554:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 8001556:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001558:	680b      	ldr	r3, [r1, #0]
 800155a:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800155c:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8001560:	2821      	cmp	r0, #33	; 0x21
 8001562:	d10a      	bne.n	800157a <UART_DMAError+0x26>
 8001564:	0612      	lsls	r2, r2, #24
 8001566:	d508      	bpl.n	800157a <UART_DMAError+0x26>
    huart->TxXferCount = 0x00U;
 8001568:	2200      	movs	r2, #0
 800156a:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800156c:	68da      	ldr	r2, [r3, #12]
 800156e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001572:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001574:	2220      	movs	r2, #32
 8001576:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800157a:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800157c:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8001580:	2a22      	cmp	r2, #34	; 0x22
 8001582:	d106      	bne.n	8001592 <UART_DMAError+0x3e>
 8001584:	065b      	lsls	r3, r3, #25
 8001586:	d504      	bpl.n	8001592 <UART_DMAError+0x3e>
    huart->RxXferCount = 0x00U;
 8001588:	2300      	movs	r3, #0
 800158a:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800158c:	4608      	mov	r0, r1
 800158e:	f7ff fd5b 	bl	8001048 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001592:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8001594:	f043 0310 	orr.w	r3, r3, #16
 8001598:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 800159a:	4608      	mov	r0, r1
 800159c:	f7ff ffd9 	bl	8001552 <HAL_UART_ErrorCallback>
 80015a0:	bd08      	pop	{r3, pc}
	...

080015a4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80015a4:	6803      	ldr	r3, [r0, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80015a8:	68d9      	ldr	r1, [r3, #12]
{
 80015aa:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80015ac:	0716      	lsls	r6, r2, #28
{
 80015ae:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80015b0:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80015b2:	d107      	bne.n	80015c4 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80015b4:	0696      	lsls	r6, r2, #26
 80015b6:	d55a      	bpl.n	800166e <HAL_UART_IRQHandler+0xca>
 80015b8:	068d      	lsls	r5, r1, #26
 80015ba:	d558      	bpl.n	800166e <HAL_UART_IRQHandler+0xca>
}
 80015bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80015c0:	f7ff bf83 	b.w	80014ca <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80015c4:	f015 0501 	ands.w	r5, r5, #1
 80015c8:	d102      	bne.n	80015d0 <HAL_UART_IRQHandler+0x2c>
 80015ca:	f411 7f90 	tst.w	r1, #288	; 0x120
 80015ce:	d04e      	beq.n	800166e <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80015d0:	07d3      	lsls	r3, r2, #31
 80015d2:	d505      	bpl.n	80015e0 <HAL_UART_IRQHandler+0x3c>
 80015d4:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80015d6:	bf42      	ittt	mi
 80015d8:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80015da:	f043 0301 	orrmi.w	r3, r3, #1
 80015de:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80015e0:	0750      	lsls	r0, r2, #29
 80015e2:	d504      	bpl.n	80015ee <HAL_UART_IRQHandler+0x4a>
 80015e4:	b11d      	cbz	r5, 80015ee <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80015e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80015ee:	0793      	lsls	r3, r2, #30
 80015f0:	d504      	bpl.n	80015fc <HAL_UART_IRQHandler+0x58>
 80015f2:	b11d      	cbz	r5, 80015fc <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80015f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015f6:	f043 0304 	orr.w	r3, r3, #4
 80015fa:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80015fc:	0716      	lsls	r6, r2, #28
 80015fe:	d504      	bpl.n	800160a <HAL_UART_IRQHandler+0x66>
 8001600:	b11d      	cbz	r5, 800160a <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001602:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001604:	f043 0308 	orr.w	r3, r3, #8
 8001608:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800160a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800160c:	2b00      	cmp	r3, #0
 800160e:	d066      	beq.n	80016de <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001610:	0695      	lsls	r5, r2, #26
 8001612:	d504      	bpl.n	800161e <HAL_UART_IRQHandler+0x7a>
 8001614:	0688      	lsls	r0, r1, #26
 8001616:	d502      	bpl.n	800161e <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001618:	4620      	mov	r0, r4
 800161a:	f7ff ff56 	bl	80014ca <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800161e:	6823      	ldr	r3, [r4, #0]
 8001620:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001622:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001624:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8001626:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001628:	d402      	bmi.n	8001630 <HAL_UART_IRQHandler+0x8c>
 800162a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800162e:	d01a      	beq.n	8001666 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001630:	f7ff fd0a 	bl	8001048 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001634:	6823      	ldr	r3, [r4, #0]
 8001636:	695a      	ldr	r2, [r3, #20]
 8001638:	0652      	lsls	r2, r2, #25
 800163a:	d510      	bpl.n	800165e <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800163c:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800163e:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001640:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001644:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001646:	b150      	cbz	r0, 800165e <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001648:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <HAL_UART_IRQHandler+0x13c>)
 800164a:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800164c:	f7ff f8ea 	bl	8000824 <HAL_DMA_Abort_IT>
 8001650:	2800      	cmp	r0, #0
 8001652:	d044      	beq.n	80016de <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001654:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001656:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800165a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800165c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800165e:	4620      	mov	r0, r4
 8001660:	f7ff ff77 	bl	8001552 <HAL_UART_ErrorCallback>
 8001664:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001666:	f7ff ff74 	bl	8001552 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800166a:	63e5      	str	r5, [r4, #60]	; 0x3c
 800166c:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800166e:	0616      	lsls	r6, r2, #24
 8001670:	d527      	bpl.n	80016c2 <HAL_UART_IRQHandler+0x11e>
 8001672:	060d      	lsls	r5, r1, #24
 8001674:	d525      	bpl.n	80016c2 <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001676:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800167a:	2a21      	cmp	r2, #33	; 0x21
 800167c:	d12f      	bne.n	80016de <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800167e:	68a2      	ldr	r2, [r4, #8]
 8001680:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001684:	6a22      	ldr	r2, [r4, #32]
 8001686:	d117      	bne.n	80016b8 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001688:	8811      	ldrh	r1, [r2, #0]
 800168a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800168e:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001690:	6921      	ldr	r1, [r4, #16]
 8001692:	b979      	cbnz	r1, 80016b4 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8001694:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8001696:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8001698:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800169a:	3a01      	subs	r2, #1
 800169c:	b292      	uxth	r2, r2
 800169e:	84e2      	strh	r2, [r4, #38]	; 0x26
 80016a0:	b9ea      	cbnz	r2, 80016de <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80016a2:	68da      	ldr	r2, [r3, #12]
 80016a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016a8:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80016aa:	68da      	ldr	r2, [r3, #12]
 80016ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80016b4:	3201      	adds	r2, #1
 80016b6:	e7ee      	b.n	8001696 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80016b8:	1c51      	adds	r1, r2, #1
 80016ba:	6221      	str	r1, [r4, #32]
 80016bc:	7812      	ldrb	r2, [r2, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	e7ea      	b.n	8001698 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80016c2:	0650      	lsls	r0, r2, #25
 80016c4:	d50b      	bpl.n	80016de <HAL_UART_IRQHandler+0x13a>
 80016c6:	064a      	lsls	r2, r1, #25
 80016c8:	d509      	bpl.n	80016de <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80016ca:	68da      	ldr	r2, [r3, #12]
 80016cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016d0:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80016d2:	2320      	movs	r3, #32
 80016d4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80016d8:	4620      	mov	r0, r4
 80016da:	f7ff fed9 	bl	8001490 <HAL_UART_TxCpltCallback>
 80016de:	bd70      	pop	{r4, r5, r6, pc}
 80016e0:	080016e5 	.word	0x080016e5

080016e4 <UART_DMAAbortOnError>:
{
 80016e4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016e6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80016ec:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80016ee:	f7ff ff30 	bl	8001552 <HAL_UART_ErrorCallback>
 80016f2:	bd08      	pop	{r3, pc}

080016f4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80016f4:	b507      	push	{r0, r1, r2, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016f6:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <MX_DMA_Init+0x30>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	9201      	str	r2, [sp, #4]
 80016fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016fe:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8001702:	6319      	str	r1, [r3, #48]	; 0x30
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800170a:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800170c:	4611      	mov	r1, r2
 800170e:	203a      	movs	r0, #58	; 0x3a
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001710:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001712:	f7fe ff5d 	bl	80005d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001716:	203a      	movs	r0, #58	; 0x3a
 8001718:	f7fe ff8e 	bl	8000638 <HAL_NVIC_EnableIRQ>

}
 800171c:	b003      	add	sp, #12
 800171e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800

08001728 <MX_GPIO_Init>:
        * EXTI
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8001728:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172a:	2214      	movs	r2, #20
{
 800172c:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172e:	eb0d 0002 	add.w	r0, sp, r2
 8001732:	2100      	movs	r1, #0
 8001734:	f000 fafc 	bl	8001d30 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001738:	2400      	movs	r4, #0
 800173a:	4b29      	ldr	r3, [pc, #164]	; (80017e0 <MX_GPIO_Init+0xb8>)
 800173c:	9401      	str	r4, [sp, #4]
 800173e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001740:	4e28      	ldr	r6, [pc, #160]	; (80017e4 <MX_GPIO_Init+0xbc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001742:	f042 0204 	orr.w	r2, r2, #4
 8001746:	631a      	str	r2, [r3, #48]	; 0x30
 8001748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800174a:	f002 0204 	and.w	r2, r2, #4
 800174e:	9201      	str	r2, [sp, #4]
 8001750:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001752:	9402      	str	r4, [sp, #8]
 8001754:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001756:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800175a:	631a      	str	r2, [r3, #48]	; 0x30
 800175c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800175e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001762:	9202      	str	r2, [sp, #8]
 8001764:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001766:	9403      	str	r4, [sp, #12]
 8001768:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800176a:	f042 0201 	orr.w	r2, r2, #1
 800176e:	631a      	str	r2, [r3, #48]	; 0x30
 8001770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001772:	f002 0201 	and.w	r2, r2, #1
 8001776:	9203      	str	r2, [sp, #12]
 8001778:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177a:	9404      	str	r4, [sp, #16]
 800177c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800177e:	f042 0202 	orr.w	r2, r2, #2
 8001782:	631a      	str	r2, [r3, #48]	; 0x30
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800178a:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800178c:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800178e:	4630      	mov	r0, r6
 8001790:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001792:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001794:	f7ff f9e8 	bl	8000b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001798:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800179c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800179e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <MX_GPIO_Init+0xc0>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017a2:	4812      	ldr	r0, [pc, #72]	; (80017ec <MX_GPIO_Init+0xc4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017a4:	9306      	str	r3, [sp, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a6:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017aa:	f7ff f907 	bl	80009bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 80017ae:	2320      	movs	r3, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017b0:	a905      	add	r1, sp, #20
 80017b2:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = LD2_Pin;
 80017b4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b6:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017bc:	f7ff f8fe 	bl	80009bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017c4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017c6:	2312      	movs	r3, #18
 80017c8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ca:	2303      	movs	r3, #3
 80017cc:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ce:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017d0:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d2:	4807      	ldr	r0, [pc, #28]	; (80017f0 <MX_GPIO_Init+0xc8>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017d4:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017d6:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d8:	f7ff f8f0 	bl	80009bc <HAL_GPIO_Init>

}
 80017dc:	b00a      	add	sp, #40	; 0x28
 80017de:	bd70      	pop	{r4, r5, r6, pc}
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40020000 	.word	0x40020000
 80017e8:	10210000 	.word	0x10210000
 80017ec:	40020800 	.word	0x40020800
 80017f0:	40020400 	.word	0x40020400

080017f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017f4:	b530      	push	{r4, r5, lr}
 80017f6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017f8:	2230      	movs	r2, #48	; 0x30
 80017fa:	2100      	movs	r1, #0
 80017fc:	a808      	add	r0, sp, #32
 80017fe:	f000 fa97 	bl	8001d30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001802:	2100      	movs	r1, #0
 8001804:	2214      	movs	r2, #20
 8001806:	a803      	add	r0, sp, #12
 8001808:	f000 fa92 	bl	8001d30 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800180c:	2400      	movs	r4, #0
 800180e:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <SystemClock_Config+0x8c>)
 8001810:	9401      	str	r4, [sp, #4]
 8001812:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001814:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001818:	641a      	str	r2, [r3, #64]	; 0x40
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800181c:	4a19      	ldr	r2, [pc, #100]	; (8001884 <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001822:	9301      	str	r3, [sp, #4]
 8001824:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001826:	9402      	str	r4, [sp, #8]
 8001828:	6813      	ldr	r3, [r2, #0]
 800182a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800182e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	6813      	ldr	r3, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001836:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001838:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800183c:	9302      	str	r3, [sp, #8]
 800183e:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001840:	2301      	movs	r3, #1
 8001842:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001844:	2310      	movs	r3, #16
 8001846:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001848:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800184a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800184e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001850:	2304      	movs	r3, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001852:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001854:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001856:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001858:	2307      	movs	r3, #7
 800185a:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800185c:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800185e:	950e      	str	r5, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001860:	f7ff f988 	bl	8000b74 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001864:	230f      	movs	r3, #15
 8001866:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001868:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800186a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800186e:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001870:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001872:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001874:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001876:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001878:	f7ff fb2c 	bl	8000ed4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800187c:	b015      	add	sp, #84	; 0x54
 800187e:	bd30      	pop	{r4, r5, pc}
 8001880:	40023800 	.word	0x40023800
 8001884:	40007000 	.word	0x40007000

08001888 <main>:
{
 8001888:	b580      	push	{r7, lr}
  int8_t data_int8_t[] = { -128, -2, -1, 0, 1, 2, 127 };
 800188a:	4b34      	ldr	r3, [pc, #208]	; (800195c <main+0xd4>)
{
 800188c:	b090      	sub	sp, #64	; 0x40
  int8_t data_int8_t[] = { -128, -2, -1, 0, 1, 2, 127 };
 800188e:	799a      	ldrb	r2, [r3, #6]
 8001890:	6818      	ldr	r0, [r3, #0]
 8001892:	8899      	ldrh	r1, [r3, #4]
 8001894:	f88d 2012 	strb.w	r2, [sp, #18]
  int16_t data_int16_t[] = { -32768, -256, -255, -254, 0, 254, 255, 256, 32767 };
 8001898:	ac05      	add	r4, sp, #20
 800189a:	f103 0208 	add.w	r2, r3, #8
  int8_t data_int8_t[] = { -128, -2, -1, 0, 1, 2, 127 };
 800189e:	9003      	str	r0, [sp, #12]
 80018a0:	f8ad 1010 	strh.w	r1, [sp, #16]
  int16_t data_int16_t[] = { -32768, -256, -255, -254, 0, 254, 255, 256, 32767 };
 80018a4:	3318      	adds	r3, #24
 80018a6:	4626      	mov	r6, r4
 80018a8:	6810      	ldr	r0, [r2, #0]
 80018aa:	6851      	ldr	r1, [r2, #4]
 80018ac:	4625      	mov	r5, r4
 80018ae:	c503      	stmia	r5!, {r0, r1}
 80018b0:	3208      	adds	r2, #8
 80018b2:	429a      	cmp	r2, r3
 80018b4:	462c      	mov	r4, r5
 80018b6:	d1f7      	bne.n	80018a8 <main+0x20>
 80018b8:	8813      	ldrh	r3, [r2, #0]
 80018ba:	802b      	strh	r3, [r5, #0]
  char data_ascii[] = "ASCII";
 80018bc:	4b28      	ldr	r3, [pc, #160]	; (8001960 <main+0xd8>)
    if (request_received) {
 80018be:	4c29      	ldr	r4, [pc, #164]	; (8001964 <main+0xdc>)
  char data_ascii[] = "ASCII";
 80018c0:	6818      	ldr	r0, [r3, #0]
 80018c2:	889b      	ldrh	r3, [r3, #4]
 80018c4:	f8ad 3008 	strh.w	r3, [sp, #8]
 80018c8:	9001      	str	r0, [sp, #4]
  HAL_Init();
 80018ca:	f7fe fe2f 	bl	800052c <HAL_Init>
  SystemClock_Config();
 80018ce:	f7ff ff91 	bl	80017f4 <SystemClock_Config>
  MX_GPIO_Init();
 80018d2:	f7ff ff29 	bl	8001728 <MX_GPIO_Init>
  MX_DMA_Init();
 80018d6:	f7ff ff0d 	bl	80016f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80018da:	f000 f93b 	bl	8001b54 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80018de:	f000 f91d 	bl	8001b1c <MX_USART1_UART_Init>
  HAL_UART_Receive_DMA(&huart1, buf, EOT_POS + 1);
 80018e2:	2215      	movs	r2, #21
 80018e4:	a90a      	add	r1, sp, #40	; 0x28
 80018e6:	4820      	ldr	r0, [pc, #128]	; (8001968 <main+0xe0>)
      HAL_UART_Receive_DMA(&huart1, buf, EOT_POS + 1);
 80018e8:	4d1f      	ldr	r5, [pc, #124]	; (8001968 <main+0xe0>)
  HAL_UART_Receive_DMA(&huart1, buf, EOT_POS + 1);
 80018ea:	f7ff fd89 	bl	8001400 <HAL_UART_Receive_DMA>
 80018ee:	4627      	mov	r7, r4
    HAL_Delay(1);
 80018f0:	2001      	movs	r0, #1
 80018f2:	f7fe fe47 	bl	8000584 <HAL_Delay>
    if (request_received) {
 80018f6:	7823      	ldrb	r3, [r4, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0f9      	beq.n	80018f0 <main+0x68>
      twelite_uart_rx(buf, &cmd, &seq);
 80018fc:	f10d 0203 	add.w	r2, sp, #3
 8001900:	f10d 0102 	add.w	r1, sp, #2
 8001904:	a80a      	add	r0, sp, #40	; 0x28
 8001906:	f000 f8eb 	bl	8001ae0 <twelite_uart_rx>
      switch (cmd) {
 800190a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800190e:	2b69      	cmp	r3, #105	; 0x69
 8001910:	d00b      	beq.n	800192a <main+0xa2>
 8001912:	2b6c      	cmp	r3, #108	; 0x6c
 8001914:	d01a      	beq.n	800194c <main+0xc4>
 8001916:	2b61      	cmp	r3, #97	; 0x61
 8001918:	d110      	bne.n	800193c <main+0xb4>
        twelite_uart_tx((uint8_t *) data_ascii, seq++, sizeof(data_ascii));
 800191a:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800191e:	1c4b      	adds	r3, r1, #1
 8001920:	f88d 3003 	strb.w	r3, [sp, #3]
 8001924:	2206      	movs	r2, #6
 8001926:	a801      	add	r0, sp, #4
 8001928:	e006      	b.n	8001938 <main+0xb0>
        twelite_uart_tx((uint8_t *) data_int8_t, seq++, sizeof(data_int8_t));
 800192a:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800192e:	1c4b      	adds	r3, r1, #1
 8001930:	f88d 3003 	strb.w	r3, [sp, #3]
 8001934:	2207      	movs	r2, #7
 8001936:	a803      	add	r0, sp, #12
        twelite_uart_tx((uint8_t *) data_ascii, seq++, sizeof(data_ascii));
 8001938:	f000 f88c 	bl	8001a54 <twelite_uart_tx>
      request_received = false;
 800193c:	2300      	movs	r3, #0
      HAL_UART_Receive_DMA(&huart1, buf, EOT_POS + 1);
 800193e:	2215      	movs	r2, #21
 8001940:	a90a      	add	r1, sp, #40	; 0x28
 8001942:	4628      	mov	r0, r5
      request_received = false;
 8001944:	703b      	strb	r3, [r7, #0]
      HAL_UART_Receive_DMA(&huart1, buf, EOT_POS + 1);
 8001946:	f7ff fd5b 	bl	8001400 <HAL_UART_Receive_DMA>
 800194a:	e7d1      	b.n	80018f0 <main+0x68>
        twelite_uart_tx((uint8_t *) data_int16_t, seq++, sizeof(data_int16_t));
 800194c:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8001950:	1c4b      	adds	r3, r1, #1
 8001952:	f88d 3003 	strb.w	r3, [sp, #3]
 8001956:	2212      	movs	r2, #18
 8001958:	4630      	mov	r0, r6
 800195a:	e7ed      	b.n	8001938 <main+0xb0>
 800195c:	08001d58 	.word	0x08001d58
 8001960:	08001d7a 	.word	0x08001d7a
 8001964:	20000028 	.word	0x20000028
 8001968:	20000090 	.word	0x20000090

0800196c <HAL_UART_RxCpltCallback>:

/*
 * One-byte command reception from PC
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
  request_received = true;
 800196c:	4b01      	ldr	r3, [pc, #4]	; (8001974 <HAL_UART_RxCpltCallback+0x8>)
 800196e:	2201      	movs	r2, #1
 8001970:	701a      	strb	r2, [r3, #0]
 8001972:	4770      	bx	lr
 8001974:	20000028 	.word	0x20000028

08001978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001978:	4770      	bx	lr
	...

0800197c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800197c:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <HAL_MspInit+0x3c>)
 8001980:	2100      	movs	r1, #0
 8001982:	9100      	str	r1, [sp, #0]
 8001984:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001986:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800198a:	645a      	str	r2, [r3, #68]	; 0x44
 800198c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800198e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001992:	9200      	str	r2, [sp, #0]
 8001994:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001996:	9101      	str	r1, [sp, #4]
 8001998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800199a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800199e:	641a      	str	r2, [r3, #64]	; 0x40
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a6:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019a8:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 80019aa:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019ac:	f7fe fdfe 	bl	80005ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b0:	b003      	add	sp, #12
 80019b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80019b6:	bf00      	nop
 80019b8:	40023800 	.word	0x40023800

080019bc <NMI_Handler>:
 80019bc:	4770      	bx	lr

080019be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019be:	e7fe      	b.n	80019be <HardFault_Handler>

080019c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c0:	e7fe      	b.n	80019c0 <MemManage_Handler>

080019c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c2:	e7fe      	b.n	80019c2 <BusFault_Handler>

080019c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c4:	e7fe      	b.n	80019c4 <UsageFault_Handler>

080019c6 <SVC_Handler>:
 80019c6:	4770      	bx	lr

080019c8 <DebugMon_Handler>:
 80019c8:	4770      	bx	lr

080019ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ca:	4770      	bx	lr

080019cc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019cc:	f7fe bdc8 	b.w	8000560 <HAL_IncTick>

080019d0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019d0:	4801      	ldr	r0, [pc, #4]	; (80019d8 <USART1_IRQHandler+0x8>)
 80019d2:	f7ff bde7 	b.w	80015a4 <HAL_UART_IRQHandler>
 80019d6:	bf00      	nop
 80019d8:	20000090 	.word	0x20000090

080019dc <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80019dc:	4801      	ldr	r0, [pc, #4]	; (80019e4 <DMA2_Stream2_IRQHandler+0x8>)
 80019de:	f7fe bf33 	b.w	8000848 <HAL_DMA_IRQHandler>
 80019e2:	bf00      	nop
 80019e4:	20000030 	.word	0x20000030

080019e8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019e8:	490f      	ldr	r1, [pc, #60]	; (8001a28 <SystemInit+0x40>)
 80019ea:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80019ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80019f6:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <SystemInit+0x44>)
 80019f8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019fa:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80019fc:	f042 0201 	orr.w	r2, r2, #1
 8001a00:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001a02:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001a0a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a0e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001a10:	4a07      	ldr	r2, [pc, #28]	; (8001a30 <SystemInit+0x48>)
 8001a12:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a1a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001a1c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001a22:	608b      	str	r3, [r1, #8]
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	e000ed00 	.word	0xe000ed00
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	24003010 	.word	0x24003010

08001a34 <send_one>:

#include "twelite.h"
#include <stdint.h>
#include <stdio.h>

void send_one(uint8_t data) {
 8001a34:	b507      	push	{r0, r1, r2, lr}
 8001a36:	a902      	add	r1, sp, #8
  HAL_UART_Transmit(&huart1, &data, 1, 0xFFFFFFFF);
 8001a38:	f04f 33ff 	mov.w	r3, #4294967295
void send_one(uint8_t data) {
 8001a3c:	f801 0d01 	strb.w	r0, [r1, #-1]!
  HAL_UART_Transmit(&huart1, &data, 1, 0xFFFFFFFF);
 8001a40:	2201      	movs	r2, #1
 8001a42:	4803      	ldr	r0, [pc, #12]	; (8001a50 <send_one+0x1c>)
 8001a44:	f7ff fc7e 	bl	8001344 <HAL_UART_Transmit>
}
 8001a48:	b003      	add	sp, #12
 8001a4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a4e:	bf00      	nop
 8001a50:	20000090 	.word	0x20000090

08001a54 <twelite_uart_tx>:

void twelite_uart_tx(uint8_t *pbuf, uint8_t seq, uint8_t len) {
 8001a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a58:	4607      	mov	r7, r0
    static uint8_t cs;

    //--- Binary transfer mode header
    //printf("start\n");
    send_one(0xA5); // Binary transfer mode header
 8001a5a:	20a5      	movs	r0, #165	; 0xa5
void twelite_uart_tx(uint8_t *pbuf, uint8_t seq, uint8_t len) {
 8001a5c:	460d      	mov	r5, r1
 8001a5e:	4616      	mov	r6, r2
    send_one(0xA5); // Binary transfer mode header
 8001a60:	f7ff ffe8 	bl	8001a34 <send_one>
    send_one(0x5A); // Binary transfer mode header
 8001a64:	205a      	movs	r0, #90	; 0x5a
 8001a66:	f7ff ffe5 	bl	8001a34 <send_one>
    send_one(0x80); // Data length MSB
 8001a6a:	2080      	movs	r0, #128	; 0x80
 8001a6c:	f7ff ffe2 	bl	8001a34 <send_one>
    send_one(len + 8); // Data length LSB
 8001a70:	f106 0008 	add.w	r0, r6, #8
 8001a74:	b2c0      	uxtb	r0, r0
 8001a76:	f7ff ffdd 	bl	8001a34 <send_one>
    //--- Packet header
    send_one(DST_NODE); // Destination is "parent node"
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f7ff ffda 	bl	8001a34 <send_one>
    send_one(BYTE); // Byte (fixed)
 8001a80:	20a0      	movs	r0, #160	; 0xa0
 8001a82:	f7ff ffd7 	bl	8001a34 <send_one>
    send_one(seq); // Sequence number
 8001a86:	4628      	mov	r0, r5
 8001a88:	f7ff ffd4 	bl	8001a34 <send_one>
    //--- Options
    send_one(RESPONSE_MSG_DISABLED);
 8001a8c:	2007      	movs	r0, #7
 8001a8e:	f7ff ffd1 	bl	8001a34 <send_one>
    send_one(ACK_ENABLED); // ACK enabled
 8001a92:	2001      	movs	r0, #1
 8001a94:	f7ff ffce 	bl	8001a34 <send_one>
    send_one(RESEND); // Resend
 8001a98:	2002      	movs	r0, #2
 8001a9a:	f7ff ffcb 	bl	8001a34 <send_one>
    send_one(NUM_RETRY); // The number of retries
    send_one(TERMINATOR); // Terminator
    //--- Payload
    cs = DST_NODE ^ BYTE ^ seq ^ RESPONSE_MSG_DISABLED ^ ACK_ENABLED ^ RESEND ^ NUM_RETRY ^ TERMINATOR;
 8001a9e:	4c0f      	ldr	r4, [pc, #60]	; (8001adc <twelite_uart_tx+0x88>)
    send_one(NUM_RETRY); // The number of retries
 8001aa0:	2003      	movs	r0, #3
 8001aa2:	f7ff ffc7 	bl	8001a34 <send_one>
    cs = DST_NODE ^ BYTE ^ seq ^ RESPONSE_MSG_DISABLED ^ ACK_ENABLED ^ RESEND ^ NUM_RETRY ^ TERMINATOR;
 8001aa6:	f085 0558 	eor.w	r5, r5, #88	; 0x58
    send_one(TERMINATOR); // Terminator
 8001aaa:	20ff      	movs	r0, #255	; 0xff
 8001aac:	f7ff ffc2 	bl	8001a34 <send_one>
    cs = DST_NODE ^ BYTE ^ seq ^ RESPONSE_MSG_DISABLED ^ ACK_ENABLED ^ RESEND ^ NUM_RETRY ^ TERMINATOR;
 8001ab0:	7025      	strb	r5, [r4, #0]
    //cs = DST_NODE ^ BYTE ^ seq ^ RESPONSE_MSG_DISABLED ^ TERMINATOR;
    for (int i = 0; i < len; i++) { // Payload
 8001ab2:	463d      	mov	r5, r7
 8001ab4:	1beb      	subs	r3, r5, r7
 8001ab6:	429e      	cmp	r6, r3
 8001ab8:	dc04      	bgt.n	8001ac4 <twelite_uart_tx+0x70>
        send_one(pbuf[i]);
        cs = cs ^ pbuf[i];
    }
    //--- Checksum
    send_one(cs); // Checksum
 8001aba:	7820      	ldrb	r0, [r4, #0]
    //printf("cs: %x\n", cs);
}
 8001abc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    send_one(cs); // Checksum
 8001ac0:	f7ff bfb8 	b.w	8001a34 <send_one>
 8001ac4:	46a8      	mov	r8, r5
        send_one(pbuf[i]);
 8001ac6:	f815 0b01 	ldrb.w	r0, [r5], #1
 8001aca:	f7ff ffb3 	bl	8001a34 <send_one>
        cs = cs ^ pbuf[i];
 8001ace:	7822      	ldrb	r2, [r4, #0]
 8001ad0:	f898 3000 	ldrb.w	r3, [r8]
 8001ad4:	4053      	eors	r3, r2
 8001ad6:	7023      	strb	r3, [r4, #0]
 8001ad8:	e7ec      	b.n	8001ab4 <twelite_uart_tx+0x60>
 8001ada:	bf00      	nop
 8001adc:	20000029 	.word	0x20000029

08001ae0 <twelite_uart_rx>:

/**
 * Note: this API is just for receiving an one-byte payload.
 */
void twelite_uart_rx(uint8_t* buf, uint8_t *cmd, uint8_t *seq) {
 8001ae0:	b508      	push	{r3, lr}
    if (buf[EOT_POS] != EOT) {
 8001ae2:	7d03      	ldrb	r3, [r0, #20]
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	d00f      	beq.n	8001b08 <twelite_uart_rx+0x28>
      HAL_Delay(RESET_DELAY);
 8001ae8:	2032      	movs	r0, #50	; 0x32
 8001aea:	f7fe fd4b 	bl	8000584 <HAL_Delay>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001aee:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001af2:	4908      	ldr	r1, [pc, #32]	; (8001b14 <twelite_uart_rx+0x34>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001af4:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <twelite_uart_rx+0x38>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001af6:	68ca      	ldr	r2, [r1, #12]
 8001af8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001afc:	4313      	orrs	r3, r2
 8001afe:	60cb      	str	r3, [r1, #12]
 8001b00:	f3bf 8f4f 	dsb	sy
    __NOP();
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <twelite_uart_rx+0x24>
      NVIC_SystemReset();
      //return false;
    } else {
      *seq = buf[SEQ_NUMBER_POS];
 8001b08:	7983      	ldrb	r3, [r0, #6]
 8001b0a:	7013      	strb	r3, [r2, #0]
      *cmd = buf[PAYLOAD_POS];
 8001b0c:	7c83      	ldrb	r3, [r0, #18]
 8001b0e:	700b      	strb	r3, [r1, #0]
 8001b10:	bd08      	pop	{r3, pc}
 8001b12:	bf00      	nop
 8001b14:	e000ed00 	.word	0xe000ed00
 8001b18:	05fa0004 	.word	0x05fa0004

08001b1c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b1c:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8001b1e:	480b      	ldr	r0, [pc, #44]	; (8001b4c <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <MX_USART1_UART_Init+0x34>)
 8001b22:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8001b26:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b2a:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b30:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b32:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b34:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b36:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b38:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b3a:	f7ff fbd5 	bl	80012e8 <HAL_UART_Init>
 8001b3e:	b118      	cbz	r0, 8001b48 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8001b40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001b44:	f7ff bf18 	b.w	8001978 <Error_Handler>
 8001b48:	bd08      	pop	{r3, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000090 	.word	0x20000090
 8001b50:	40011000 	.word	0x40011000

08001b54 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b54:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8001b56:	480b      	ldr	r0, [pc, #44]	; (8001b84 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8001b58:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <MX_USART2_UART_Init+0x34>)
 8001b5a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8001b5e:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b62:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b64:	2300      	movs	r3, #0
 8001b66:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b68:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b6a:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b6c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b6e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b70:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b72:	f7ff fbb9 	bl	80012e8 <HAL_UART_Init>
 8001b76:	b118      	cbz	r0, 8001b80 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8001b78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001b7c:	f7ff befc 	b.w	8001978 <Error_Handler>
 8001b80:	bd08      	pop	{r3, pc}
 8001b82:	bf00      	nop
 8001b84:	200000d0 	.word	0x200000d0
 8001b88:	40004400 	.word	0x40004400

08001b8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b8c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8e:	2214      	movs	r2, #20
{
 8001b90:	b08a      	sub	sp, #40	; 0x28
 8001b92:	4606      	mov	r6, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	2100      	movs	r1, #0
 8001b96:	eb0d 0002 	add.w	r0, sp, r2
 8001b9a:	f000 f8c9 	bl	8001d30 <memset>
  if(uartHandle->Instance==USART1)
 8001b9e:	6833      	ldr	r3, [r6, #0]
 8001ba0:	4a36      	ldr	r2, [pc, #216]	; (8001c7c <HAL_UART_MspInit+0xf0>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d146      	bne.n	8001c34 <HAL_UART_MspInit+0xa8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ba6:	2500      	movs	r5, #0
 8001ba8:	4b35      	ldr	r3, [pc, #212]	; (8001c80 <HAL_UART_MspInit+0xf4>)
 8001baa:	9501      	str	r5, [sp, #4]
 8001bac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bae:	4835      	ldr	r0, [pc, #212]	; (8001c84 <HAL_UART_MspInit+0xf8>)

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001bb0:	4c35      	ldr	r4, [pc, #212]	; (8001c88 <HAL_UART_MspInit+0xfc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bb2:	f042 0210 	orr.w	r2, r2, #16
 8001bb6:	645a      	str	r2, [r3, #68]	; 0x44
 8001bb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bba:	f002 0210 	and.w	r2, r2, #16
 8001bbe:	9201      	str	r2, [sp, #4]
 8001bc0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc2:	9502      	str	r5, [sp, #8]
 8001bc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bc6:	f042 0201 	orr.w	r2, r2, #1
 8001bca:	631a      	str	r2, [r3, #48]	; 0x30
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	9302      	str	r3, [sp, #8]
 8001bd4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bd6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bda:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001be0:	2301      	movs	r3, #1
 8001be2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be4:	2303      	movs	r3, #3
 8001be6:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be8:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bea:	2307      	movs	r3, #7
 8001bec:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bee:	f7fe fee5 	bl	80009bc <HAL_GPIO_Init>
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001bf2:	4a26      	ldr	r2, [pc, #152]	; (8001c8c <HAL_UART_MspInit+0x100>)
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bf4:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001bf6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001bfa:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001bfe:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c00:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c04:	60e5      	str	r5, [r4, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c06:	6123      	str	r3, [r4, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c08:	6165      	str	r5, [r4, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c0a:	61a5      	str	r5, [r4, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001c0c:	61e5      	str	r5, [r4, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c0e:	6225      	str	r5, [r4, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c10:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001c12:	f7fe fd4b 	bl	80006ac <HAL_DMA_Init>
 8001c16:	b108      	cbz	r0, 8001c1c <HAL_UART_MspInit+0x90>
    {
      Error_Handler();
 8001c18:	f7ff feae 	bl	8001978 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001c1c:	6374      	str	r4, [r6, #52]	; 0x34

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 15);
 8001c1e:	2025      	movs	r0, #37	; 0x25
 8001c20:	220f      	movs	r2, #15
 8001c22:	2100      	movs	r1, #0
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001c24:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 15);
 8001c26:	f7fe fcd3 	bl	80005d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c2a:	2025      	movs	r0, #37	; 0x25
 8001c2c:	f7fe fd04 	bl	8000638 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c30:	b00a      	add	sp, #40	; 0x28
 8001c32:	bd70      	pop	{r4, r5, r6, pc}
  else if(uartHandle->Instance==USART2)
 8001c34:	4a16      	ldr	r2, [pc, #88]	; (8001c90 <HAL_UART_MspInit+0x104>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d1fa      	bne.n	8001c30 <HAL_UART_MspInit+0xa4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c3a:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <HAL_UART_MspInit+0xf4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3c:	4811      	ldr	r0, [pc, #68]	; (8001c84 <HAL_UART_MspInit+0xf8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c3e:	2100      	movs	r1, #0
 8001c40:	9103      	str	r1, [sp, #12]
 8001c42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c44:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001c48:	641a      	str	r2, [r3, #64]	; 0x40
 8001c4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c4c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001c50:	9203      	str	r2, [sp, #12]
 8001c52:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c54:	9104      	str	r1, [sp, #16]
 8001c56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c58:	f042 0201 	orr.w	r2, r2, #1
 8001c5c:	631a      	str	r2, [r3, #48]	; 0x30
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	9304      	str	r3, [sp, #16]
 8001c66:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c68:	230c      	movs	r3, #12
 8001c6a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c70:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c72:	2307      	movs	r3, #7
 8001c74:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c76:	f7fe fea1 	bl	80009bc <HAL_GPIO_Init>
}
 8001c7a:	e7d9      	b.n	8001c30 <HAL_UART_MspInit+0xa4>
 8001c7c:	40011000 	.word	0x40011000
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40020000 	.word	0x40020000
 8001c88:	20000030 	.word	0x20000030
 8001c8c:	40026440 	.word	0x40026440
 8001c90:	40004400 	.word	0x40004400

08001c94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ccc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c9a:	e003      	b.n	8001ca4 <LoopCopyDataInit>

08001c9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ca0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ca2:	3104      	adds	r1, #4

08001ca4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ca4:	480b      	ldr	r0, [pc, #44]	; (8001cd4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ca8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001caa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001cac:	d3f6      	bcc.n	8001c9c <CopyDataInit>
  ldr  r2, =_sbss
 8001cae:	4a0b      	ldr	r2, [pc, #44]	; (8001cdc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001cb0:	e002      	b.n	8001cb8 <LoopFillZerobss>

08001cb2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001cb2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001cb4:	f842 3b04 	str.w	r3, [r2], #4

08001cb8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001cb8:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001cba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001cbc:	d3f9      	bcc.n	8001cb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cbe:	f7ff fe93 	bl	80019e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cc2:	f000 f811 	bl	8001ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cc6:	f7ff fddf 	bl	8001888 <main>
  bx  lr    
 8001cca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ccc:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001cd0:	08001da8 	.word	0x08001da8
  ldr  r0, =_sdata
 8001cd4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001cd8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001cdc:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001ce0:	20000110 	.word	0x20000110

08001ce4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ce4:	e7fe      	b.n	8001ce4 <ADC_IRQHandler>
	...

08001ce8 <__libc_init_array>:
 8001ce8:	b570      	push	{r4, r5, r6, lr}
 8001cea:	4e0d      	ldr	r6, [pc, #52]	; (8001d20 <__libc_init_array+0x38>)
 8001cec:	4c0d      	ldr	r4, [pc, #52]	; (8001d24 <__libc_init_array+0x3c>)
 8001cee:	1ba4      	subs	r4, r4, r6
 8001cf0:	10a4      	asrs	r4, r4, #2
 8001cf2:	2500      	movs	r5, #0
 8001cf4:	42a5      	cmp	r5, r4
 8001cf6:	d109      	bne.n	8001d0c <__libc_init_array+0x24>
 8001cf8:	4e0b      	ldr	r6, [pc, #44]	; (8001d28 <__libc_init_array+0x40>)
 8001cfa:	4c0c      	ldr	r4, [pc, #48]	; (8001d2c <__libc_init_array+0x44>)
 8001cfc:	f000 f820 	bl	8001d40 <_init>
 8001d00:	1ba4      	subs	r4, r4, r6
 8001d02:	10a4      	asrs	r4, r4, #2
 8001d04:	2500      	movs	r5, #0
 8001d06:	42a5      	cmp	r5, r4
 8001d08:	d105      	bne.n	8001d16 <__libc_init_array+0x2e>
 8001d0a:	bd70      	pop	{r4, r5, r6, pc}
 8001d0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d10:	4798      	blx	r3
 8001d12:	3501      	adds	r5, #1
 8001d14:	e7ee      	b.n	8001cf4 <__libc_init_array+0xc>
 8001d16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d1a:	4798      	blx	r3
 8001d1c:	3501      	adds	r5, #1
 8001d1e:	e7f2      	b.n	8001d06 <__libc_init_array+0x1e>
 8001d20:	08001da0 	.word	0x08001da0
 8001d24:	08001da0 	.word	0x08001da0
 8001d28:	08001da0 	.word	0x08001da0
 8001d2c:	08001da4 	.word	0x08001da4

08001d30 <memset>:
 8001d30:	4402      	add	r2, r0
 8001d32:	4603      	mov	r3, r0
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d100      	bne.n	8001d3a <memset+0xa>
 8001d38:	4770      	bx	lr
 8001d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8001d3e:	e7f9      	b.n	8001d34 <memset+0x4>

08001d40 <_init>:
 8001d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d42:	bf00      	nop
 8001d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d46:	bc08      	pop	{r3}
 8001d48:	469e      	mov	lr, r3
 8001d4a:	4770      	bx	lr

08001d4c <_fini>:
 8001d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d4e:	bf00      	nop
 8001d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d52:	bc08      	pop	{r3}
 8001d54:	469e      	mov	lr, r3
 8001d56:	4770      	bx	lr
