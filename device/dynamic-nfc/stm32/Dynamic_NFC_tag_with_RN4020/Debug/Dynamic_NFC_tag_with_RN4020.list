
Dynamic_NFC_tag_with_RN4020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  08004698  08004698  00014698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004a20  08004a20  00014a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004a28  08004a28  00014a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004a2c  08004a2c  00014a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000220  20000000  08004a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000016b4  20000220  08004c50  00020220  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200018d4  08004c50  000218d4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 10 .debug_info   00027e55  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004a0e  00000000  00000000  000480a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000e1cf  00000000  00000000  0004cab3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000015d8  00000000  00000000  0005ac88  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000019e8  00000000  00000000  0005c260  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000af5e  00000000  00000000  0005dc48  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000695b  00000000  00000000  00068ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0006f501  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000046b4  00000000  00000000  0006f580  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000220 	.word	0x20000220
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004680 	.word	0x08004680

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000224 	.word	0x20000224
 80001dc:	08004680 	.word	0x08004680

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <ST25DV_IsDeviceReady>:
  * @retval   int32_t enum status.
  */
int32_t ST25DV_IsDeviceReady(ST25DV_Object_t* pObj,  const uint32_t Trials )
{
  /* Test communication with device */
  return pObj->IO.IsReady(ST25DV_ADDR_DATA_I2C, Trials );
 80005a0:	6883      	ldr	r3, [r0, #8]
 80005a2:	20a6      	movs	r0, #166	; 0xa6
 80005a4:	4718      	bx	r3

080005a6 <ST25DV_ReadData>:
  * @param  TarAddr I2C data memory address to read.
  * @param  NbByte  Number of bytes to be read.
  * @return int32_t enum status.
  */
int32_t ST25DV_ReadData(ST25DV_Object_t* pObj,  uint8_t * const pData, const uint16_t TarAddr, const uint16_t NbByte )
{
 80005a6:	b430      	push	{r4, r5}
  /* Read Data in user memory */
  return pObj->IO.Read(ST25DV_ADDR_DATA_I2C, TarAddr, pData, NbByte );
 80005a8:	6904      	ldr	r4, [r0, #16]
{
 80005aa:	4615      	mov	r5, r2
  return pObj->IO.Read(ST25DV_ADDR_DATA_I2C, TarAddr, pData, NbByte );
 80005ac:	46a4      	mov	ip, r4
 80005ae:	460a      	mov	r2, r1
 80005b0:	20a6      	movs	r0, #166	; 0xa6
 80005b2:	4629      	mov	r1, r5
}
 80005b4:	bc30      	pop	{r4, r5}
  return pObj->IO.Read(ST25DV_ADDR_DATA_I2C, TarAddr, pData, NbByte );
 80005b6:	4760      	bx	ip

080005b8 <ST25DV_WriteData>:
  * @param  TarAddr I2C data memory address to be written.
  * @param  NbByte  Number of bytes to be written.
  * @return int32_t enum status.
  */
int32_t ST25DV_WriteData(ST25DV_Object_t* pObj,  const uint8_t * const pData, const uint16_t TarAddr, const uint16_t NbByte )
{ 
 80005b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005bc:	4680      	mov	r8, r0
  int32_t ret;
  uint16_t split_data_nb;
  const uint8_t *pdata_index = (const uint8_t *)pData;
  uint16_t bytes_to_write = NbByte;
  uint16_t mem_addr = TarAddr;
 80005be:	4616      	mov	r6, r2
  uint16_t bytes_to_write = NbByte;
 80005c0:	461f      	mov	r7, r3
  const uint8_t *pdata_index = (const uint8_t *)pData;
 80005c2:	4689      	mov	r9, r1
 80005c4:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 80005c8:	463d      	mov	r5, r7
 80005ca:	bf28      	it	cs
 80005cc:	f44f 7580 	movcs.w	r5, #256	; 0x100
    {
      /* DataSize lower or equal to max page write, copy only last bytes */
      split_data_nb = bytes_to_write;
    }
    /* Write split_data_nb bytes in memory */
    ret = pObj->IO.Write( ST25DV_ADDR_DATA_I2C, mem_addr, pdata_index, split_data_nb);
 80005d0:	f8d8 400c 	ldr.w	r4, [r8, #12]
 80005d4:	462b      	mov	r3, r5
 80005d6:	464a      	mov	r2, r9
 80005d8:	4631      	mov	r1, r6
 80005da:	20a6      	movs	r0, #166	; 0xa6
 80005dc:	47a0      	blx	r4

    if( ret == NFCTAG_OK )
 80005de:	4604      	mov	r4, r0
 80005e0:	b998      	cbnz	r0, 800060a <ST25DV_WriteData+0x52>
    {
      int32_t pollstatus;
      /* Poll until EEPROM is available */
      uint32_t tickstart = pObj->IO.GetTick();
 80005e2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80005e6:	4798      	blx	r3
 80005e8:	4682      	mov	sl, r0
      /* Wait until ST25DV is ready or timeout occurs */
      do
      {
        pollstatus = pObj->IO.IsReady( ST25DV_ADDR_DATA_I2C, 1 );
 80005ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80005ee:	2101      	movs	r1, #1
 80005f0:	20a6      	movs	r0, #166	; 0xa6
 80005f2:	4798      	blx	r3
      } while( ( (uint32_t)((int32_t)pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 80005f4:	f8d8 3014 	ldr.w	r3, [r8, #20]
        pollstatus = pObj->IO.IsReady( ST25DV_ADDR_DATA_I2C, 1 );
 80005f8:	4604      	mov	r4, r0
      } while( ( (uint32_t)((int32_t)pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 80005fa:	4798      	blx	r3
 80005fc:	eba0 000a 	sub.w	r0, r0, sl
 8000600:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
 8000604:	d20c      	bcs.n	8000620 <ST25DV_WriteData+0x68>
 8000606:	2c00      	cmp	r4, #0
 8000608:	d1ef      	bne.n	80005ea <ST25DV_WriteData+0x32>
      }
    }

    /* update index, dest address, size for next write */
    pdata_index += split_data_nb;
    mem_addr += split_data_nb;
 800060a:	442e      	add	r6, r5
    pdata_index += split_data_nb;
 800060c:	44a9      	add	r9, r5
    bytes_to_write -= split_data_nb;
 800060e:	1b7d      	subs	r5, r7, r5
 8000610:	b2af      	uxth	r7, r5
    mem_addr += split_data_nb;
 8000612:	b2b6      	uxth	r6, r6
  }
  while( ( bytes_to_write > 0 ) && ( ret == NFCTAG_OK ) );
 8000614:	b10f      	cbz	r7, 800061a <ST25DV_WriteData+0x62>
 8000616:	2c00      	cmp	r4, #0
 8000618:	d0d4      	beq.n	80005c4 <ST25DV_WriteData+0xc>
  
  return ret;
}
 800061a:	4620      	mov	r0, r4
 800061c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ret = NFCTAG_TIMEOUT;
 8000620:	2c00      	cmp	r4, #0
 8000622:	bf18      	it	ne
 8000624:	f06f 0402 	mvnne.w	r4, #2
 8000628:	e7ef      	b.n	800060a <ST25DV_WriteData+0x52>

0800062a <ST25DV_ReadID>:
  return ST25DV_GetICREF(&(pObj->Ctx), pICRef);
 800062a:	3018      	adds	r0, #24
 800062c:	f000 b8b8 	b.w	80007a0 <ST25DV_GetICREF>

08000630 <ST25DV_Init>:
  if (pObj->IsInitialized == 0U)
 8000630:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8000632:	b513      	push	{r0, r1, r4, lr}
 8000634:	4604      	mov	r4, r0
  if (pObj->IsInitialized == 0U)
 8000636:	b96b      	cbnz	r3, 8000654 <ST25DV_Init+0x24>
    ST25DV_ReadID(pObj,&nfctag_id);
 8000638:	f10d 0107 	add.w	r1, sp, #7
 800063c:	f7ff fff5 	bl	800062a <ST25DV_ReadID>
    if( (nfctag_id != I_AM_ST25DV04) && (nfctag_id != I_AM_ST25DV64) )
 8000640:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000644:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8000648:	2b24      	cmp	r3, #36	; 0x24
 800064a:	d003      	beq.n	8000654 <ST25DV_Init+0x24>
      return NFCTAG_ERROR;
 800064c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000650:	b002      	add	sp, #8
 8000652:	bd10      	pop	{r4, pc}
  pObj->IsInitialized = 1U;
 8000654:	2301      	movs	r3, #1
 8000656:	6263      	str	r3, [r4, #36]	; 0x24
  return NFCTAG_OK;
 8000658:	2000      	movs	r0, #0
 800065a:	e7f9      	b.n	8000650 <ST25DV_Init+0x20>

0800065c <ST25DV_GetGPOStatus>:
{
 800065c:	b513      	push	{r0, r1, r4, lr}
 800065e:	460c      	mov	r4, r1
  status = ST25DV_GetGPO_ALL(&(pObj->Ctx),  &reg_value);
 8000660:	3018      	adds	r0, #24
 8000662:	f10d 0107 	add.w	r1, sp, #7
 8000666:	f000 f8ed 	bl	8000844 <ST25DV_GetGPO_ALL>
  if( status != NFCTAG_OK )
 800066a:	b910      	cbnz	r0, 8000672 <ST25DV_GetGPOStatus+0x16>
  *pGPOStatus = (uint16_t)reg_value;
 800066c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000670:	8023      	strh	r3, [r4, #0]
}
 8000672:	b002      	add	sp, #8
 8000674:	bd10      	pop	{r4, pc}

08000676 <ST25DV_ConfigureGPO>:
{
 8000676:	b507      	push	{r0, r1, r2, lr}
 8000678:	ab02      	add	r3, sp, #8
  return ST25DV_SetGPO_ALL( &(pObj->Ctx),  (uint8_t *)&ITConf);
 800067a:	3018      	adds	r0, #24
{
 800067c:	f823 1d02 	strh.w	r1, [r3, #-2]!
  return ST25DV_SetGPO_ALL( &(pObj->Ctx),  (uint8_t *)&ITConf);
 8000680:	4619      	mov	r1, r3
 8000682:	f000 f8ea 	bl	800085a <ST25DV_SetGPO_ALL>
}
 8000686:	b003      	add	sp, #12
 8000688:	f85d fb04 	ldr.w	pc, [sp], #4

0800068c <ReadRegWrap>:
  /* Read actual value of MBLEN_DYN register */
  return ST25DV_GetMBLEN_DYN_MBLEN( &(pObj->Ctx),pMBLength );
}

static int32_t ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t len)
{
 800068c:	b410      	push	{r4}
 800068e:	6904      	ldr	r4, [r0, #16]
  ST25DV_Object_t *pObj = (ST25DV_Object_t *)handle;
  if(Reg & (ST25DV_IS_DYNAMIC_REGISTER))
 8000690:	f411 5f00 	tst.w	r1, #8192	; 0x2000
  {
    return pObj->IO.Read(ST25DV_ADDR_DATA_I2C, Reg, pData, len);
  } else {
    return pObj->IO.Read(ST25DV_ADDR_SYST_I2C, Reg, pData, len);
 8000694:	46a4      	mov	ip, r4
    return pObj->IO.Read(ST25DV_ADDR_DATA_I2C, Reg, pData, len);
 8000696:	bf14      	ite	ne
 8000698:	20a6      	movne	r0, #166	; 0xa6
    return pObj->IO.Read(ST25DV_ADDR_SYST_I2C, Reg, pData, len);
 800069a:	20ae      	moveq	r0, #174	; 0xae
  }
}
 800069c:	f85d 4b04 	ldr.w	r4, [sp], #4
    return pObj->IO.Read(ST25DV_ADDR_SYST_I2C, Reg, pData, len);
 80006a0:	4760      	bx	ip

080006a2 <WriteRegWrap>:

static int32_t WriteRegWrap(void *handle, uint16_t Reg, const uint8_t* pData, uint16_t len)
{
  int32_t ret;
  ST25DV_Object_t *pObj = (ST25DV_Object_t *)handle;
  if(Reg & (ST25DV_IS_DYNAMIC_REGISTER))
 80006a2:	f411 5f00 	tst.w	r1, #8192	; 0x2000
{
 80006a6:	b570      	push	{r4, r5, r6, lr}
 80006a8:	4605      	mov	r5, r0
 80006aa:	68c4      	ldr	r4, [r0, #12]
  if(Reg & (ST25DV_IS_DYNAMIC_REGISTER))
 80006ac:	d004      	beq.n	80006b8 <WriteRegWrap+0x16>
  {
    return pObj->IO.Write(ST25DV_ADDR_DATA_I2C, Reg, pData, len);
 80006ae:	46a4      	mov	ip, r4
 80006b0:	20a6      	movs	r0, #166	; 0xa6
      ret = NFCTAG_TIMEOUT;
    }
  }

  return ret;
}
 80006b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pObj->IO.Write(ST25DV_ADDR_DATA_I2C, Reg, pData, len);
 80006b6:	4760      	bx	ip
    ret = pObj->IO.Write(ST25DV_ADDR_SYST_I2C, Reg, pData, len);
 80006b8:	20ae      	movs	r0, #174	; 0xae
 80006ba:	47a0      	blx	r4
  if( ret == NFCTAG_OK )
 80006bc:	4604      	mov	r4, r0
 80006be:	b978      	cbnz	r0, 80006e0 <WriteRegWrap+0x3e>
    uint32_t tickstart = pObj->IO.GetTick();
 80006c0:	696b      	ldr	r3, [r5, #20]
 80006c2:	4798      	blx	r3
 80006c4:	4606      	mov	r6, r0
      pollstatus = pObj->IO.IsReady( ST25DV_ADDR_SYST_I2C, 1 );
 80006c6:	68ab      	ldr	r3, [r5, #8]
 80006c8:	2101      	movs	r1, #1
 80006ca:	20ae      	movs	r0, #174	; 0xae
 80006cc:	4798      	blx	r3
    } while( ( (uint32_t)((int32_t)pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 80006ce:	696b      	ldr	r3, [r5, #20]
      pollstatus = pObj->IO.IsReady( ST25DV_ADDR_SYST_I2C, 1 );
 80006d0:	4604      	mov	r4, r0
    } while( ( (uint32_t)((int32_t)pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 80006d2:	4798      	blx	r3
 80006d4:	1b80      	subs	r0, r0, r6
 80006d6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
 80006da:	d203      	bcs.n	80006e4 <WriteRegWrap+0x42>
 80006dc:	2c00      	cmp	r4, #0
 80006de:	d1f2      	bne.n	80006c6 <WriteRegWrap+0x24>
}
 80006e0:	4620      	mov	r0, r4
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
      ret = NFCTAG_TIMEOUT;
 80006e4:	2c00      	cmp	r4, #0
 80006e6:	bf18      	it	ne
 80006e8:	f06f 0402 	mvnne.w	r4, #2
 80006ec:	e7f8      	b.n	80006e0 <WriteRegWrap+0x3e>
	...

080006f0 <ST25DV_RegisterBusIO>:
{
 80006f0:	b508      	push	{r3, lr}
  if (pObj == NULL)
 80006f2:	b910      	cbnz	r0, 80006fa <ST25DV_RegisterBusIO+0xa>
    ret = NFCTAG_ERROR;
 80006f4:	f04f 30ff 	mov.w	r0, #4294967295
 80006f8:	bd08      	pop	{r3, pc}
    pObj->IO.DeInit      = pIO->DeInit;
 80006fa:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init        = pIO->Init;
 80006fc:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit      = pIO->DeInit;
 80006fe:	6042      	str	r2, [r0, #4]
    pObj->IO.Write       = pIO->Write;
 8000700:	68ca      	ldr	r2, [r1, #12]
 8000702:	60c2      	str	r2, [r0, #12]
    pObj->IO.Read        = pIO->Read;
 8000704:	690a      	ldr	r2, [r1, #16]
 8000706:	6102      	str	r2, [r0, #16]
    pObj->IO.IsReady     = pIO->IsReady;
 8000708:	688a      	ldr	r2, [r1, #8]
 800070a:	6082      	str	r2, [r0, #8]
    pObj->IO.GetTick     = pIO->GetTick;
 800070c:	694a      	ldr	r2, [r1, #20]
 800070e:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8000710:	4a06      	ldr	r2, [pc, #24]	; (800072c <ST25DV_RegisterBusIO+0x3c>)
 8000712:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8000714:	4a06      	ldr	r2, [pc, #24]	; (8000730 <ST25DV_RegisterBusIO+0x40>)
    pObj->IO.Init        = pIO->Init;
 8000716:	6003      	str	r3, [r0, #0]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8000718:	6182      	str	r2, [r0, #24]
    pObj->Ctx.handle   = pObj;
 800071a:	6200      	str	r0, [r0, #32]
    if (pObj->IO.Init == NULL)
 800071c:	2b00      	cmp	r3, #0
 800071e:	d0e9      	beq.n	80006f4 <ST25DV_RegisterBusIO+0x4>
    } else if (pObj->IO.Init() != 0) {
 8000720:	4798      	blx	r3
 8000722:	3000      	adds	r0, #0
 8000724:	bf18      	it	ne
 8000726:	2001      	movne	r0, #1
 8000728:	4240      	negs	r0, r0
}
 800072a:	bd08      	pop	{r3, pc}
 800072c:	0800068d 	.word	0x0800068d
 8000730:	080006a3 	.word	0x080006a3

08000734 <ST25DV_ReadMemSize>:
{
 8000734:	b537      	push	{r0, r1, r2, r4, r5, lr}
  status = ST25DV_GetMEM_SIZE_LSB(&(pObj->Ctx), &memsize_lsb);
 8000736:	f100 0518 	add.w	r5, r0, #24
{
 800073a:	460c      	mov	r4, r1
  status = ST25DV_GetMEM_SIZE_LSB(&(pObj->Ctx), &memsize_lsb);
 800073c:	4628      	mov	r0, r5
 800073e:	f10d 0107 	add.w	r1, sp, #7
 8000742:	f000 f84e 	bl	80007e2 <ST25DV_GetMEM_SIZE_LSB>
  if( status != NFCTAG_OK )
 8000746:	b980      	cbnz	r0, 800076a <ST25DV_ReadMemSize+0x36>
  status = ST25DV_GetMEM_SIZE_MSB(&(pObj->Ctx), &memsize_msb);
 8000748:	f10d 0106 	add.w	r1, sp, #6
 800074c:	4628      	mov	r0, r5
 800074e:	f000 f832 	bl	80007b6 <ST25DV_GetMEM_SIZE_MSB>
  if( status != NFCTAG_OK )
 8000752:	b950      	cbnz	r0, 800076a <ST25DV_ReadMemSize+0x36>
  status = ST25DV_GetBLK_SIZE(&(pObj->Ctx), &(pSizeInfo->BlockSize));
 8000754:	4621      	mov	r1, r4
 8000756:	4628      	mov	r0, r5
 8000758:	f000 f838 	bl	80007cc <ST25DV_GetBLK_SIZE>
  if( status != NFCTAG_OK )
 800075c:	b928      	cbnz	r0, 800076a <ST25DV_ReadMemSize+0x36>
  pSizeInfo->Mem_Size = (pSizeInfo->Mem_Size << 8) |memsize_lsb;
 800075e:	8862      	ldrh	r2, [r4, #2]
 8000760:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000764:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000768:	8063      	strh	r3, [r4, #2]
}
 800076a:	b003      	add	sp, #12
 800076c:	bd30      	pop	{r4, r5, pc}

0800076e <ST25DV_ResetMBEN_Dyn>:
{
 800076e:	b507      	push	{r0, r1, r2, lr}
  uint8_t reg_value = 0;
 8000770:	a902      	add	r1, sp, #8
 8000772:	2300      	movs	r3, #0
 8000774:	f801 3d01 	strb.w	r3, [r1, #-1]!
  return ST25DV_SetMB_CTRL_DYN_MBEN( &(pObj->Ctx),&reg_value );
 8000778:	3018      	adds	r0, #24
 800077a:	f000 f83d 	bl	80007f8 <ST25DV_SetMB_CTRL_DYN_MBEN>
}
 800077e:	b003      	add	sp, #12
 8000780:	f85d fb04 	ldr.w	pc, [sp], #4

08000784 <ST25DV_ReadReg>:
#include "st25dv_reg.h"

int32_t ST25DV_ReadReg (ST25DV_Ctx_t *ctx, uint16_t Reg, uint8_t* Data, uint16_t len)
{
 8000784:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, Reg, Data, len);
 8000786:	6844      	ldr	r4, [r0, #4]
 8000788:	6880      	ldr	r0, [r0, #8]
 800078a:	46a4      	mov	ip, r4
}
 800078c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, Reg, Data, len);
 8000790:	4760      	bx	ip

08000792 <ST25DV_WriteReg>:

int32_t ST25DV_WriteReg (ST25DV_Ctx_t *ctx, uint16_t Reg, uint8_t const *Data, uint16_t len)
{
 8000792:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, Reg, Data, len);
 8000794:	6804      	ldr	r4, [r0, #0]
 8000796:	6880      	ldr	r0, [r0, #8]
 8000798:	46a4      	mov	ip, r4
}
 800079a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, Reg, Data, len);
 800079e:	4760      	bx	ip

080007a0 <ST25DV_GetICREF>:


/**** Copy generated code hereafter ****/
int32_t ST25DV_GetICREF (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 80007a0:	b508      	push	{r3, lr}
  if( ST25DV_ReadReg(ctx, (ST25DV_ICREF_REG), (uint8_t *)value, 1))
 80007a2:	460a      	mov	r2, r1
 80007a4:	2301      	movs	r3, #1
 80007a6:	2117      	movs	r1, #23
 80007a8:	f7ff ffec 	bl	8000784 <ST25DV_ReadReg>
 80007ac:	3000      	adds	r0, #0
 80007ae:	bf18      	it	ne
 80007b0:	2001      	movne	r0, #1
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 80007b2:	4240      	negs	r0, r0
 80007b4:	bd08      	pop	{r3, pc}

080007b6 <ST25DV_GetMEM_SIZE_MSB>:
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}

int32_t ST25DV_GetMEM_SIZE_MSB (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 80007b6:	b508      	push	{r3, lr}
  if( ST25DV_ReadReg(ctx, (ST25DV_MEM_SIZE_MSB_REG), (uint8_t *)value, 1))
 80007b8:	460a      	mov	r2, r1
 80007ba:	2301      	movs	r3, #1
 80007bc:	2115      	movs	r1, #21
 80007be:	f7ff ffe1 	bl	8000784 <ST25DV_ReadReg>
 80007c2:	3000      	adds	r0, #0
 80007c4:	bf18      	it	ne
 80007c6:	2001      	movne	r0, #1
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 80007c8:	4240      	negs	r0, r0
 80007ca:	bd08      	pop	{r3, pc}

080007cc <ST25DV_GetBLK_SIZE>:

int32_t ST25DV_GetBLK_SIZE (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 80007cc:	b508      	push	{r3, lr}
  if( ST25DV_ReadReg(ctx, (ST25DV_BLK_SIZE_REG), (uint8_t *)value, 1))
 80007ce:	460a      	mov	r2, r1
 80007d0:	2301      	movs	r3, #1
 80007d2:	2116      	movs	r1, #22
 80007d4:	f7ff ffd6 	bl	8000784 <ST25DV_ReadReg>
 80007d8:	3000      	adds	r0, #0
 80007da:	bf18      	it	ne
 80007dc:	2001      	movne	r0, #1
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 80007de:	4240      	negs	r0, r0
 80007e0:	bd08      	pop	{r3, pc}

080007e2 <ST25DV_GetMEM_SIZE_LSB>:

int32_t ST25DV_GetMEM_SIZE_LSB (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 80007e2:	b508      	push	{r3, lr}
  if( ST25DV_ReadReg(ctx, (ST25DV_MEM_SIZE_LSB_REG), (uint8_t *)value, 1))
 80007e4:	460a      	mov	r2, r1
 80007e6:	2301      	movs	r3, #1
 80007e8:	2114      	movs	r1, #20
 80007ea:	f7ff ffcb 	bl	8000784 <ST25DV_ReadReg>
 80007ee:	3000      	adds	r0, #0
 80007f0:	bf18      	it	ne
 80007f2:	2001      	movne	r0, #1
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 80007f4:	4240      	negs	r0, r0
 80007f6:	bd08      	pop	{r3, pc}

080007f8 <ST25DV_SetMB_CTRL_DYN_MBEN>:
  *value = *value >> (ST25DV_MB_CTRL_DYN_MBEN_SHIFT);
  return NFCTAG_OK;
}

int32_t ST25DV_SetMB_CTRL_DYN_MBEN (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 80007f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_CTRL_DYN_REG), &reg_value, 1))
 80007fa:	2301      	movs	r3, #1
{
 80007fc:	460d      	mov	r5, r1
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_CTRL_DYN_REG), &reg_value, 1))
 80007fe:	f10d 0207 	add.w	r2, sp, #7
 8000802:	f242 0106 	movw	r1, #8198	; 0x2006
{
 8000806:	4604      	mov	r4, r0
  if( ST25DV_ReadReg(ctx, (ST25DV_MB_CTRL_DYN_REG), &reg_value, 1))
 8000808:	f7ff ffbc 	bl	8000784 <ST25DV_ReadReg>
 800080c:	b9b8      	cbnz	r0, 800083e <ST25DV_SetMB_CTRL_DYN_MBEN+0x46>
    return NFCTAG_ERROR;

  reg_value = ( (*value << (ST25DV_MB_CTRL_DYN_MBEN_SHIFT)) & (ST25DV_MB_CTRL_DYN_MBEN_MASK)) |
                (reg_value & ~(ST25DV_MB_CTRL_DYN_MBEN_MASK));
 800080e:	f89d 2007 	ldrb.w	r2, [sp, #7]
  reg_value = ( (*value << (ST25DV_MB_CTRL_DYN_MBEN_SHIFT)) & (ST25DV_MB_CTRL_DYN_MBEN_MASK)) |
 8000812:	782b      	ldrb	r3, [r5, #0]
                (reg_value & ~(ST25DV_MB_CTRL_DYN_MBEN_MASK));
 8000814:	f022 0201 	bic.w	r2, r2, #1
  reg_value = ( (*value << (ST25DV_MB_CTRL_DYN_MBEN_SHIFT)) & (ST25DV_MB_CTRL_DYN_MBEN_MASK)) |
 8000818:	f003 0301 	and.w	r3, r3, #1
 800081c:	4313      	orrs	r3, r2
 800081e:	f88d 3007 	strb.w	r3, [sp, #7]

  if( ST25DV_WriteReg(ctx, (ST25DV_MB_CTRL_DYN_REG), &reg_value, 1))
 8000822:	f10d 0207 	add.w	r2, sp, #7
 8000826:	2301      	movs	r3, #1
 8000828:	f242 0106 	movw	r1, #8198	; 0x2006
 800082c:	4620      	mov	r0, r4
 800082e:	f7ff ffb0 	bl	8000792 <ST25DV_WriteReg>
 8000832:	3000      	adds	r0, #0
 8000834:	bf18      	it	ne
 8000836:	2001      	movne	r0, #1
 8000838:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 800083a:	b003      	add	sp, #12
 800083c:	bd30      	pop	{r4, r5, pc}
    return NFCTAG_ERROR;
 800083e:	f04f 30ff 	mov.w	r0, #4294967295
 8000842:	e7fa      	b.n	800083a <ST25DV_SetMB_CTRL_DYN_MBEN+0x42>

08000844 <ST25DV_GetGPO_ALL>:
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}

int32_t ST25DV_GetGPO_ALL (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 8000844:	b508      	push	{r3, lr}
  if( ST25DV_ReadReg(ctx, (ST25DV_GPO_REG), (uint8_t *)value, 1))
 8000846:	460a      	mov	r2, r1
 8000848:	2301      	movs	r3, #1
 800084a:	2100      	movs	r1, #0
 800084c:	f7ff ff9a 	bl	8000784 <ST25DV_ReadReg>
 8000850:	3000      	adds	r0, #0
 8000852:	bf18      	it	ne
 8000854:	2001      	movne	r0, #1
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 8000856:	4240      	negs	r0, r0
 8000858:	bd08      	pop	{r3, pc}

0800085a <ST25DV_SetGPO_ALL>:

int32_t ST25DV_SetGPO_ALL (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 800085a:	b508      	push	{r3, lr}
  if( ST25DV_WriteReg(ctx, (ST25DV_GPO_REG), value, 1))
 800085c:	460a      	mov	r2, r1
 800085e:	2301      	movs	r3, #1
 8000860:	2100      	movs	r1, #0
 8000862:	f7ff ff96 	bl	8000792 <ST25DV_WriteReg>
 8000866:	3000      	adds	r0, #0
 8000868:	bf18      	it	ne
 800086a:	2001      	movne	r0, #1
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 800086c:	4240      	negs	r0, r0
 800086e:	bd08      	pop	{r3, pc}

08000870 <NFC04A1_LED_Init>:
  * @brief  through GPIO
  * @param  Led: LED to be initialized. 
  * @return Status
  */
int32_t NFC04A1_LED_Init( NFC04A1_Led_E led )
{
 8000870:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;

 
  /* Configure GPIO for LEDs (PB4,PB5,PA10)*/
  GPIO_InitStruct.Pin = NFC04A1_Led[led].NFC04A1_LED_PIN;
 8000872:	4b0a      	ldr	r3, [pc, #40]	; (800089c <NFC04A1_LED_Init+0x2c>)
{
 8000874:	b086      	sub	sp, #24
  GPIO_InitStruct.Pin = NFC04A1_Led[led].NFC04A1_LED_PIN;
 8000876:	f833 2030 	ldrh.w	r2, [r3, r0, lsl #3]
 800087a:	9201      	str	r2, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init( NFC04A1_Led[led].NFC04A1_LED_PIN_PORT, &GPIO_InitStruct );
 800087c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000880:	2201      	movs	r2, #1
 8000882:	9202      	str	r2, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2400      	movs	r4, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000886:	2203      	movs	r2, #3
  HAL_GPIO_Init( NFC04A1_Led[led].NFC04A1_LED_PIN_PORT, &GPIO_InitStruct );
 8000888:	6858      	ldr	r0, [r3, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088a:	9204      	str	r2, [sp, #16]
  HAL_GPIO_Init( NFC04A1_Led[led].NFC04A1_LED_PIN_PORT, &GPIO_InitStruct );
 800088c:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init( NFC04A1_Led[led].NFC04A1_LED_PIN_PORT, &GPIO_InitStruct );
 8000890:	f000 f982 	bl	8000b98 <HAL_GPIO_Init>

  return BSP_ERROR_NONE;
}
 8000894:	4620      	mov	r0, r4
 8000896:	b006      	add	sp, #24
 8000898:	bd10      	pop	{r4, pc}
 800089a:	bf00      	nop
 800089c:	2000001c 	.word	0x2000001c

080008a0 <NFC04A1_LED_On>:
  * @param  led : Led to be lit on
  * @return Status
  */
int32_t NFC04A1_LED_On( NFC04A1_Led_E led )
{
  HAL_GPIO_WritePin( NFC04A1_Led[led].NFC04A1_LED_PIN_PORT, NFC04A1_Led[led].NFC04A1_LED_PIN, GPIO_PIN_SET );
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <NFC04A1_LED_On+0x18>)
{
 80008a2:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin( NFC04A1_Led[led].NFC04A1_LED_PIN_PORT, NFC04A1_Led[led].NFC04A1_LED_PIN, GPIO_PIN_SET );
 80008a4:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 80008a8:	f833 1030 	ldrh.w	r1, [r3, r0, lsl #3]
 80008ac:	6860      	ldr	r0, [r4, #4]
 80008ae:	2201      	movs	r2, #1
 80008b0:	f000 fabe 	bl	8000e30 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;

}
 80008b4:	2000      	movs	r0, #0
 80008b6:	bd10      	pop	{r4, pc}
 80008b8:	2000001c 	.word	0x2000001c

080008bc <NFC04A1_LED_Off>:
  * @param  led : Led to be lit off
  * @return Status
  */
int32_t NFC04A1_LED_Off( NFC04A1_Led_E led )
{
  HAL_GPIO_WritePin( NFC04A1_Led[led].NFC04A1_LED_PIN_PORT, NFC04A1_Led[led].NFC04A1_LED_PIN, GPIO_PIN_RESET );
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <NFC04A1_LED_Off+0x18>)
{
 80008be:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin( NFC04A1_Led[led].NFC04A1_LED_PIN_PORT, NFC04A1_Led[led].NFC04A1_LED_PIN, GPIO_PIN_RESET );
 80008c0:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 80008c4:	f833 1030 	ldrh.w	r1, [r3, r0, lsl #3]
 80008c8:	6860      	ldr	r0, [r4, #4]
 80008ca:	2200      	movs	r2, #0
 80008cc:	f000 fab0 	bl	8000e30 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;

}
 80008d0:	2000      	movs	r0, #0
 80008d2:	bd10      	pop	{r4, pc}
 80008d4:	2000001c 	.word	0x2000001c

080008d8 <NFC04A1_NFCTAG_Init>:
 * @{
 */


int32_t NFC04A1_NFCTAG_Init (uint32_t Instance)
{
 80008d8:	b510      	push	{r4, lr}
 80008da:	b086      	sub	sp, #24
  int32_t status;
  ST25DV_IO_t IO;
  UNUSED(Instance);

  /* Configure the component */
  IO.Init         = NFC04A1_I2C_Init;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <NFC04A1_NFCTAG_Init+0x44>)
 80008de:	9300      	str	r3, [sp, #0]
  IO.DeInit       = NFC04A1_I2C_DeInit;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <NFC04A1_NFCTAG_Init+0x48>)
 80008e2:	9301      	str	r3, [sp, #4]
  IO.IsReady      = NFC04A1_I2C_IsReady;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <NFC04A1_NFCTAG_Init+0x4c>)
 80008e6:	9302      	str	r3, [sp, #8]
  IO.Read         = NFC04A1_I2C_ReadReg16;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <NFC04A1_NFCTAG_Init+0x50>)
 80008ea:	9304      	str	r3, [sp, #16]
  IO.Write        = (ST25DV_Write_Func)NFC04A1_I2C_WriteReg16;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <NFC04A1_NFCTAG_Init+0x54>)
 80008ee:	9303      	str	r3, [sp, #12]
  IO.GetTick      = NFC04A1_GetTick;

  status = ST25DV_RegisterBusIO (&NfcTagObj, &IO);
 80008f0:	4669      	mov	r1, sp
  IO.GetTick      = NFC04A1_GetTick;
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <NFC04A1_NFCTAG_Init+0x58>)
  status = ST25DV_RegisterBusIO (&NfcTagObj, &IO);
 80008f4:	480f      	ldr	r0, [pc, #60]	; (8000934 <NFC04A1_NFCTAG_Init+0x5c>)
  IO.GetTick      = NFC04A1_GetTick;
 80008f6:	9305      	str	r3, [sp, #20]
  status = ST25DV_RegisterBusIO (&NfcTagObj, &IO);
 80008f8:	f7ff fefa 	bl	80006f0 <ST25DV_RegisterBusIO>
  if(status != NFCTAG_OK)
 80008fc:	b948      	cbnz	r0, 8000912 <NFC04A1_NFCTAG_Init+0x3a>
    return NFCTAG_ERROR;

  Nfctag_Drv = (NFCTAG_DrvTypeDef *)(void *)&St25Dv_Drv;
 80008fe:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <NFC04A1_NFCTAG_Init+0x60>)
 8000900:	4c0e      	ldr	r4, [pc, #56]	; (800093c <NFC04A1_NFCTAG_Init+0x64>)
 8000902:	6022      	str	r2, [r4, #0]
  if(Nfctag_Drv->Init != NULL)
 8000904:	6812      	ldr	r2, [r2, #0]
 8000906:	b112      	cbz	r2, 800090e <NFC04A1_NFCTAG_Init+0x36>
  {
    status = Nfctag_Drv->Init(&NfcTagObj);
 8000908:	480a      	ldr	r0, [pc, #40]	; (8000934 <NFC04A1_NFCTAG_Init+0x5c>)
 800090a:	4790      	blx	r2
    if(status != NFCTAG_OK)
 800090c:	b118      	cbz	r0, 8000916 <NFC04A1_NFCTAG_Init+0x3e>
    {
      Nfctag_Drv = NULL;
 800090e:	2300      	movs	r3, #0
 8000910:	6023      	str	r3, [r4, #0]
    return NFCTAG_ERROR;
 8000912:	f04f 30ff 	mov.w	r0, #4294967295
  } else {
    Nfctag_Drv = NULL;
    return NFCTAG_ERROR;
  }
  return NFCTAG_OK;
}
 8000916:	b006      	add	sp, #24
 8000918:	bd10      	pop	{r4, pc}
 800091a:	bf00      	nop
 800091c:	080031ed 	.word	0x080031ed
 8000920:	080030e9 	.word	0x080030e9
 8000924:	08003131 	.word	0x08003131
 8000928:	08003185 	.word	0x08003185
 800092c:	08003151 	.word	0x08003151
 8000930:	08000a55 	.word	0x08000a55
 8000934:	2000023c 	.word	0x2000023c
 8000938:	20000000 	.word	0x20000000
 800093c:	20000264 	.word	0x20000264

08000940 <NFC04A1_NFCTAG_ReadData>:
  * @retval NFCTAG enum status
  */
int32_t NFC04A1_NFCTAG_ReadData( uint32_t Instance, uint8_t * const pData, const uint16_t TarAddr, const uint16_t Size )
{
  UNUSED(Instance);
  if ( Nfctag_Drv->ReadData == NULL )
 8000940:	4807      	ldr	r0, [pc, #28]	; (8000960 <NFC04A1_NFCTAG_ReadData+0x20>)
 8000942:	6800      	ldr	r0, [r0, #0]
{
 8000944:	b410      	push	{r4}
  if ( Nfctag_Drv->ReadData == NULL )
 8000946:	6944      	ldr	r4, [r0, #20]
 8000948:	b124      	cbz	r4, 8000954 <NFC04A1_NFCTAG_ReadData+0x14>
  {
    return NFCTAG_ERROR;
  }
  
  return Nfctag_Drv->ReadData(&NfcTagObj, pData, TarAddr, Size );
 800094a:	46a4      	mov	ip, r4
 800094c:	4805      	ldr	r0, [pc, #20]	; (8000964 <NFC04A1_NFCTAG_ReadData+0x24>)
}
 800094e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return Nfctag_Drv->ReadData(&NfcTagObj, pData, TarAddr, Size );
 8000952:	4760      	bx	ip
}
 8000954:	f04f 30ff 	mov.w	r0, #4294967295
 8000958:	f85d 4b04 	ldr.w	r4, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20000264 	.word	0x20000264
 8000964:	2000023c 	.word	0x2000023c

08000968 <NFC04A1_NFCTAG_WriteData>:
  * @retval NFCTAG enum status
  */
int32_t NFC04A1_NFCTAG_WriteData( uint32_t Instance, const uint8_t * const pData, const uint16_t TarAddr, const uint16_t Size )
{
  UNUSED(Instance);
  if ( Nfctag_Drv->WriteData == NULL )
 8000968:	4807      	ldr	r0, [pc, #28]	; (8000988 <NFC04A1_NFCTAG_WriteData+0x20>)
 800096a:	6800      	ldr	r0, [r0, #0]
{
 800096c:	b410      	push	{r4}
  if ( Nfctag_Drv->WriteData == NULL )
 800096e:	6984      	ldr	r4, [r0, #24]
 8000970:	b124      	cbz	r4, 800097c <NFC04A1_NFCTAG_WriteData+0x14>
  {
    return NFCTAG_ERROR;
  }
  
  return Nfctag_Drv->WriteData(&NfcTagObj, pData, TarAddr, Size );
 8000972:	46a4      	mov	ip, r4
 8000974:	4805      	ldr	r0, [pc, #20]	; (800098c <NFC04A1_NFCTAG_WriteData+0x24>)
}
 8000976:	f85d 4b04 	ldr.w	r4, [sp], #4
  return Nfctag_Drv->WriteData(&NfcTagObj, pData, TarAddr, Size );
 800097a:	4760      	bx	ip
}
 800097c:	f04f 30ff 	mov.w	r0, #4294967295
 8000980:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	20000264 	.word	0x20000264
 800098c:	2000023c 	.word	0x2000023c

08000990 <NFC04A1_NFCTAG_GetByteSize>:
/**
  * @brief  Return the size of the nfctag
  * @retval Size of the NFCtag in Bytes
  */
uint32_t NFC04A1_NFCTAG_GetByteSize( uint32_t Instance )
{
 8000990:	b507      	push	{r0, r1, r2, lr}
  UNUSED(Instance);
  ST25DV_MEM_SIZE mem_size;
  ST25DV_ReadMemSize(&NfcTagObj, &mem_size );
 8000992:	4807      	ldr	r0, [pc, #28]	; (80009b0 <NFC04A1_NFCTAG_GetByteSize+0x20>)
 8000994:	a901      	add	r1, sp, #4
 8000996:	f7ff fecd 	bl	8000734 <ST25DV_ReadMemSize>
  
  return (mem_size.BlockSize+1) * (mem_size.Mem_Size+1);
 800099a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800099e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80009a2:	3001      	adds	r0, #1
}
 80009a4:	fb03 0000 	mla	r0, r3, r0, r0
 80009a8:	b003      	add	sp, #12
 80009aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80009ae:	bf00      	nop
 80009b0:	2000023c 	.word	0x2000023c

080009b4 <NFC04A1_NFCTAG_ResetMBEN_Dyn>:
  * @return int32_t enum status.
  */
int32_t NFC04A1_NFCTAG_ResetMBEN_Dyn(uint32_t Instance)
{
  UNUSED(Instance);
  return ST25DV_ResetMBEN_Dyn(&NfcTagObj);
 80009b4:	4801      	ldr	r0, [pc, #4]	; (80009bc <NFC04A1_NFCTAG_ResetMBEN_Dyn+0x8>)
 80009b6:	f7ff beda 	b.w	800076e <ST25DV_ResetMBEN_Dyn>
 80009ba:	bf00      	nop
 80009bc:	2000023c 	.word	0x2000023c

080009c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c2:	4a0e      	ldr	r2, [pc, #56]	; (80009fc <HAL_InitTick+0x3c>)
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <HAL_InitTick+0x40>)
{
 80009c6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c8:	7818      	ldrb	r0, [r3, #0]
 80009ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ce:	fbb3 f3f0 	udiv	r3, r3, r0
 80009d2:	6810      	ldr	r0, [r2, #0]
 80009d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80009d8:	f000 f8aa 	bl	8000b30 <HAL_SYSTICK_Config>
 80009dc:	4604      	mov	r4, r0
 80009de:	b958      	cbnz	r0, 80009f8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e0:	2d0f      	cmp	r5, #15
 80009e2:	d809      	bhi.n	80009f8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e4:	4602      	mov	r2, r0
 80009e6:	4629      	mov	r1, r5
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	f000 f85e 	bl	8000aac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <HAL_InitTick+0x44>)
 80009f2:	4620      	mov	r0, r4
 80009f4:	601d      	str	r5, [r3, #0]
 80009f6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80009f8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80009fa:	bd38      	pop	{r3, r4, r5, pc}
 80009fc:	2000004c 	.word	0x2000004c
 8000a00:	20000040 	.word	0x20000040
 8000a04:	20000044 	.word	0x20000044

08000a08 <HAL_Init>:
{
 8000a08:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <HAL_Init+0x30>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a12:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000a1a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a22:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a24:	2003      	movs	r0, #3
 8000a26:	f000 f82f 	bl	8000a88 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f7ff ffc8 	bl	80009c0 <HAL_InitTick>
  HAL_MspInit();
 8000a30:	f002 fb1a 	bl	8003068 <HAL_MspInit>
}
 8000a34:	2000      	movs	r0, #0
 8000a36:	bd08      	pop	{r3, pc}
 8000a38:	40023c00 	.word	0x40023c00

08000a3c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a3c:	4a03      	ldr	r2, [pc, #12]	; (8000a4c <HAL_IncTick+0x10>)
 8000a3e:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <HAL_IncTick+0x14>)
 8000a40:	6811      	ldr	r1, [r2, #0]
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	440b      	add	r3, r1
 8000a46:	6013      	str	r3, [r2, #0]
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	2000074c 	.word	0x2000074c
 8000a50:	20000040 	.word	0x20000040

08000a54 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a54:	4b01      	ldr	r3, [pc, #4]	; (8000a5c <HAL_GetTick+0x8>)
 8000a56:	6818      	ldr	r0, [r3, #0]
}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	2000074c 	.word	0x2000074c

08000a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a60:	b538      	push	{r3, r4, r5, lr}
 8000a62:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a64:	f7ff fff6 	bl	8000a54 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a68:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000a6a:	bf1c      	itt	ne
 8000a6c:	4b05      	ldrne	r3, [pc, #20]	; (8000a84 <HAL_Delay+0x24>)
 8000a6e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000a70:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000a72:	bf18      	it	ne
 8000a74:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a76:	f7ff ffed 	bl	8000a54 <HAL_GetTick>
 8000a7a:	1b40      	subs	r0, r0, r5
 8000a7c:	4284      	cmp	r4, r0
 8000a7e:	d8fa      	bhi.n	8000a76 <HAL_Delay+0x16>
  {
  }
}
 8000a80:	bd38      	pop	{r3, r4, r5, pc}
 8000a82:	bf00      	nop
 8000a84:	20000040 	.word	0x20000040

08000a88 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a88:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000a8a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a8c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a90:	041b      	lsls	r3, r3, #16
 8000a92:	0c1b      	lsrs	r3, r3, #16
 8000a94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a98:	0200      	lsls	r0, r0, #8
 8000a9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a9e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000aa2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000aa4:	60d3      	str	r3, [r2, #12]
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aac:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aae:	b530      	push	{r4, r5, lr}
 8000ab0:	68dc      	ldr	r4, [r3, #12]
 8000ab2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aba:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000abc:	2b04      	cmp	r3, #4
 8000abe:	bf28      	it	cs
 8000ac0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac4:	f04f 0501 	mov.w	r5, #1
 8000ac8:	fa05 f303 	lsl.w	r3, r5, r3
 8000acc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad0:	bf8c      	ite	hi
 8000ad2:	3c03      	subhi	r4, #3
 8000ad4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad6:	4019      	ands	r1, r3
 8000ad8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ada:	fa05 f404 	lsl.w	r4, r5, r4
 8000ade:	3c01      	subs	r4, #1
 8000ae0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000ae2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	ea42 0201 	orr.w	r2, r2, r1
 8000ae8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aec:	bfad      	iteet	ge
 8000aee:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af2:	f000 000f 	andlt.w	r0, r0, #15
 8000af6:	4b06      	ldrlt	r3, [pc, #24]	; (8000b10 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afc:	bfb5      	itete	lt
 8000afe:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b00:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b02:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b04:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000b08:	bd30      	pop	{r4, r5, pc}
 8000b0a:	bf00      	nop
 8000b0c:	e000ed00 	.word	0xe000ed00
 8000b10:	e000ed14 	.word	0xe000ed14

08000b14 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000b14:	2800      	cmp	r0, #0
 8000b16:	db08      	blt.n	8000b2a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b18:	0942      	lsrs	r2, r0, #5
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	f000 001f 	and.w	r0, r0, #31
 8000b20:	fa03 f000 	lsl.w	r0, r3, r0
 8000b24:	4b01      	ldr	r3, [pc, #4]	; (8000b2c <HAL_NVIC_EnableIRQ+0x18>)
 8000b26:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000b2a:	4770      	bx	lr
 8000b2c:	e000e100 	.word	0xe000e100

08000b30 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b30:	3801      	subs	r0, #1
 8000b32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b36:	d20a      	bcs.n	8000b4e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3a:	4a07      	ldr	r2, [pc, #28]	; (8000b58 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b3c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3e:	21f0      	movs	r1, #240	; 0xf0
 8000b40:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b44:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b46:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b48:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b4e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000e010 	.word	0xe000e010
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b5c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	d003      	beq.n	8000b6c <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000b68:	2001      	movs	r0, #1
 8000b6a:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b6c:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000b6e:	2305      	movs	r3, #5
 8000b70:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000b74:	6813      	ldr	r3, [r2, #0]
 8000b76:	f023 0301 	bic.w	r3, r3, #1
 8000b7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000b7c:	2000      	movs	r0, #0
}
 8000b7e:	4770      	bx	lr

08000b80 <HAL_EXTI_IRQHandler>:
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
  if (EXTI->PR != 0x00u)
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <HAL_EXTI_IRQHandler+0x14>)
 8000b82:	695a      	ldr	r2, [r3, #20]
 8000b84:	b122      	cbz	r2, 8000b90 <HAL_EXTI_IRQHandler+0x10>
  {
    /* Clear pending bit */
    EXTI->PR = hexti->Line;
 8000b86:	6802      	ldr	r2, [r0, #0]
 8000b88:	615a      	str	r2, [r3, #20]

    /* Call callback */
    if (hexti->RisingCallback != NULL)
 8000b8a:	6843      	ldr	r3, [r0, #4]
 8000b8c:	b103      	cbz	r3, 8000b90 <HAL_EXTI_IRQHandler+0x10>
    {
      hexti->RisingCallback();
 8000b8e:	4718      	bx	r3
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	40013c00 	.word	0x40013c00

08000b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b9c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b9e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba0:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8000d40 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ba4:	4a64      	ldr	r2, [pc, #400]	; (8000d38 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ba6:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000ba8:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bac:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bae:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000bb0:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bb4:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8000bb8:	42b7      	cmp	r7, r6
 8000bba:	f040 80ad 	bne.w	8000d18 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bbe:	684c      	ldr	r4, [r1, #4]
 8000bc0:	f024 0a10 	bic.w	sl, r4, #16
 8000bc4:	f1ba 0f02 	cmp.w	sl, #2
 8000bc8:	d116      	bne.n	8000bf8 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 8000bca:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000bce:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bd2:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000bd6:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bda:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000bde:	f04f 0e0f 	mov.w	lr, #15
 8000be2:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000be6:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bea:	690d      	ldr	r5, [r1, #16]
 8000bec:	fa05 f50b 	lsl.w	r5, r5, fp
 8000bf0:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000bf4:	f8cc 5020 	str.w	r5, [ip, #32]
 8000bf8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bfc:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000bfe:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c02:	fa05 f50c 	lsl.w	r5, r5, ip
 8000c06:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c08:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c0c:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c10:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c14:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c18:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c1c:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c20:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 8000c22:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c26:	d815      	bhi.n	8000c54 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 8000c28:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c2c:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c30:	68cd      	ldr	r5, [r1, #12]
 8000c32:	fa05 fa0c 	lsl.w	sl, r5, ip
 8000c36:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 8000c3a:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c3e:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c42:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c46:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 8000c4a:	fa0e fe03 	lsl.w	lr, lr, r3
 8000c4e:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8000c52:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000c54:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c56:	9d00      	ldr	r5, [sp, #0]
 8000c58:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c5a:	688f      	ldr	r7, [r1, #8]
 8000c5c:	fa07 f70c 	lsl.w	r7, r7, ip
 8000c60:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000c62:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c64:	00e5      	lsls	r5, r4, #3
 8000c66:	d557      	bpl.n	8000d18 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c68:	f04f 0b00 	mov.w	fp, #0
 8000c6c:	f8cd b00c 	str.w	fp, [sp, #12]
 8000c70:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c74:	4d31      	ldr	r5, [pc, #196]	; (8000d3c <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000c7a:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000c7e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000c82:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000c86:	9703      	str	r7, [sp, #12]
 8000c88:	9f03      	ldr	r7, [sp, #12]
 8000c8a:	f023 0703 	bic.w	r7, r3, #3
 8000c8e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000c92:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c96:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000c9a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c9e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000ca2:	f04f 0e0f 	mov.w	lr, #15
 8000ca6:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000caa:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cac:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cb0:	d039      	beq.n	8000d26 <HAL_GPIO_Init+0x18e>
 8000cb2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cb6:	42a8      	cmp	r0, r5
 8000cb8:	d037      	beq.n	8000d2a <HAL_GPIO_Init+0x192>
 8000cba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cbe:	42a8      	cmp	r0, r5
 8000cc0:	d035      	beq.n	8000d2e <HAL_GPIO_Init+0x196>
 8000cc2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cc6:	42a8      	cmp	r0, r5
 8000cc8:	d033      	beq.n	8000d32 <HAL_GPIO_Init+0x19a>
 8000cca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cce:	42a8      	cmp	r0, r5
 8000cd0:	bf14      	ite	ne
 8000cd2:	2507      	movne	r5, #7
 8000cd4:	2504      	moveq	r5, #4
 8000cd6:	fa05 f50c 	lsl.w	r5, r5, ip
 8000cda:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cde:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000ce0:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ce2:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ce4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000ce8:	bf0c      	ite	eq
 8000cea:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000cec:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000cee:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000cf0:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cf2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000cf6:	bf0c      	ite	eq
 8000cf8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000cfa:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000cfc:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cfe:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d00:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000d04:	bf0c      	ite	eq
 8000d06:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000d08:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000d0a:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000d0c:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d0e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000d10:	bf54      	ite	pl
 8000d12:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000d14:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000d16:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d18:	3301      	adds	r3, #1
 8000d1a:	2b10      	cmp	r3, #16
 8000d1c:	f47f af47 	bne.w	8000bae <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000d20:	b005      	add	sp, #20
 8000d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d26:	465d      	mov	r5, fp
 8000d28:	e7d5      	b.n	8000cd6 <HAL_GPIO_Init+0x13e>
 8000d2a:	2501      	movs	r5, #1
 8000d2c:	e7d3      	b.n	8000cd6 <HAL_GPIO_Init+0x13e>
 8000d2e:	2502      	movs	r5, #2
 8000d30:	e7d1      	b.n	8000cd6 <HAL_GPIO_Init+0x13e>
 8000d32:	2503      	movs	r5, #3
 8000d34:	e7cf      	b.n	8000cd6 <HAL_GPIO_Init+0x13e>
 8000d36:	bf00      	nop
 8000d38:	40013c00 	.word	0x40013c00
 8000d3c:	40020000 	.word	0x40020000
 8000d40:	40023800 	.word	0x40023800

08000d44 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8000d48:	4c37      	ldr	r4, [pc, #220]	; (8000e28 <HAL_GPIO_DeInit+0xe4>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d4a:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000d4c:	f04f 0a01 	mov.w	sl, #1
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8000d50:	f04f 080f 	mov.w	r8, #15
        EXTI->FTSR &= ~((uint32_t)iocurrent);
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d54:	f04f 0b03 	mov.w	fp, #3
    ioposition = 0x01U << position;
 8000d58:	fa0a fe03 	lsl.w	lr, sl, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8000d5c:	ea0e 0201 	and.w	r2, lr, r1
    if(iocurrent == ioposition)
 8000d60:	4596      	cmp	lr, r2
 8000d62:	d153      	bne.n	8000e0c <HAL_GPIO_DeInit+0xc8>
 8000d64:	f023 0503 	bic.w	r5, r3, #3
 8000d68:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8000d6c:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8000d70:	f003 0703 	and.w	r7, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2U];
 8000d74:	68ae      	ldr	r6, [r5, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8000d76:	00bf      	lsls	r7, r7, #2
 8000d78:	fa08 f907 	lsl.w	r9, r8, r7
 8000d7c:	ea06 0c09 	and.w	ip, r6, r9
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8000d80:	4e2a      	ldr	r6, [pc, #168]	; (8000e2c <HAL_GPIO_DeInit+0xe8>)
 8000d82:	42b0      	cmp	r0, r6
 8000d84:	d047      	beq.n	8000e16 <HAL_GPIO_DeInit+0xd2>
 8000d86:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d8a:	42b0      	cmp	r0, r6
 8000d8c:	d045      	beq.n	8000e1a <HAL_GPIO_DeInit+0xd6>
 8000d8e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d92:	42b0      	cmp	r0, r6
 8000d94:	d043      	beq.n	8000e1e <HAL_GPIO_DeInit+0xda>
 8000d96:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d9a:	42b0      	cmp	r0, r6
 8000d9c:	d041      	beq.n	8000e22 <HAL_GPIO_DeInit+0xde>
 8000d9e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000da2:	42b0      	cmp	r0, r6
 8000da4:	bf0c      	ite	eq
 8000da6:	2604      	moveq	r6, #4
 8000da8:	2607      	movne	r6, #7
 8000daa:	40be      	lsls	r6, r7
 8000dac:	45b4      	cmp	ip, r6
 8000dae:	d110      	bne.n	8000dd2 <HAL_GPIO_DeInit+0x8e>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8000db0:	68ae      	ldr	r6, [r5, #8]
 8000db2:	ea26 0609 	bic.w	r6, r6, r9
 8000db6:	60ae      	str	r6, [r5, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8000db8:	6825      	ldr	r5, [r4, #0]
 8000dba:	43d2      	mvns	r2, r2
 8000dbc:	4015      	ands	r5, r2
 8000dbe:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8000dc0:	6865      	ldr	r5, [r4, #4]
 8000dc2:	4015      	ands	r5, r2
 8000dc4:	6065      	str	r5, [r4, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8000dc6:	68a5      	ldr	r5, [r4, #8]
 8000dc8:	4015      	ands	r5, r2
 8000dca:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8000dcc:	68e5      	ldr	r5, [r4, #12]
 8000dce:	402a      	ands	r2, r5
 8000dd0:	60e2      	str	r2, [r4, #12]
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dd2:	005a      	lsls	r2, r3, #1
 8000dd4:	6805      	ldr	r5, [r0, #0]
 8000dd6:	fa0b f202 	lsl.w	r2, fp, r2
 8000dda:	43d2      	mvns	r2, r2

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ddc:	08de      	lsrs	r6, r3, #3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dde:	4015      	ands	r5, r2
 8000de0:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8000de4:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000de6:	f003 0507 	and.w	r5, r3, #7
 8000dea:	6a37      	ldr	r7, [r6, #32]
 8000dec:	00ad      	lsls	r5, r5, #2
 8000dee:	fa08 f505 	lsl.w	r5, r8, r5
 8000df2:	ea27 0505 	bic.w	r5, r7, r5
 8000df6:	6235      	str	r5, [r6, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000df8:	6885      	ldr	r5, [r0, #8]
 8000dfa:	4015      	ands	r5, r2
 8000dfc:	6085      	str	r5, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dfe:	6845      	ldr	r5, [r0, #4]
 8000e00:	ea25 050e 	bic.w	r5, r5, lr
 8000e04:	6045      	str	r5, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e06:	68c5      	ldr	r5, [r0, #12]
 8000e08:	402a      	ands	r2, r5
 8000e0a:	60c2      	str	r2, [r0, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	2b10      	cmp	r3, #16
 8000e10:	d1a2      	bne.n	8000d58 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8000e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8000e16:	2600      	movs	r6, #0
 8000e18:	e7c7      	b.n	8000daa <HAL_GPIO_DeInit+0x66>
 8000e1a:	2601      	movs	r6, #1
 8000e1c:	e7c5      	b.n	8000daa <HAL_GPIO_DeInit+0x66>
 8000e1e:	2602      	movs	r6, #2
 8000e20:	e7c3      	b.n	8000daa <HAL_GPIO_DeInit+0x66>
 8000e22:	2603      	movs	r6, #3
 8000e24:	e7c1      	b.n	8000daa <HAL_GPIO_DeInit+0x66>
 8000e26:	bf00      	nop
 8000e28:	40013c00 	.word	0x40013c00
 8000e2c:	40020000 	.word	0x40020000

08000e30 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e30:	b10a      	cbz	r2, 8000e36 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e32:	6181      	str	r1, [r0, #24]
 8000e34:	4770      	bx	lr
 8000e36:	0409      	lsls	r1, r1, #16
 8000e38:	e7fb      	b.n	8000e32 <HAL_GPIO_WritePin+0x2>

08000e3a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e3a:	4770      	bx	lr

08000e3c <HAL_GPIO_EXTI_IRQHandler>:
{
 8000e3c:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000e3e:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000e40:	6959      	ldr	r1, [r3, #20]
 8000e42:	4201      	tst	r1, r0
 8000e44:	d002      	beq.n	8000e4c <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e46:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e48:	f7ff fff7 	bl	8000e3a <HAL_GPIO_EXTI_Callback>
 8000e4c:	bd08      	pop	{r3, pc}
 8000e4e:	bf00      	nop
 8000e50:	40013c00 	.word	0x40013c00

08000e54 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000e54:	6801      	ldr	r1, [r0, #0]
 8000e56:	694b      	ldr	r3, [r1, #20]
 8000e58:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8000e5c:	f04f 0200 	mov.w	r2, #0
 8000e60:	d010      	beq.n	8000e84 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e62:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000e66:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8000e68:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8000e6a:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8000e6c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000e70:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000e74:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e76:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000e7a:	f043 0304 	orr.w	r3, r3, #4
 8000e7e:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8000e80:	2001      	movs	r0, #1
 8000e82:	4770      	bx	lr
  }
  return HAL_OK;
 8000e84:	4618      	mov	r0, r3
}
 8000e86:	4770      	bx	lr

08000e88 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e8c:	4604      	mov	r4, r0
 8000e8e:	4617      	mov	r7, r2
 8000e90:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000e92:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8000e96:	b28e      	uxth	r6, r1
 8000e98:	6825      	ldr	r5, [r4, #0]
 8000e9a:	f1b8 0f01 	cmp.w	r8, #1
 8000e9e:	bf0c      	ite	eq
 8000ea0:	696b      	ldreq	r3, [r5, #20]
 8000ea2:	69ab      	ldrne	r3, [r5, #24]
 8000ea4:	ea36 0303 	bics.w	r3, r6, r3
 8000ea8:	bf14      	ite	ne
 8000eaa:	2001      	movne	r0, #1
 8000eac:	2000      	moveq	r0, #0
 8000eae:	b908      	cbnz	r0, 8000eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8000eb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000eb4:	696b      	ldr	r3, [r5, #20]
 8000eb6:	055a      	lsls	r2, r3, #21
 8000eb8:	d516      	bpl.n	8000ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000eba:	682b      	ldr	r3, [r5, #0]
 8000ebc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ec0:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000ec2:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000ec6:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000ec8:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000ece:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000ed2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000ed6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000ed8:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000edc:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000ede:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000ee8:	1c7b      	adds	r3, r7, #1
 8000eea:	d0d5      	beq.n	8000e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000eec:	f7ff fdb2 	bl	8000a54 <HAL_GetTick>
 8000ef0:	eba0 0009 	sub.w	r0, r0, r9
 8000ef4:	4287      	cmp	r7, r0
 8000ef6:	d301      	bcc.n	8000efc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 8000ef8:	2f00      	cmp	r7, #0
 8000efa:	d1cd      	bne.n	8000e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000efc:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8000efe:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000f00:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000f02:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000f06:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000f0a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000f0c:	f042 0220 	orr.w	r2, r2, #32
 8000f10:	e7e4      	b.n	8000edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

08000f12 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8000f12:	b570      	push	{r4, r5, r6, lr}
 8000f14:	4604      	mov	r4, r0
 8000f16:	460d      	mov	r5, r1
 8000f18:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000f1a:	6823      	ldr	r3, [r4, #0]
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	075b      	lsls	r3, r3, #29
 8000f20:	d501      	bpl.n	8000f26 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8000f22:	2000      	movs	r0, #0
 8000f24:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000f26:	4620      	mov	r0, r4
 8000f28:	f7ff ff94 	bl	8000e54 <I2C_IsAcknowledgeFailed>
 8000f2c:	b9a8      	cbnz	r0, 8000f5a <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8000f2e:	1c6a      	adds	r2, r5, #1
 8000f30:	d0f3      	beq.n	8000f1a <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f32:	f7ff fd8f 	bl	8000a54 <HAL_GetTick>
 8000f36:	1b80      	subs	r0, r0, r6
 8000f38:	4285      	cmp	r5, r0
 8000f3a:	d301      	bcc.n	8000f40 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8000f3c:	2d00      	cmp	r5, #0
 8000f3e:	d1ec      	bne.n	8000f1a <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000f40:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000f42:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000f44:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000f46:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000f4a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000f4e:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000f50:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000f54:	f042 0220 	orr.w	r2, r2, #32
 8000f58:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000f5a:	2001      	movs	r0, #1
}
 8000f5c:	bd70      	pop	{r4, r5, r6, pc}

08000f5e <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8000f5e:	b570      	push	{r4, r5, r6, lr}
 8000f60:	4604      	mov	r4, r0
 8000f62:	460d      	mov	r5, r1
 8000f64:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000f66:	6820      	ldr	r0, [r4, #0]
 8000f68:	6943      	ldr	r3, [r0, #20]
 8000f6a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8000f6e:	d001      	beq.n	8000f74 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8000f70:	2000      	movs	r0, #0
}
 8000f72:	bd70      	pop	{r4, r5, r6, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000f74:	6942      	ldr	r2, [r0, #20]
 8000f76:	06d2      	lsls	r2, r2, #27
 8000f78:	d50e      	bpl.n	8000f98 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f7a:	f06f 0210 	mvn.w	r2, #16
 8000f7e:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000f80:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000f82:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000f84:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000f88:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8000f8c:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000f8e:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000f90:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8000f94:	2001      	movs	r0, #1
 8000f96:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f98:	f7ff fd5c 	bl	8000a54 <HAL_GetTick>
 8000f9c:	1b80      	subs	r0, r0, r6
 8000f9e:	42a8      	cmp	r0, r5
 8000fa0:	d801      	bhi.n	8000fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8000fa2:	2d00      	cmp	r5, #0
 8000fa4:	d1df      	bne.n	8000f66 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000fa6:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000fa8:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000faa:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000fac:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000fb0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000fb4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000fb6:	f042 0220 	orr.w	r2, r2, #32
 8000fba:	e7e8      	b.n	8000f8e <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08000fbc <I2C_WaitOnFlagUntilTimeout>:
{
 8000fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fc0:	9e08      	ldr	r6, [sp, #32]
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	4690      	mov	r8, r2
 8000fc6:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000fc8:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8000fcc:	b28d      	uxth	r5, r1
 8000fce:	6823      	ldr	r3, [r4, #0]
 8000fd0:	f1b9 0f01 	cmp.w	r9, #1
 8000fd4:	bf0c      	ite	eq
 8000fd6:	695b      	ldreq	r3, [r3, #20]
 8000fd8:	699b      	ldrne	r3, [r3, #24]
 8000fda:	ea35 0303 	bics.w	r3, r5, r3
 8000fde:	bf0c      	ite	eq
 8000fe0:	2301      	moveq	r3, #1
 8000fe2:	2300      	movne	r3, #0
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d002      	beq.n	8000fee <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8000fe8:	2000      	movs	r0, #0
}
 8000fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000fee:	1c7b      	adds	r3, r7, #1
 8000ff0:	d0ed      	beq.n	8000fce <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000ff2:	f7ff fd2f 	bl	8000a54 <HAL_GetTick>
 8000ff6:	1b80      	subs	r0, r0, r6
 8000ff8:	4287      	cmp	r7, r0
 8000ffa:	d301      	bcc.n	8001000 <I2C_WaitOnFlagUntilTimeout+0x44>
 8000ffc:	2f00      	cmp	r7, #0
 8000ffe:	d1e6      	bne.n	8000fce <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001000:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001002:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001004:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001006:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800100a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800100e:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001010:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001014:	f042 0220 	orr.w	r2, r2, #32
 8001018:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800101a:	2001      	movs	r0, #1
 800101c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001020 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001020:	b570      	push	{r4, r5, r6, lr}
 8001022:	4604      	mov	r4, r0
 8001024:	460d      	mov	r5, r1
 8001026:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001028:	6823      	ldr	r3, [r4, #0]
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	061b      	lsls	r3, r3, #24
 800102e:	d501      	bpl.n	8001034 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8001030:	2000      	movs	r0, #0
 8001032:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001034:	4620      	mov	r0, r4
 8001036:	f7ff ff0d 	bl	8000e54 <I2C_IsAcknowledgeFailed>
 800103a:	b9a8      	cbnz	r0, 8001068 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800103c:	1c6a      	adds	r2, r5, #1
 800103e:	d0f3      	beq.n	8001028 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001040:	f7ff fd08 	bl	8000a54 <HAL_GetTick>
 8001044:	1b80      	subs	r0, r0, r6
 8001046:	4285      	cmp	r5, r0
 8001048:	d301      	bcc.n	800104e <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800104a:	2d00      	cmp	r5, #0
 800104c:	d1ec      	bne.n	8001028 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800104e:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001050:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001052:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001054:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001058:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800105c:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800105e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001062:	f042 0220 	orr.w	r2, r2, #32
 8001066:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001068:	2001      	movs	r0, #1
}
 800106a:	bd70      	pop	{r4, r5, r6, pc}

0800106c <I2C_RequestMemoryWrite>:
{
 800106c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001070:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001072:	6802      	ldr	r2, [r0, #0]
{
 8001074:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8001076:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001078:	6813      	ldr	r3, [r2, #0]
 800107a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107e:	6013      	str	r3, [r2, #0]
{
 8001080:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001082:	9600      	str	r6, [sp, #0]
 8001084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001086:	2200      	movs	r2, #0
 8001088:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 800108c:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800108e:	f7ff ff95 	bl	8000fbc <I2C_WaitOnFlagUntilTimeout>
 8001092:	b118      	cbz	r0, 800109c <I2C_RequestMemoryWrite+0x30>
      return HAL_ERROR;
 8001094:	2001      	movs	r0, #1
}
 8001096:	b004      	add	sp, #16
 8001098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800109c:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800109e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80010a0:	4918      	ldr	r1, [pc, #96]	; (8001104 <I2C_RequestMemoryWrite+0x98>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80010a2:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 80010a6:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80010a8:	4620      	mov	r0, r4
 80010aa:	4633      	mov	r3, r6
 80010ac:	f7ff feec 	bl	8000e88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80010b0:	2800      	cmp	r0, #0
 80010b2:	d1ef      	bne.n	8001094 <I2C_RequestMemoryWrite+0x28>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010b4:	6823      	ldr	r3, [r4, #0]
 80010b6:	9003      	str	r0, [sp, #12]
 80010b8:	695a      	ldr	r2, [r3, #20]
 80010ba:	9203      	str	r2, [sp, #12]
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80010c0:	4632      	mov	r2, r6
 80010c2:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010c4:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80010c6:	4620      	mov	r0, r4
 80010c8:	f7ff ffaa 	bl	8001020 <I2C_WaitOnTXEFlagUntilTimeout>
 80010cc:	b140      	cbz	r0, 80010e0 <I2C_RequestMemoryWrite+0x74>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80010ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010d0:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010d2:	bf01      	itttt	eq
 80010d4:	6822      	ldreq	r2, [r4, #0]
 80010d6:	6813      	ldreq	r3, [r2, #0]
 80010d8:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80010dc:	6013      	streq	r3, [r2, #0]
 80010de:	e7d9      	b.n	8001094 <I2C_RequestMemoryWrite+0x28>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80010e0:	f1b8 0f01 	cmp.w	r8, #1
 80010e4:	6823      	ldr	r3, [r4, #0]
 80010e6:	d102      	bne.n	80010ee <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80010e8:	b2ed      	uxtb	r5, r5
 80010ea:	611d      	str	r5, [r3, #16]
 80010ec:	e7d3      	b.n	8001096 <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80010ee:	0a2a      	lsrs	r2, r5, #8
 80010f0:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80010f2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80010f4:	4632      	mov	r2, r6
 80010f6:	4620      	mov	r0, r4
 80010f8:	f7ff ff92 	bl	8001020 <I2C_WaitOnTXEFlagUntilTimeout>
 80010fc:	2800      	cmp	r0, #0
 80010fe:	d1e6      	bne.n	80010ce <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001100:	6823      	ldr	r3, [r4, #0]
 8001102:	e7f1      	b.n	80010e8 <I2C_RequestMemoryWrite+0x7c>
 8001104:	00010002 	.word	0x00010002

08001108 <I2C_RequestMemoryRead>:
{
 8001108:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800110c:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800110e:	6803      	ldr	r3, [r0, #0]
{
 8001110:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8001112:	4616      	mov	r6, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800111a:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001122:	601a      	str	r2, [r3, #0]
{
 8001124:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001126:	9500      	str	r5, [sp, #0]
 8001128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800112a:	2200      	movs	r2, #0
 800112c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8001130:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001132:	f7ff ff43 	bl	8000fbc <I2C_WaitOnFlagUntilTimeout>
 8001136:	b118      	cbz	r0, 8001140 <I2C_RequestMemoryRead+0x38>
    return HAL_ERROR;
 8001138:	2001      	movs	r0, #1
}
 800113a:	b004      	add	sp, #16
 800113c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001140:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001142:	492b      	ldr	r1, [pc, #172]	; (80011f0 <I2C_RequestMemoryRead+0xe8>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001144:	b2ff      	uxtb	r7, r7
 8001146:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 800114a:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800114c:	4620      	mov	r0, r4
 800114e:	462b      	mov	r3, r5
 8001150:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001152:	f7ff fe99 	bl	8000e88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001156:	2800      	cmp	r0, #0
 8001158:	d1ee      	bne.n	8001138 <I2C_RequestMemoryRead+0x30>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800115a:	6823      	ldr	r3, [r4, #0]
 800115c:	9003      	str	r0, [sp, #12]
 800115e:	695a      	ldr	r2, [r3, #20]
 8001160:	9203      	str	r2, [sp, #12]
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001166:	462a      	mov	r2, r5
 8001168:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800116a:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800116c:	4620      	mov	r0, r4
 800116e:	f7ff ff57 	bl	8001020 <I2C_WaitOnTXEFlagUntilTimeout>
 8001172:	b140      	cbz	r0, 8001186 <I2C_RequestMemoryRead+0x7e>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001174:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001176:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001178:	bf01      	itttt	eq
 800117a:	6822      	ldreq	r2, [r4, #0]
 800117c:	6813      	ldreq	r3, [r2, #0]
 800117e:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001182:	6013      	streq	r3, [r2, #0]
 8001184:	e7d8      	b.n	8001138 <I2C_RequestMemoryRead+0x30>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001186:	f1b8 0f01 	cmp.w	r8, #1
 800118a:	6823      	ldr	r3, [r4, #0]
 800118c:	d125      	bne.n	80011da <I2C_RequestMemoryRead+0xd2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800118e:	b2f6      	uxtb	r6, r6
 8001190:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001192:	462a      	mov	r2, r5
 8001194:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001196:	4620      	mov	r0, r4
 8001198:	f7ff ff42 	bl	8001020 <I2C_WaitOnTXEFlagUntilTimeout>
 800119c:	4602      	mov	r2, r0
 800119e:	2800      	cmp	r0, #0
 80011a0:	d1e8      	bne.n	8001174 <I2C_RequestMemoryRead+0x6c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80011a2:	6821      	ldr	r1, [r4, #0]
 80011a4:	680b      	ldr	r3, [r1, #0]
 80011a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011aa:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80011ac:	4620      	mov	r0, r4
 80011ae:	9500      	str	r5, [sp, #0]
 80011b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80011b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80011b6:	f7ff ff01 	bl	8000fbc <I2C_WaitOnFlagUntilTimeout>
 80011ba:	2800      	cmp	r0, #0
 80011bc:	d1bc      	bne.n	8001138 <I2C_RequestMemoryRead+0x30>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80011be:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80011c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80011c2:	490b      	ldr	r1, [pc, #44]	; (80011f0 <I2C_RequestMemoryRead+0xe8>)
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80011c4:	f047 0701 	orr.w	r7, r7, #1
 80011c8:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80011ca:	4620      	mov	r0, r4
 80011cc:	462b      	mov	r3, r5
 80011ce:	f7ff fe5b 	bl	8000e88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_ERROR;
 80011d2:	3000      	adds	r0, #0
 80011d4:	bf18      	it	ne
 80011d6:	2001      	movne	r0, #1
 80011d8:	e7af      	b.n	800113a <I2C_RequestMemoryRead+0x32>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80011da:	0a32      	lsrs	r2, r6, #8
 80011dc:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80011de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80011e0:	462a      	mov	r2, r5
 80011e2:	4620      	mov	r0, r4
 80011e4:	f7ff ff1c 	bl	8001020 <I2C_WaitOnTXEFlagUntilTimeout>
 80011e8:	2800      	cmp	r0, #0
 80011ea:	d1c3      	bne.n	8001174 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80011ec:	6823      	ldr	r3, [r4, #0]
 80011ee:	e7ce      	b.n	800118e <I2C_RequestMemoryRead+0x86>
 80011f0:	00010002 	.word	0x00010002

080011f4 <HAL_I2C_MspInit>:
 80011f4:	4770      	bx	lr
	...

080011f8 <HAL_I2C_Init>:
{
 80011f8:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 80011fa:	4604      	mov	r4, r0
 80011fc:	b908      	cbnz	r0, 8001202 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80011fe:	2001      	movs	r0, #1
 8001200:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001202:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001206:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800120a:	b91b      	cbnz	r3, 8001214 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800120c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001210:	f7ff fff0 	bl	80011f4 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8001214:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001216:	2324      	movs	r3, #36	; 0x24
 8001218:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800121c:	6813      	ldr	r3, [r2, #0]
 800121e:	f023 0301 	bic.w	r3, r3, #1
 8001222:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001224:	f000 fd58 	bl	8001cd8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001228:	6865      	ldr	r5, [r4, #4]
 800122a:	4b41      	ldr	r3, [pc, #260]	; (8001330 <HAL_I2C_Init+0x138>)
 800122c:	429d      	cmp	r5, r3
 800122e:	d84d      	bhi.n	80012cc <HAL_I2C_Init+0xd4>
 8001230:	4b40      	ldr	r3, [pc, #256]	; (8001334 <HAL_I2C_Init+0x13c>)
 8001232:	4298      	cmp	r0, r3
 8001234:	d9e3      	bls.n	80011fe <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001236:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001238:	493f      	ldr	r1, [pc, #252]	; (8001338 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800123a:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800123c:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001240:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001244:	430b      	orrs	r3, r1
 8001246:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001248:	6a13      	ldr	r3, [r2, #32]
 800124a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800124e:	3101      	adds	r1, #1
 8001250:	4319      	orrs	r1, r3
 8001252:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001254:	69d1      	ldr	r1, [r2, #28]
 8001256:	4b36      	ldr	r3, [pc, #216]	; (8001330 <HAL_I2C_Init+0x138>)
 8001258:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800125c:	429d      	cmp	r5, r3
 800125e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001262:	f100 30ff 	add.w	r0, r0, #4294967295
 8001266:	d848      	bhi.n	80012fa <HAL_I2C_Init+0x102>
 8001268:	006d      	lsls	r5, r5, #1
 800126a:	fbb0 f0f5 	udiv	r0, r0, r5
 800126e:	3001      	adds	r0, #1
 8001270:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001274:	2b04      	cmp	r3, #4
 8001276:	bf38      	it	cc
 8001278:	2304      	movcc	r3, #4
 800127a:	430b      	orrs	r3, r1
 800127c:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800127e:	6811      	ldr	r1, [r2, #0]
 8001280:	6a20      	ldr	r0, [r4, #32]
 8001282:	69e3      	ldr	r3, [r4, #28]
 8001284:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001288:	4303      	orrs	r3, r0
 800128a:	430b      	orrs	r3, r1
 800128c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800128e:	6891      	ldr	r1, [r2, #8]
 8001290:	68e0      	ldr	r0, [r4, #12]
 8001292:	6923      	ldr	r3, [r4, #16]
 8001294:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001298:	4303      	orrs	r3, r0
 800129a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800129e:	430b      	orrs	r3, r1
 80012a0:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012a2:	68d1      	ldr	r1, [r2, #12]
 80012a4:	69a0      	ldr	r0, [r4, #24]
 80012a6:	6963      	ldr	r3, [r4, #20]
 80012a8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80012ac:	4303      	orrs	r3, r0
 80012ae:	430b      	orrs	r3, r1
 80012b0:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80012b2:	6813      	ldr	r3, [r2, #0]
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012ba:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80012bc:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012be:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012c4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012c6:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80012ca:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012cc:	4b1b      	ldr	r3, [pc, #108]	; (800133c <HAL_I2C_Init+0x144>)
 80012ce:	4298      	cmp	r0, r3
 80012d0:	d995      	bls.n	80011fe <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012d2:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80012d4:	4e18      	ldr	r6, [pc, #96]	; (8001338 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012d6:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80012d8:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012e0:	4333      	orrs	r3, r6
 80012e2:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012e4:	6a13      	ldr	r3, [r2, #32]
 80012e6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80012ea:	4371      	muls	r1, r6
 80012ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012f0:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80012f4:	fbb1 f1f6 	udiv	r1, r1, r6
 80012f8:	e7a9      	b.n	800124e <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012fa:	68a3      	ldr	r3, [r4, #8]
 80012fc:	b953      	cbnz	r3, 8001314 <HAL_I2C_Init+0x11c>
 80012fe:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001302:	fbb0 f0f3 	udiv	r0, r0, r3
 8001306:	1c43      	adds	r3, r0, #1
 8001308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800130c:	b16b      	cbz	r3, 800132a <HAL_I2C_Init+0x132>
 800130e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001312:	e7b2      	b.n	800127a <HAL_I2C_Init+0x82>
 8001314:	2319      	movs	r3, #25
 8001316:	436b      	muls	r3, r5
 8001318:	fbb0 f0f3 	udiv	r0, r0, r3
 800131c:	1c43      	adds	r3, r0, #1
 800131e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001322:	b113      	cbz	r3, 800132a <HAL_I2C_Init+0x132>
 8001324:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001328:	e7a7      	b.n	800127a <HAL_I2C_Init+0x82>
 800132a:	2301      	movs	r3, #1
 800132c:	e7a5      	b.n	800127a <HAL_I2C_Init+0x82>
 800132e:	bf00      	nop
 8001330:	000186a0 	.word	0x000186a0
 8001334:	001e847f 	.word	0x001e847f
 8001338:	000f4240 	.word	0x000f4240
 800133c:	003d08ff 	.word	0x003d08ff

08001340 <HAL_I2C_MspDeInit>:
 8001340:	4770      	bx	lr

08001342 <HAL_I2C_DeInit>:
{
 8001342:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8001344:	4604      	mov	r4, r0
 8001346:	b198      	cbz	r0, 8001370 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8001348:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800134a:	2324      	movs	r3, #36	; 0x24
 800134c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001350:	6813      	ldr	r3, [r2, #0]
 8001352:	f023 0301 	bic.w	r3, r3, #1
 8001356:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8001358:	f7ff fff2 	bl	8001340 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800135c:	2000      	movs	r0, #0
 800135e:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_UNLOCK(hi2c);
 8001360:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  hi2c->State         = HAL_I2C_STATE_RESET;
 8001364:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001368:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800136a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 800136e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001370:	2001      	movs	r0, #1
}
 8001372:	bd10      	pop	{r4, pc}

08001374 <HAL_I2C_Mem_Write>:
{
 8001374:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001378:	4604      	mov	r4, r0
 800137a:	4699      	mov	r9, r3
 800137c:	460f      	mov	r7, r1
 800137e:	4690      	mov	r8, r2
 8001380:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8001382:	f7ff fb67 	bl	8000a54 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001386:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800138a:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 800138c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800138e:	d003      	beq.n	8001398 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8001390:	2002      	movs	r0, #2
}
 8001392:	b003      	add	sp, #12
 8001394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001398:	9000      	str	r0, [sp, #0]
 800139a:	2319      	movs	r3, #25
 800139c:	2201      	movs	r2, #1
 800139e:	493b      	ldr	r1, [pc, #236]	; (800148c <HAL_I2C_Mem_Write+0x118>)
 80013a0:	4620      	mov	r0, r4
 80013a2:	f7ff fe0b 	bl	8000fbc <I2C_WaitOnFlagUntilTimeout>
 80013a6:	2800      	cmp	r0, #0
 80013a8:	d1f2      	bne.n	8001390 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 80013aa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d0ee      	beq.n	8001390 <HAL_I2C_Mem_Write+0x1c>
 80013b2:	2301      	movs	r3, #1
 80013b4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013b8:	6823      	ldr	r3, [r4, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80013be:	bf5e      	ittt	pl
 80013c0:	681a      	ldrpl	r2, [r3, #0]
 80013c2:	f042 0201 	orrpl.w	r2, r2, #1
 80013c6:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013ce:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80013d0:	2321      	movs	r3, #33	; 0x21
 80013d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80013d6:	2340      	movs	r3, #64	; 0x40
 80013d8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013dc:	2300      	movs	r3, #0
 80013de:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80013e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80013e2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80013e4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80013e8:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80013ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80013ec:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013ee:	4b28      	ldr	r3, [pc, #160]	; (8001490 <HAL_I2C_Mem_Write+0x11c>)
 80013f0:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013f2:	9501      	str	r5, [sp, #4]
 80013f4:	9600      	str	r6, [sp, #0]
 80013f6:	464b      	mov	r3, r9
 80013f8:	4642      	mov	r2, r8
 80013fa:	4639      	mov	r1, r7
 80013fc:	4620      	mov	r0, r4
 80013fe:	f7ff fe35 	bl	800106c <I2C_RequestMemoryWrite>
 8001402:	2800      	cmp	r0, #0
 8001404:	d02a      	beq.n	800145c <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 8001406:	2001      	movs	r0, #1
 8001408:	e7c3      	b.n	8001392 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800140a:	f7ff fe09 	bl	8001020 <I2C_WaitOnTXEFlagUntilTimeout>
 800140e:	b140      	cbz	r0, 8001422 <HAL_I2C_Mem_Write+0xae>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001410:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001412:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001414:	bf01      	itttt	eq
 8001416:	6822      	ldreq	r2, [r4, #0]
 8001418:	6813      	ldreq	r3, [r2, #0]
 800141a:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 800141e:	6013      	streq	r3, [r2, #0]
 8001420:	e7f1      	b.n	8001406 <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001422:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001424:	6827      	ldr	r7, [r4, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	f812 1b01 	ldrb.w	r1, [r2], #1
 800142c:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 800142e:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001430:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001432:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001434:	3a01      	subs	r2, #1
 8001436:	b292      	uxth	r2, r2
 8001438:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800143a:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 800143c:	1e48      	subs	r0, r1, #1
 800143e:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001440:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8001442:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001444:	d50a      	bpl.n	800145c <HAL_I2C_Mem_Write+0xe8>
 8001446:	b148      	cbz	r0, 800145c <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001448:	785a      	ldrb	r2, [r3, #1]
 800144a:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 800144c:	3302      	adds	r3, #2
 800144e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001450:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001452:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8001454:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8001456:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8001458:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800145a:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800145c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800145e:	462a      	mov	r2, r5
 8001460:	4631      	mov	r1, r6
 8001462:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1d0      	bne.n	800140a <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001468:	f7ff fd53 	bl	8000f12 <I2C_WaitOnBTFFlagUntilTimeout>
 800146c:	2800      	cmp	r0, #0
 800146e:	d1cf      	bne.n	8001410 <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001470:	6822      	ldr	r2, [r4, #0]
 8001472:	6813      	ldr	r3, [r2, #0]
 8001474:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001478:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800147a:	2320      	movs	r3, #32
 800147c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001480:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001484:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8001488:	e783      	b.n	8001392 <HAL_I2C_Mem_Write+0x1e>
 800148a:	bf00      	nop
 800148c:	00100002 	.word	0x00100002
 8001490:	ffff0000 	.word	0xffff0000

08001494 <HAL_I2C_Mem_Read>:
{
 8001494:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001498:	4604      	mov	r4, r0
 800149a:	b087      	sub	sp, #28
 800149c:	4699      	mov	r9, r3
 800149e:	460d      	mov	r5, r1
 80014a0:	4690      	mov	r8, r2
 80014a2:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80014a4:	f7ff fad6 	bl	8000a54 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80014a8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80014ac:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80014ae:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80014b0:	d004      	beq.n	80014bc <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 80014b2:	2502      	movs	r5, #2
}
 80014b4:	4628      	mov	r0, r5
 80014b6:	b007      	add	sp, #28
 80014b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014bc:	9000      	str	r0, [sp, #0]
 80014be:	2319      	movs	r3, #25
 80014c0:	2201      	movs	r2, #1
 80014c2:	4977      	ldr	r1, [pc, #476]	; (80016a0 <HAL_I2C_Mem_Read+0x20c>)
 80014c4:	4620      	mov	r0, r4
 80014c6:	f7ff fd79 	bl	8000fbc <I2C_WaitOnFlagUntilTimeout>
 80014ca:	2800      	cmp	r0, #0
 80014cc:	d1f1      	bne.n	80014b2 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 80014ce:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d0ed      	beq.n	80014b2 <HAL_I2C_Mem_Read+0x1e>
 80014d6:	2301      	movs	r3, #1
 80014d8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014dc:	6823      	ldr	r3, [r4, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80014e2:	bf5e      	ittt	pl
 80014e4:	681a      	ldrpl	r2, [r3, #0]
 80014e6:	f042 0201 	orrpl.w	r2, r2, #1
 80014ea:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014f2:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80014f4:	2322      	movs	r3, #34	; 0x22
 80014f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80014fa:	2340      	movs	r3, #64	; 0x40
 80014fc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001500:	2300      	movs	r3, #0
 8001502:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001504:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001506:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001508:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800150c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800150e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001510:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001512:	4b64      	ldr	r3, [pc, #400]	; (80016a4 <HAL_I2C_Mem_Read+0x210>)
 8001514:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001516:	4629      	mov	r1, r5
 8001518:	9601      	str	r6, [sp, #4]
 800151a:	9700      	str	r7, [sp, #0]
 800151c:	464b      	mov	r3, r9
 800151e:	4642      	mov	r2, r8
 8001520:	4620      	mov	r0, r4
 8001522:	f7ff fdf1 	bl	8001108 <I2C_RequestMemoryRead>
 8001526:	4605      	mov	r5, r0
 8001528:	b108      	cbz	r0, 800152e <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 800152a:	2501      	movs	r5, #1
 800152c:	e7c2      	b.n	80014b4 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 800152e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001530:	6823      	ldr	r3, [r4, #0]
 8001532:	b992      	cbnz	r2, 800155a <HAL_I2C_Mem_Read+0xc6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001534:	9002      	str	r0, [sp, #8]
 8001536:	695a      	ldr	r2, [r3, #20]
 8001538:	9202      	str	r2, [sp, #8]
 800153a:	699a      	ldr	r2, [r3, #24]
 800153c:	9202      	str	r2, [sp, #8]
 800153e:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001546:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001548:	2320      	movs	r3, #32
 800154a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800154e:	2300      	movs	r3, #0
 8001550:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001554:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001558:	e7ac      	b.n	80014b4 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 800155a:	2a01      	cmp	r2, #1
 800155c:	d12c      	bne.n	80015b8 <HAL_I2C_Mem_Read+0x124>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001564:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001566:	9003      	str	r0, [sp, #12]
 8001568:	695a      	ldr	r2, [r3, #20]
 800156a:	9203      	str	r2, [sp, #12]
 800156c:	699a      	ldr	r2, [r3, #24]
 800156e:	9203      	str	r2, [sp, #12]
 8001570:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001578:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800157a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80016a8 <HAL_I2C_Mem_Read+0x214>
    while (hi2c->XferSize > 0U)
 800157e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0e1      	beq.n	8001548 <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 8001584:	2b03      	cmp	r3, #3
 8001586:	d86e      	bhi.n	8001666 <HAL_I2C_Mem_Read+0x1d2>
        if (hi2c->XferSize == 1U)
 8001588:	2b01      	cmp	r3, #1
 800158a:	d12d      	bne.n	80015e8 <HAL_I2C_Mem_Read+0x154>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800158c:	4632      	mov	r2, r6
 800158e:	4639      	mov	r1, r7
 8001590:	4620      	mov	r0, r4
 8001592:	f7ff fce4 	bl	8000f5e <I2C_WaitOnRXNEFlagUntilTimeout>
 8001596:	2800      	cmp	r0, #0
 8001598:	d1c7      	bne.n	800152a <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800159a:	6822      	ldr	r2, [r4, #0]
 800159c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800159e:	6912      	ldr	r2, [r2, #16]
 80015a0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80015a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015a4:	3301      	adds	r3, #1
 80015a6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80015a8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80015aa:	3b01      	subs	r3, #1
 80015ac:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80015ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015b0:	3b01      	subs	r3, #1
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	8563      	strh	r3, [r4, #42]	; 0x2a
 80015b6:	e7e2      	b.n	800157e <HAL_I2C_Mem_Read+0xea>
    else if (hi2c->XferSize == 2U)
 80015b8:	2a02      	cmp	r2, #2
 80015ba:	d10e      	bne.n	80015da <HAL_I2C_Mem_Read+0x146>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015c2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015ca:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015cc:	9004      	str	r0, [sp, #16]
 80015ce:	695a      	ldr	r2, [r3, #20]
 80015d0:	9204      	str	r2, [sp, #16]
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	9304      	str	r3, [sp, #16]
 80015d6:	9b04      	ldr	r3, [sp, #16]
 80015d8:	e7cf      	b.n	800157a <HAL_I2C_Mem_Read+0xe6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015da:	9005      	str	r0, [sp, #20]
 80015dc:	695a      	ldr	r2, [r3, #20]
 80015de:	9205      	str	r2, [sp, #20]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	9305      	str	r3, [sp, #20]
 80015e4:	9b05      	ldr	r3, [sp, #20]
 80015e6:	e7c8      	b.n	800157a <HAL_I2C_Mem_Read+0xe6>
        else if (hi2c->XferSize == 2U)
 80015e8:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015ea:	9600      	str	r6, [sp, #0]
 80015ec:	463b      	mov	r3, r7
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	4641      	mov	r1, r8
 80015f4:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 80015f6:	d119      	bne.n	800162c <HAL_I2C_Mem_Read+0x198>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015f8:	f7ff fce0 	bl	8000fbc <I2C_WaitOnFlagUntilTimeout>
 80015fc:	2800      	cmp	r0, #0
 80015fe:	d194      	bne.n	800152a <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001600:	6823      	ldr	r3, [r4, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001608:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800160a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8001610:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001612:	1c53      	adds	r3, r2, #1
 8001614:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001616:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001618:	3b01      	subs	r3, #1
 800161a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800161c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800161e:	3b01      	subs	r3, #1
 8001620:	b29b      	uxth	r3, r3
 8001622:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001624:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	7053      	strb	r3, [r2, #1]
 800162a:	e7ba      	b.n	80015a2 <HAL_I2C_Mem_Read+0x10e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800162c:	f7ff fcc6 	bl	8000fbc <I2C_WaitOnFlagUntilTimeout>
 8001630:	4602      	mov	r2, r0
 8001632:	2800      	cmp	r0, #0
 8001634:	f47f af79 	bne.w	800152a <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001638:	6823      	ldr	r3, [r4, #0]
 800163a:	6819      	ldr	r1, [r3, #0]
 800163c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001640:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001642:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	700b      	strb	r3, [r1, #0]
          hi2c->pBuffPtr++;
 8001648:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800164a:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 800164c:	3301      	adds	r3, #1
 800164e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001650:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001652:	3b01      	subs	r3, #1
 8001654:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001656:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001658:	3b01      	subs	r3, #1
 800165a:	b29b      	uxth	r3, r3
 800165c:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800165e:	4641      	mov	r1, r8
 8001660:	463b      	mov	r3, r7
 8001662:	4620      	mov	r0, r4
 8001664:	e7c8      	b.n	80015f8 <HAL_I2C_Mem_Read+0x164>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001666:	4632      	mov	r2, r6
 8001668:	4639      	mov	r1, r7
 800166a:	4620      	mov	r0, r4
 800166c:	f7ff fc77 	bl	8000f5e <I2C_WaitOnRXNEFlagUntilTimeout>
 8001670:	2800      	cmp	r0, #0
 8001672:	f47f af5a 	bne.w	800152a <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001676:	6822      	ldr	r2, [r4, #0]
 8001678:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800167a:	6912      	ldr	r2, [r2, #16]
 800167c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800167e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001680:	1c53      	adds	r3, r2, #1
 8001682:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8001684:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001686:	3b01      	subs	r3, #1
 8001688:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800168a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800168c:	3b01      	subs	r3, #1
 800168e:	b29b      	uxth	r3, r3
 8001690:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001692:	6823      	ldr	r3, [r4, #0]
 8001694:	6959      	ldr	r1, [r3, #20]
 8001696:	0749      	lsls	r1, r1, #29
 8001698:	f57f af71 	bpl.w	800157e <HAL_I2C_Mem_Read+0xea>
 800169c:	e7c3      	b.n	8001626 <HAL_I2C_Mem_Read+0x192>
 800169e:	bf00      	nop
 80016a0:	00100002 	.word	0x00100002
 80016a4:	ffff0000 	.word	0xffff0000
 80016a8:	00010004 	.word	0x00010004

080016ac <HAL_I2C_IsDeviceReady>:
{
 80016ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016b0:	4604      	mov	r4, r0
 80016b2:	b085      	sub	sp, #20
 80016b4:	4698      	mov	r8, r3
 80016b6:	4689      	mov	r9, r1
 80016b8:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 80016ba:	f7ff f9cb 	bl	8000a54 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80016be:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80016c2:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80016c4:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80016c6:	d003      	beq.n	80016d0 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 80016c8:	2002      	movs	r0, #2
}
 80016ca:	b005      	add	sp, #20
 80016cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016d0:	9000      	str	r0, [sp, #0]
 80016d2:	2319      	movs	r3, #25
 80016d4:	2201      	movs	r2, #1
 80016d6:	4948      	ldr	r1, [pc, #288]	; (80017f8 <HAL_I2C_IsDeviceReady+0x14c>)
 80016d8:	4620      	mov	r0, r4
 80016da:	f7ff fc6f 	bl	8000fbc <I2C_WaitOnFlagUntilTimeout>
 80016de:	2800      	cmp	r0, #0
 80016e0:	d1f2      	bne.n	80016c8 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 80016e2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d0ee      	beq.n	80016c8 <HAL_I2C_IsDeviceReady+0x1c>
 80016ea:	2301      	movs	r3, #1
 80016ec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016f0:	6823      	ldr	r3, [r4, #0]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016f2:	f8df b104 	ldr.w	fp, [pc, #260]	; 80017f8 <HAL_I2C_IsDeviceReady+0x14c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80016fa:	bf5e      	ittt	pl
 80016fc:	681a      	ldrpl	r2, [r3, #0]
 80016fe:	f042 0201 	orrpl.w	r2, r2, #1
 8001702:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800170a:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800170c:	2324      	movs	r3, #36	; 0x24
 800170e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001712:	2300      	movs	r3, #0
 8001714:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001716:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800171a:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t I2C_Trials = 1U;
 800171c:	2701      	movs	r7, #1
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800171e:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001722:	6822      	ldr	r2, [r4, #0]
 8001724:	6813      	ldr	r3, [r2, #0]
 8001726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800172a:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800172c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001730:	9500      	str	r5, [sp, #0]
 8001732:	4643      	mov	r3, r8
 8001734:	2200      	movs	r2, #0
 8001736:	4620      	mov	r0, r4
 8001738:	f7ff fc40 	bl	8000fbc <I2C_WaitOnFlagUntilTimeout>
 800173c:	b108      	cbz	r0, 8001742 <HAL_I2C_IsDeviceReady+0x96>
    return HAL_ERROR;
 800173e:	2001      	movs	r0, #1
 8001740:	e7c3      	b.n	80016ca <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001742:	6823      	ldr	r3, [r4, #0]
 8001744:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 8001748:	f7ff f984 	bl	8000a54 <HAL_GetTick>
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800174c:	6823      	ldr	r3, [r4, #0]
 800174e:	695a      	ldr	r2, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001750:	695b      	ldr	r3, [r3, #20]
      tickstart = HAL_GetTick();
 8001752:	4605      	mov	r5, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001754:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001758:	f3c3 2380 	ubfx	r3, r3, #10, #1
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800175c:	26a0      	movs	r6, #160	; 0xa0
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800175e:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8001762:	29a0      	cmp	r1, #160	; 0xa0
 8001764:	d001      	beq.n	800176a <HAL_I2C_IsDeviceReady+0xbe>
 8001766:	b902      	cbnz	r2, 800176a <HAL_I2C_IsDeviceReady+0xbe>
 8001768:	b303      	cbz	r3, 80017ac <HAL_I2C_IsDeviceReady+0x100>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800176a:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 800176c:	2620      	movs	r6, #32
 800176e:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001772:	695a      	ldr	r2, [r3, #20]
 8001774:	f012 0f02 	tst.w	r2, #2
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800177e:	601a      	str	r2, [r3, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001780:	d026      	beq.n	80017d0 <HAL_I2C_IsDeviceReady+0x124>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001782:	2200      	movs	r2, #0
 8001784:	9203      	str	r2, [sp, #12]
 8001786:	695a      	ldr	r2, [r3, #20]
 8001788:	9203      	str	r2, [sp, #12]
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	9303      	str	r3, [sp, #12]
 800178e:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001790:	9500      	str	r5, [sp, #0]
 8001792:	2319      	movs	r3, #25
 8001794:	2201      	movs	r2, #1
 8001796:	4918      	ldr	r1, [pc, #96]	; (80017f8 <HAL_I2C_IsDeviceReady+0x14c>)
 8001798:	4620      	mov	r0, r4
 800179a:	f7ff fc0f 	bl	8000fbc <I2C_WaitOnFlagUntilTimeout>
 800179e:	2800      	cmp	r0, #0
 80017a0:	d1cd      	bne.n	800173e <HAL_I2C_IsDeviceReady+0x92>
        hi2c->State = HAL_I2C_STATE_READY;
 80017a2:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80017a6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 80017aa:	e78e      	b.n	80016ca <HAL_I2C_IsDeviceReady+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80017ac:	f7ff f952 	bl	8000a54 <HAL_GetTick>
 80017b0:	1b40      	subs	r0, r0, r5
 80017b2:	4580      	cmp	r8, r0
 80017b4:	d302      	bcc.n	80017bc <HAL_I2C_IsDeviceReady+0x110>
 80017b6:	f1b8 0f00 	cmp.w	r8, #0
 80017ba:	d101      	bne.n	80017c0 <HAL_I2C_IsDeviceReady+0x114>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80017bc:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80017c0:	6823      	ldr	r3, [r4, #0]
 80017c2:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80017c4:	695b      	ldr	r3, [r3, #20]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80017c6:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80017ca:	f3c3 2380 	ubfx	r3, r3, #10, #1
 80017ce:	e7c6      	b.n	800175e <HAL_I2C_IsDeviceReady+0xb2>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80017d4:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017d6:	4659      	mov	r1, fp
 80017d8:	9500      	str	r5, [sp, #0]
 80017da:	2319      	movs	r3, #25
 80017dc:	2201      	movs	r2, #1
 80017de:	4620      	mov	r0, r4
 80017e0:	f7ff fbec 	bl	8000fbc <I2C_WaitOnFlagUntilTimeout>
 80017e4:	2800      	cmp	r0, #0
 80017e6:	d1aa      	bne.n	800173e <HAL_I2C_IsDeviceReady+0x92>
      I2C_Trials++;
 80017e8:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 80017ea:	4557      	cmp	r7, sl
 80017ec:	d399      	bcc.n	8001722 <HAL_I2C_IsDeviceReady+0x76>
    hi2c->State = HAL_I2C_STATE_READY;
 80017ee:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80017f2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 80017f6:	e7a2      	b.n	800173e <HAL_I2C_IsDeviceReady+0x92>
 80017f8:	00100002 	.word	0x00100002

080017fc <HAL_I2C_GetState>:
  return hi2c->State;
 80017fc:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8001800:	4770      	bx	lr

08001802 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8001802:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8001804:	4770      	bx	lr

08001806 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001806:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	2a20      	cmp	r2, #32
{
 800180e:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001810:	d116      	bne.n	8001840 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001812:	2324      	movs	r3, #36	; 0x24
 8001814:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001818:	6803      	ldr	r3, [r0, #0]
 800181a:	681c      	ldr	r4, [r3, #0]
 800181c:	f024 0401 	bic.w	r4, r4, #1
 8001820:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8001822:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001824:	f024 0410 	bic.w	r4, r4, #16
 8001828:	625c      	str	r4, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800182a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800182c:	4321      	orrs	r1, r4
 800182e:	6259      	str	r1, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8001830:	6819      	ldr	r1, [r3, #0]
 8001832:	f041 0101 	orr.w	r1, r1, #1
 8001836:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001838:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_OK;
 800183c:	2000      	movs	r0, #0
 800183e:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001840:	2002      	movs	r0, #2
  }
}
 8001842:	bd10      	pop	{r4, pc}

08001844 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001844:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001848:	4604      	mov	r4, r0
 800184a:	b918      	cbnz	r0, 8001854 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800184c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800184e:	b002      	add	sp, #8
 8001850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001854:	6803      	ldr	r3, [r0, #0]
 8001856:	07dd      	lsls	r5, r3, #31
 8001858:	d410      	bmi.n	800187c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800185a:	6823      	ldr	r3, [r4, #0]
 800185c:	0798      	lsls	r0, r3, #30
 800185e:	d458      	bmi.n	8001912 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001860:	6823      	ldr	r3, [r4, #0]
 8001862:	071a      	lsls	r2, r3, #28
 8001864:	f100 809a 	bmi.w	800199c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001868:	6823      	ldr	r3, [r4, #0]
 800186a:	075b      	lsls	r3, r3, #29
 800186c:	f100 80b8 	bmi.w	80019e0 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001870:	69a2      	ldr	r2, [r4, #24]
 8001872:	2a00      	cmp	r2, #0
 8001874:	f040 8119 	bne.w	8001aaa <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001878:	2000      	movs	r0, #0
 800187a:	e7e8      	b.n	800184e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800187c:	4ba6      	ldr	r3, [pc, #664]	; (8001b18 <HAL_RCC_OscConfig+0x2d4>)
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	f002 020c 	and.w	r2, r2, #12
 8001884:	2a04      	cmp	r2, #4
 8001886:	d007      	beq.n	8001898 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800188e:	2a08      	cmp	r2, #8
 8001890:	d10a      	bne.n	80018a8 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	0259      	lsls	r1, r3, #9
 8001896:	d507      	bpl.n	80018a8 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001898:	4b9f      	ldr	r3, [pc, #636]	; (8001b18 <HAL_RCC_OscConfig+0x2d4>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	039a      	lsls	r2, r3, #14
 800189e:	d5dc      	bpl.n	800185a <HAL_RCC_OscConfig+0x16>
 80018a0:	6863      	ldr	r3, [r4, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1d9      	bne.n	800185a <HAL_RCC_OscConfig+0x16>
 80018a6:	e7d1      	b.n	800184c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a8:	6863      	ldr	r3, [r4, #4]
 80018aa:	4d9b      	ldr	r5, [pc, #620]	; (8001b18 <HAL_RCC_OscConfig+0x2d4>)
 80018ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b0:	d111      	bne.n	80018d6 <HAL_RCC_OscConfig+0x92>
 80018b2:	682b      	ldr	r3, [r5, #0]
 80018b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80018ba:	f7ff f8cb 	bl	8000a54 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018be:	4d96      	ldr	r5, [pc, #600]	; (8001b18 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80018c0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c2:	682b      	ldr	r3, [r5, #0]
 80018c4:	039b      	lsls	r3, r3, #14
 80018c6:	d4c8      	bmi.n	800185a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018c8:	f7ff f8c4 	bl	8000a54 <HAL_GetTick>
 80018cc:	1b80      	subs	r0, r0, r6
 80018ce:	2864      	cmp	r0, #100	; 0x64
 80018d0:	d9f7      	bls.n	80018c2 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80018d2:	2003      	movs	r0, #3
 80018d4:	e7bb      	b.n	800184e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018da:	d104      	bne.n	80018e6 <HAL_RCC_OscConfig+0xa2>
 80018dc:	682b      	ldr	r3, [r5, #0]
 80018de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e2:	602b      	str	r3, [r5, #0]
 80018e4:	e7e5      	b.n	80018b2 <HAL_RCC_OscConfig+0x6e>
 80018e6:	682a      	ldr	r2, [r5, #0]
 80018e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80018ec:	602a      	str	r2, [r5, #0]
 80018ee:	682a      	ldr	r2, [r5, #0]
 80018f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018f4:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1df      	bne.n	80018ba <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80018fa:	f7ff f8ab 	bl	8000a54 <HAL_GetTick>
 80018fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001900:	682b      	ldr	r3, [r5, #0]
 8001902:	039f      	lsls	r7, r3, #14
 8001904:	d5a9      	bpl.n	800185a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001906:	f7ff f8a5 	bl	8000a54 <HAL_GetTick>
 800190a:	1b80      	subs	r0, r0, r6
 800190c:	2864      	cmp	r0, #100	; 0x64
 800190e:	d9f7      	bls.n	8001900 <HAL_RCC_OscConfig+0xbc>
 8001910:	e7df      	b.n	80018d2 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001912:	4b81      	ldr	r3, [pc, #516]	; (8001b18 <HAL_RCC_OscConfig+0x2d4>)
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	f012 0f0c 	tst.w	r2, #12
 800191a:	d007      	beq.n	800192c <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001922:	2a08      	cmp	r2, #8
 8001924:	d111      	bne.n	800194a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	025e      	lsls	r6, r3, #9
 800192a:	d40e      	bmi.n	800194a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192c:	4b7a      	ldr	r3, [pc, #488]	; (8001b18 <HAL_RCC_OscConfig+0x2d4>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	0795      	lsls	r5, r2, #30
 8001932:	d502      	bpl.n	800193a <HAL_RCC_OscConfig+0xf6>
 8001934:	68e2      	ldr	r2, [r4, #12]
 8001936:	2a01      	cmp	r2, #1
 8001938:	d188      	bne.n	800184c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	6921      	ldr	r1, [r4, #16]
 800193e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001942:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001946:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001948:	e78a      	b.n	8001860 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800194a:	68e2      	ldr	r2, [r4, #12]
 800194c:	4b73      	ldr	r3, [pc, #460]	; (8001b1c <HAL_RCC_OscConfig+0x2d8>)
 800194e:	b1b2      	cbz	r2, 800197e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001950:	2201      	movs	r2, #1
 8001952:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001954:	f7ff f87e 	bl	8000a54 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001958:	4d6f      	ldr	r5, [pc, #444]	; (8001b18 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800195a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195c:	682b      	ldr	r3, [r5, #0]
 800195e:	0798      	lsls	r0, r3, #30
 8001960:	d507      	bpl.n	8001972 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001962:	682b      	ldr	r3, [r5, #0]
 8001964:	6922      	ldr	r2, [r4, #16]
 8001966:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800196a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800196e:	602b      	str	r3, [r5, #0]
 8001970:	e776      	b.n	8001860 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001972:	f7ff f86f 	bl	8000a54 <HAL_GetTick>
 8001976:	1b80      	subs	r0, r0, r6
 8001978:	2802      	cmp	r0, #2
 800197a:	d9ef      	bls.n	800195c <HAL_RCC_OscConfig+0x118>
 800197c:	e7a9      	b.n	80018d2 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800197e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001980:	f7ff f868 	bl	8000a54 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001984:	4d64      	ldr	r5, [pc, #400]	; (8001b18 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001986:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001988:	682b      	ldr	r3, [r5, #0]
 800198a:	0799      	lsls	r1, r3, #30
 800198c:	f57f af68 	bpl.w	8001860 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001990:	f7ff f860 	bl	8000a54 <HAL_GetTick>
 8001994:	1b80      	subs	r0, r0, r6
 8001996:	2802      	cmp	r0, #2
 8001998:	d9f6      	bls.n	8001988 <HAL_RCC_OscConfig+0x144>
 800199a:	e79a      	b.n	80018d2 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800199c:	6962      	ldr	r2, [r4, #20]
 800199e:	4b60      	ldr	r3, [pc, #384]	; (8001b20 <HAL_RCC_OscConfig+0x2dc>)
 80019a0:	b17a      	cbz	r2, 80019c2 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80019a2:	2201      	movs	r2, #1
 80019a4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80019a6:	f7ff f855 	bl	8000a54 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019aa:	4d5b      	ldr	r5, [pc, #364]	; (8001b18 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80019ac:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ae:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80019b0:	079f      	lsls	r7, r3, #30
 80019b2:	f53f af59 	bmi.w	8001868 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019b6:	f7ff f84d 	bl	8000a54 <HAL_GetTick>
 80019ba:	1b80      	subs	r0, r0, r6
 80019bc:	2802      	cmp	r0, #2
 80019be:	d9f6      	bls.n	80019ae <HAL_RCC_OscConfig+0x16a>
 80019c0:	e787      	b.n	80018d2 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80019c2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80019c4:	f7ff f846 	bl	8000a54 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c8:	4d53      	ldr	r5, [pc, #332]	; (8001b18 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80019ca:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019cc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80019ce:	0798      	lsls	r0, r3, #30
 80019d0:	f57f af4a 	bpl.w	8001868 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019d4:	f7ff f83e 	bl	8000a54 <HAL_GetTick>
 80019d8:	1b80      	subs	r0, r0, r6
 80019da:	2802      	cmp	r0, #2
 80019dc:	d9f6      	bls.n	80019cc <HAL_RCC_OscConfig+0x188>
 80019de:	e778      	b.n	80018d2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e0:	4b4d      	ldr	r3, [pc, #308]	; (8001b18 <HAL_RCC_OscConfig+0x2d4>)
 80019e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019e4:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80019e8:	d128      	bne.n	8001a3c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ea:	9201      	str	r2, [sp, #4]
 80019ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019f2:	641a      	str	r2, [r3, #64]	; 0x40
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80019fe:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a00:	4d48      	ldr	r5, [pc, #288]	; (8001b24 <HAL_RCC_OscConfig+0x2e0>)
 8001a02:	682b      	ldr	r3, [r5, #0]
 8001a04:	05d9      	lsls	r1, r3, #23
 8001a06:	d51b      	bpl.n	8001a40 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a08:	68a3      	ldr	r3, [r4, #8]
 8001a0a:	4d43      	ldr	r5, [pc, #268]	; (8001b18 <HAL_RCC_OscConfig+0x2d4>)
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d127      	bne.n	8001a60 <HAL_RCC_OscConfig+0x21c>
 8001a10:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001a18:	f7ff f81c 	bl	8000a54 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a1c:	4d3e      	ldr	r5, [pc, #248]	; (8001b18 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001a1e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a20:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a24:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a26:	079b      	lsls	r3, r3, #30
 8001a28:	d539      	bpl.n	8001a9e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001a2a:	2e00      	cmp	r6, #0
 8001a2c:	f43f af20 	beq.w	8001870 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a30:	4a39      	ldr	r2, [pc, #228]	; (8001b18 <HAL_RCC_OscConfig+0x2d4>)
 8001a32:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a38:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3a:	e719      	b.n	8001870 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001a3c:	2600      	movs	r6, #0
 8001a3e:	e7df      	b.n	8001a00 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a40:	682b      	ldr	r3, [r5, #0]
 8001a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a46:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001a48:	f7ff f804 	bl	8000a54 <HAL_GetTick>
 8001a4c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4e:	682b      	ldr	r3, [r5, #0]
 8001a50:	05da      	lsls	r2, r3, #23
 8001a52:	d4d9      	bmi.n	8001a08 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a54:	f7fe fffe 	bl	8000a54 <HAL_GetTick>
 8001a58:	1bc0      	subs	r0, r0, r7
 8001a5a:	2802      	cmp	r0, #2
 8001a5c:	d9f7      	bls.n	8001a4e <HAL_RCC_OscConfig+0x20a>
 8001a5e:	e738      	b.n	80018d2 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a60:	2b05      	cmp	r3, #5
 8001a62:	d104      	bne.n	8001a6e <HAL_RCC_OscConfig+0x22a>
 8001a64:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a66:	f043 0304 	orr.w	r3, r3, #4
 8001a6a:	672b      	str	r3, [r5, #112]	; 0x70
 8001a6c:	e7d0      	b.n	8001a10 <HAL_RCC_OscConfig+0x1cc>
 8001a6e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001a70:	f022 0201 	bic.w	r2, r2, #1
 8001a74:	672a      	str	r2, [r5, #112]	; 0x70
 8001a76:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001a78:	f022 0204 	bic.w	r2, r2, #4
 8001a7c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1ca      	bne.n	8001a18 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001a82:	f7fe ffe7 	bl	8000a54 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a86:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001a8a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a8c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a8e:	0798      	lsls	r0, r3, #30
 8001a90:	d5cb      	bpl.n	8001a2a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a92:	f7fe ffdf 	bl	8000a54 <HAL_GetTick>
 8001a96:	1bc0      	subs	r0, r0, r7
 8001a98:	4540      	cmp	r0, r8
 8001a9a:	d9f7      	bls.n	8001a8c <HAL_RCC_OscConfig+0x248>
 8001a9c:	e719      	b.n	80018d2 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a9e:	f7fe ffd9 	bl	8000a54 <HAL_GetTick>
 8001aa2:	1bc0      	subs	r0, r0, r7
 8001aa4:	4540      	cmp	r0, r8
 8001aa6:	d9bd      	bls.n	8001a24 <HAL_RCC_OscConfig+0x1e0>
 8001aa8:	e713      	b.n	80018d2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aaa:	4d1b      	ldr	r5, [pc, #108]	; (8001b18 <HAL_RCC_OscConfig+0x2d4>)
 8001aac:	68ab      	ldr	r3, [r5, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	f43f aeca 	beq.w	800184c <HAL_RCC_OscConfig+0x8>
 8001ab8:	4e1b      	ldr	r6, [pc, #108]	; (8001b28 <HAL_RCC_OscConfig+0x2e4>)
 8001aba:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001abc:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001abe:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac0:	d134      	bne.n	8001b2c <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001ac2:	f7fe ffc7 	bl	8000a54 <HAL_GetTick>
 8001ac6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac8:	682b      	ldr	r3, [r5, #0]
 8001aca:	0199      	lsls	r1, r3, #6
 8001acc:	d41e      	bmi.n	8001b0c <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ace:	6a22      	ldr	r2, [r4, #32]
 8001ad0:	69e3      	ldr	r3, [r4, #28]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ad6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001ada:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001adc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001ae0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae2:	4c0d      	ldr	r4, [pc, #52]	; (8001b18 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ae4:	0852      	lsrs	r2, r2, #1
 8001ae6:	3a01      	subs	r2, #1
 8001ae8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001aec:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001aee:	2301      	movs	r3, #1
 8001af0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001af2:	f7fe ffaf 	bl	8000a54 <HAL_GetTick>
 8001af6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001af8:	6823      	ldr	r3, [r4, #0]
 8001afa:	019a      	lsls	r2, r3, #6
 8001afc:	f53f aebc 	bmi.w	8001878 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b00:	f7fe ffa8 	bl	8000a54 <HAL_GetTick>
 8001b04:	1b40      	subs	r0, r0, r5
 8001b06:	2802      	cmp	r0, #2
 8001b08:	d9f6      	bls.n	8001af8 <HAL_RCC_OscConfig+0x2b4>
 8001b0a:	e6e2      	b.n	80018d2 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b0c:	f7fe ffa2 	bl	8000a54 <HAL_GetTick>
 8001b10:	1bc0      	subs	r0, r0, r7
 8001b12:	2802      	cmp	r0, #2
 8001b14:	d9d8      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x284>
 8001b16:	e6dc      	b.n	80018d2 <HAL_RCC_OscConfig+0x8e>
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	42470000 	.word	0x42470000
 8001b20:	42470e80 	.word	0x42470e80
 8001b24:	40007000 	.word	0x40007000
 8001b28:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001b2c:	f7fe ff92 	bl	8000a54 <HAL_GetTick>
 8001b30:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b32:	682b      	ldr	r3, [r5, #0]
 8001b34:	019b      	lsls	r3, r3, #6
 8001b36:	f57f ae9f 	bpl.w	8001878 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3a:	f7fe ff8b 	bl	8000a54 <HAL_GetTick>
 8001b3e:	1b00      	subs	r0, r0, r4
 8001b40:	2802      	cmp	r0, #2
 8001b42:	d9f6      	bls.n	8001b32 <HAL_RCC_OscConfig+0x2ee>
 8001b44:	e6c5      	b.n	80018d2 <HAL_RCC_OscConfig+0x8e>
 8001b46:	bf00      	nop

08001b48 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b48:	4913      	ldr	r1, [pc, #76]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001b4a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b4c:	688b      	ldr	r3, [r1, #8]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d003      	beq.n	8001b5e <HAL_RCC_GetSysClockFreq+0x16>
 8001b56:	2b08      	cmp	r3, #8
 8001b58:	d003      	beq.n	8001b62 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b5a:	4810      	ldr	r0, [pc, #64]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001b5c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001b5e:	4810      	ldr	r0, [pc, #64]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x58>)
 8001b60:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b62:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b64:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b66:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b68:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b6c:	bf14      	ite	ne
 8001b6e:	480c      	ldrne	r0, [pc, #48]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b70:	480a      	ldreq	r0, [pc, #40]	; (8001b9c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b72:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001b76:	bf18      	it	ne
 8001b78:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b7a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b7e:	fba1 0100 	umull	r0, r1, r1, r0
 8001b82:	f7fe fb85 	bl	8000290 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b86:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x50>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001b8e:	3301      	adds	r3, #1
 8001b90:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001b92:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b96:	bd08      	pop	{r3, pc}
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	00f42400 	.word	0x00f42400
 8001ba0:	007a1200 	.word	0x007a1200

08001ba4 <HAL_RCC_ClockConfig>:
{
 8001ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ba8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001baa:	4604      	mov	r4, r0
 8001bac:	b910      	cbnz	r0, 8001bb4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001bae:	2001      	movs	r0, #1
 8001bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb4:	4b44      	ldr	r3, [pc, #272]	; (8001cc8 <HAL_RCC_ClockConfig+0x124>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	f002 020f 	and.w	r2, r2, #15
 8001bbc:	428a      	cmp	r2, r1
 8001bbe:	d328      	bcc.n	8001c12 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bc0:	6821      	ldr	r1, [r4, #0]
 8001bc2:	078f      	lsls	r7, r1, #30
 8001bc4:	d42d      	bmi.n	8001c22 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bc6:	07c8      	lsls	r0, r1, #31
 8001bc8:	d440      	bmi.n	8001c4c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bca:	4b3f      	ldr	r3, [pc, #252]	; (8001cc8 <HAL_RCC_ClockConfig+0x124>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	f002 020f 	and.w	r2, r2, #15
 8001bd2:	4295      	cmp	r5, r2
 8001bd4:	d366      	bcc.n	8001ca4 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd6:	6822      	ldr	r2, [r4, #0]
 8001bd8:	0751      	lsls	r1, r2, #29
 8001bda:	d46c      	bmi.n	8001cb6 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bdc:	0713      	lsls	r3, r2, #28
 8001bde:	d507      	bpl.n	8001bf0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001be0:	4a3a      	ldr	r2, [pc, #232]	; (8001ccc <HAL_RCC_ClockConfig+0x128>)
 8001be2:	6921      	ldr	r1, [r4, #16]
 8001be4:	6893      	ldr	r3, [r2, #8]
 8001be6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001bea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001bee:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bf0:	f7ff ffaa 	bl	8001b48 <HAL_RCC_GetSysClockFreq>
 8001bf4:	4b35      	ldr	r3, [pc, #212]	; (8001ccc <HAL_RCC_ClockConfig+0x128>)
 8001bf6:	4a36      	ldr	r2, [pc, #216]	; (8001cd0 <HAL_RCC_ClockConfig+0x12c>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001bfe:	5cd3      	ldrb	r3, [r2, r3]
 8001c00:	40d8      	lsrs	r0, r3
 8001c02:	4b34      	ldr	r3, [pc, #208]	; (8001cd4 <HAL_RCC_ClockConfig+0x130>)
 8001c04:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c06:	2000      	movs	r0, #0
 8001c08:	f7fe feda 	bl	80009c0 <HAL_InitTick>
  return HAL_OK;
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c12:	b2ca      	uxtb	r2, r1
 8001c14:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 030f 	and.w	r3, r3, #15
 8001c1c:	4299      	cmp	r1, r3
 8001c1e:	d1c6      	bne.n	8001bae <HAL_RCC_ClockConfig+0xa>
 8001c20:	e7ce      	b.n	8001bc0 <HAL_RCC_ClockConfig+0x1c>
 8001c22:	4b2a      	ldr	r3, [pc, #168]	; (8001ccc <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c24:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c28:	bf1e      	ittt	ne
 8001c2a:	689a      	ldrne	r2, [r3, #8]
 8001c2c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001c30:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c32:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c34:	bf42      	ittt	mi
 8001c36:	689a      	ldrmi	r2, [r3, #8]
 8001c38:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001c3c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	68a0      	ldr	r0, [r4, #8]
 8001c42:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001c46:	4302      	orrs	r2, r0
 8001c48:	609a      	str	r2, [r3, #8]
 8001c4a:	e7bc      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c4c:	6862      	ldr	r2, [r4, #4]
 8001c4e:	4b1f      	ldr	r3, [pc, #124]	; (8001ccc <HAL_RCC_ClockConfig+0x128>)
 8001c50:	2a01      	cmp	r2, #1
 8001c52:	d11d      	bne.n	8001c90 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5a:	d0a8      	beq.n	8001bae <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c5c:	4e1b      	ldr	r6, [pc, #108]	; (8001ccc <HAL_RCC_ClockConfig+0x128>)
 8001c5e:	68b3      	ldr	r3, [r6, #8]
 8001c60:	f023 0303 	bic.w	r3, r3, #3
 8001c64:	4313      	orrs	r3, r2
 8001c66:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001c68:	f7fe fef4 	bl	8000a54 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001c70:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c72:	68b3      	ldr	r3, [r6, #8]
 8001c74:	6862      	ldr	r2, [r4, #4]
 8001c76:	f003 030c 	and.w	r3, r3, #12
 8001c7a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001c7e:	d0a4      	beq.n	8001bca <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c80:	f7fe fee8 	bl	8000a54 <HAL_GetTick>
 8001c84:	1bc0      	subs	r0, r0, r7
 8001c86:	4540      	cmp	r0, r8
 8001c88:	d9f3      	bls.n	8001c72 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001c8a:	2003      	movs	r0, #3
}
 8001c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c90:	1e91      	subs	r1, r2, #2
 8001c92:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c94:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c96:	d802      	bhi.n	8001c9e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c98:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c9c:	e7dd      	b.n	8001c5a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c9e:	f013 0f02 	tst.w	r3, #2
 8001ca2:	e7da      	b.n	8001c5a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca4:	b2ea      	uxtb	r2, r5
 8001ca6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	429d      	cmp	r5, r3
 8001cb0:	f47f af7d 	bne.w	8001bae <HAL_RCC_ClockConfig+0xa>
 8001cb4:	e78f      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cb6:	4905      	ldr	r1, [pc, #20]	; (8001ccc <HAL_RCC_ClockConfig+0x128>)
 8001cb8:	68e0      	ldr	r0, [r4, #12]
 8001cba:	688b      	ldr	r3, [r1, #8]
 8001cbc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001cc0:	4303      	orrs	r3, r0
 8001cc2:	608b      	str	r3, [r1, #8]
 8001cc4:	e78a      	b.n	8001bdc <HAL_RCC_ClockConfig+0x38>
 8001cc6:	bf00      	nop
 8001cc8:	40023c00 	.word	0x40023c00
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	08004864 	.word	0x08004864
 8001cd4:	2000004c 	.word	0x2000004c

08001cd8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cd8:	4b04      	ldr	r3, [pc, #16]	; (8001cec <HAL_RCC_GetPCLK1Freq+0x14>)
 8001cda:	4a05      	ldr	r2, [pc, #20]	; (8001cf0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001ce2:	5cd3      	ldrb	r3, [r2, r3]
 8001ce4:	4a03      	ldr	r2, [pc, #12]	; (8001cf4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001ce6:	6810      	ldr	r0, [r2, #0]
}
 8001ce8:	40d8      	lsrs	r0, r3
 8001cea:	4770      	bx	lr
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	08004874 	.word	0x08004874
 8001cf4:	2000004c 	.word	0x2000004c

08001cf8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <HAL_RCC_GetPCLK2Freq+0x14>)
 8001cfa:	4a05      	ldr	r2, [pc, #20]	; (8001d10 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001d02:	5cd3      	ldrb	r3, [r2, r3]
 8001d04:	4a03      	ldr	r2, [pc, #12]	; (8001d14 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001d06:	6810      	ldr	r0, [r2, #0]
}
 8001d08:	40d8      	lsrs	r0, r3
 8001d0a:	4770      	bx	lr
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	08004874 	.word	0x08004874
 8001d14:	2000004c 	.word	0x2000004c

08001d18 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d18:	6803      	ldr	r3, [r0, #0]
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001d20:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d22:	695a      	ldr	r2, [r3, #20]
 8001d24:	f022 0201 	bic.w	r2, r2, #1
 8001d28:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d2a:	2320      	movs	r3, #32
 8001d2c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001d30:	4770      	bx	lr
	...

08001d34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d38:	6806      	ldr	r6, [r0, #0]
 8001d3a:	68c2      	ldr	r2, [r0, #12]
 8001d3c:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d3e:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d44:	4313      	orrs	r3, r2
 8001d46:	6133      	str	r3, [r6, #16]
{
 8001d48:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d4a:	6883      	ldr	r3, [r0, #8]
 8001d4c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001d4e:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d50:	4303      	orrs	r3, r0
 8001d52:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001d54:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d58:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8001d5a:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d5e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 8001d60:	4313      	orrs	r3, r2
 8001d62:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d64:	6973      	ldr	r3, [r6, #20]
 8001d66:	69a2      	ldr	r2, [r4, #24]
 8001d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d6c:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d6e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d72:	6173      	str	r3, [r6, #20]
 8001d74:	4b7a      	ldr	r3, [pc, #488]	; (8001f60 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d76:	d17c      	bne.n	8001e72 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d78:	429e      	cmp	r6, r3
 8001d7a:	d003      	beq.n	8001d84 <UART_SetConfig+0x50>
 8001d7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d80:	429e      	cmp	r6, r3
 8001d82:	d144      	bne.n	8001e0e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001d84:	f7ff ffb8 	bl	8001cf8 <HAL_RCC_GetPCLK2Freq>
 8001d88:	2519      	movs	r5, #25
 8001d8a:	fb05 f300 	mul.w	r3, r5, r0
 8001d8e:	6860      	ldr	r0, [r4, #4]
 8001d90:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001d94:	0040      	lsls	r0, r0, #1
 8001d96:	fbb3 f3f0 	udiv	r3, r3, r0
 8001d9a:	fbb3 f3f9 	udiv	r3, r3, r9
 8001d9e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001da2:	f7ff ffa9 	bl	8001cf8 <HAL_RCC_GetPCLK2Freq>
 8001da6:	6863      	ldr	r3, [r4, #4]
 8001da8:	4368      	muls	r0, r5
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fbb0 f7f3 	udiv	r7, r0, r3
 8001db0:	f7ff ffa2 	bl	8001cf8 <HAL_RCC_GetPCLK2Freq>
 8001db4:	6863      	ldr	r3, [r4, #4]
 8001db6:	4368      	muls	r0, r5
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dbe:	fbb3 f3f9 	udiv	r3, r3, r9
 8001dc2:	fb09 7313 	mls	r3, r9, r3, r7
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	3332      	adds	r3, #50	; 0x32
 8001dca:	fbb3 f3f9 	udiv	r3, r3, r9
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001dd4:	f7ff ff90 	bl	8001cf8 <HAL_RCC_GetPCLK2Freq>
 8001dd8:	6862      	ldr	r2, [r4, #4]
 8001dda:	4368      	muls	r0, r5
 8001ddc:	0052      	lsls	r2, r2, #1
 8001dde:	fbb0 faf2 	udiv	sl, r0, r2
 8001de2:	f7ff ff89 	bl	8001cf8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001de6:	6863      	ldr	r3, [r4, #4]
 8001de8:	4368      	muls	r0, r5
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	fbb0 f3f3 	udiv	r3, r0, r3
 8001df0:	fbb3 f3f9 	udiv	r3, r3, r9
 8001df4:	fb09 a313 	mls	r3, r9, r3, sl
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	3332      	adds	r3, #50	; 0x32
 8001dfc:	fbb3 f3f9 	udiv	r3, r3, r9
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001e06:	443b      	add	r3, r7
 8001e08:	60b3      	str	r3, [r6, #8]
 8001e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001e0e:	f7ff ff63 	bl	8001cd8 <HAL_RCC_GetPCLK1Freq>
 8001e12:	2519      	movs	r5, #25
 8001e14:	fb05 f300 	mul.w	r3, r5, r0
 8001e18:	6860      	ldr	r0, [r4, #4]
 8001e1a:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001e1e:	0040      	lsls	r0, r0, #1
 8001e20:	fbb3 f3f0 	udiv	r3, r3, r0
 8001e24:	fbb3 f3f9 	udiv	r3, r3, r9
 8001e28:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001e2c:	f7ff ff54 	bl	8001cd8 <HAL_RCC_GetPCLK1Freq>
 8001e30:	6863      	ldr	r3, [r4, #4]
 8001e32:	4368      	muls	r0, r5
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	fbb0 f7f3 	udiv	r7, r0, r3
 8001e3a:	f7ff ff4d 	bl	8001cd8 <HAL_RCC_GetPCLK1Freq>
 8001e3e:	6863      	ldr	r3, [r4, #4]
 8001e40:	4368      	muls	r0, r5
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e48:	fbb3 f3f9 	udiv	r3, r3, r9
 8001e4c:	fb09 7313 	mls	r3, r9, r3, r7
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	3332      	adds	r3, #50	; 0x32
 8001e54:	fbb3 f3f9 	udiv	r3, r3, r9
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001e5e:	f7ff ff3b 	bl	8001cd8 <HAL_RCC_GetPCLK1Freq>
 8001e62:	6862      	ldr	r2, [r4, #4]
 8001e64:	4368      	muls	r0, r5
 8001e66:	0052      	lsls	r2, r2, #1
 8001e68:	fbb0 faf2 	udiv	sl, r0, r2
 8001e6c:	f7ff ff34 	bl	8001cd8 <HAL_RCC_GetPCLK1Freq>
 8001e70:	e7b9      	b.n	8001de6 <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e72:	429e      	cmp	r6, r3
 8001e74:	d002      	beq.n	8001e7c <UART_SetConfig+0x148>
 8001e76:	4b3b      	ldr	r3, [pc, #236]	; (8001f64 <UART_SetConfig+0x230>)
 8001e78:	429e      	cmp	r6, r3
 8001e7a:	d140      	bne.n	8001efe <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001e7c:	f7ff ff3c 	bl	8001cf8 <HAL_RCC_GetPCLK2Freq>
 8001e80:	6867      	ldr	r7, [r4, #4]
 8001e82:	2519      	movs	r5, #25
 8001e84:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001e88:	fb05 f300 	mul.w	r3, r5, r0
 8001e8c:	00bf      	lsls	r7, r7, #2
 8001e8e:	fbb3 f3f7 	udiv	r3, r3, r7
 8001e92:	fbb3 f3f9 	udiv	r3, r3, r9
 8001e96:	011f      	lsls	r7, r3, #4
 8001e98:	f7ff ff2e 	bl	8001cf8 <HAL_RCC_GetPCLK2Freq>
 8001e9c:	6863      	ldr	r3, [r4, #4]
 8001e9e:	4368      	muls	r0, r5
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	fbb0 f8f3 	udiv	r8, r0, r3
 8001ea6:	f7ff ff27 	bl	8001cf8 <HAL_RCC_GetPCLK2Freq>
 8001eaa:	6863      	ldr	r3, [r4, #4]
 8001eac:	4368      	muls	r0, r5
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eb4:	fbb3 f3f9 	udiv	r3, r3, r9
 8001eb8:	fb09 8313 	mls	r3, r9, r3, r8
 8001ebc:	011b      	lsls	r3, r3, #4
 8001ebe:	3332      	adds	r3, #50	; 0x32
 8001ec0:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ec4:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001ec8:	f7ff ff16 	bl	8001cf8 <HAL_RCC_GetPCLK2Freq>
 8001ecc:	6862      	ldr	r2, [r4, #4]
 8001ece:	4368      	muls	r0, r5
 8001ed0:	0092      	lsls	r2, r2, #2
 8001ed2:	fbb0 faf2 	udiv	sl, r0, r2
 8001ed6:	f7ff ff0f 	bl	8001cf8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001eda:	6863      	ldr	r3, [r4, #4]
 8001edc:	4368      	muls	r0, r5
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ee4:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ee8:	fb09 a313 	mls	r3, r9, r3, sl
 8001eec:	011b      	lsls	r3, r3, #4
 8001eee:	3332      	adds	r3, #50	; 0x32
 8001ef0:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ef4:	f003 030f 	and.w	r3, r3, #15
 8001ef8:	ea43 0308 	orr.w	r3, r3, r8
 8001efc:	e783      	b.n	8001e06 <UART_SetConfig+0xd2>
 8001efe:	f7ff feeb 	bl	8001cd8 <HAL_RCC_GetPCLK1Freq>
 8001f02:	6867      	ldr	r7, [r4, #4]
 8001f04:	2519      	movs	r5, #25
 8001f06:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001f0a:	fb05 f300 	mul.w	r3, r5, r0
 8001f0e:	00bf      	lsls	r7, r7, #2
 8001f10:	fbb3 f3f7 	udiv	r3, r3, r7
 8001f14:	fbb3 f3f9 	udiv	r3, r3, r9
 8001f18:	011f      	lsls	r7, r3, #4
 8001f1a:	f7ff fedd 	bl	8001cd8 <HAL_RCC_GetPCLK1Freq>
 8001f1e:	6863      	ldr	r3, [r4, #4]
 8001f20:	4368      	muls	r0, r5
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	fbb0 f8f3 	udiv	r8, r0, r3
 8001f28:	f7ff fed6 	bl	8001cd8 <HAL_RCC_GetPCLK1Freq>
 8001f2c:	6863      	ldr	r3, [r4, #4]
 8001f2e:	4368      	muls	r0, r5
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f36:	fbb3 f3f9 	udiv	r3, r3, r9
 8001f3a:	fb09 8313 	mls	r3, r9, r3, r8
 8001f3e:	011b      	lsls	r3, r3, #4
 8001f40:	3332      	adds	r3, #50	; 0x32
 8001f42:	fbb3 f3f9 	udiv	r3, r3, r9
 8001f46:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001f4a:	f7ff fec5 	bl	8001cd8 <HAL_RCC_GetPCLK1Freq>
 8001f4e:	6862      	ldr	r2, [r4, #4]
 8001f50:	4368      	muls	r0, r5
 8001f52:	0092      	lsls	r2, r2, #2
 8001f54:	fbb0 faf2 	udiv	sl, r0, r2
 8001f58:	f7ff febe 	bl	8001cd8 <HAL_RCC_GetPCLK1Freq>
 8001f5c:	e7bd      	b.n	8001eda <UART_SetConfig+0x1a6>
 8001f5e:	bf00      	nop
 8001f60:	40011000 	.word	0x40011000
 8001f64:	40011400 	.word	0x40011400

08001f68 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f6a:	4604      	mov	r4, r0
 8001f6c:	460e      	mov	r6, r1
 8001f6e:	4617      	mov	r7, r2
 8001f70:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f72:	6821      	ldr	r1, [r4, #0]
 8001f74:	680b      	ldr	r3, [r1, #0]
 8001f76:	ea36 0303 	bics.w	r3, r6, r3
 8001f7a:	d101      	bne.n	8001f80 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001f7c:	2000      	movs	r0, #0
}
 8001f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001f80:	1c6b      	adds	r3, r5, #1
 8001f82:	d0f7      	beq.n	8001f74 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f84:	b995      	cbnz	r5, 8001fac <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f86:	6823      	ldr	r3, [r4, #0]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001f8e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f90:	695a      	ldr	r2, [r3, #20]
 8001f92:	f022 0201 	bic.w	r2, r2, #1
 8001f96:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001f98:	2320      	movs	r3, #32
 8001f9a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001f9e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001fa8:	2003      	movs	r0, #3
 8001faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001fac:	f7fe fd52 	bl	8000a54 <HAL_GetTick>
 8001fb0:	1bc0      	subs	r0, r0, r7
 8001fb2:	4285      	cmp	r5, r0
 8001fb4:	d2dd      	bcs.n	8001f72 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001fb6:	e7e6      	b.n	8001f86 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001fb8 <HAL_UART_Init>:
{
 8001fb8:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001fba:	4604      	mov	r4, r0
 8001fbc:	b340      	cbz	r0, 8002010 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001fbe:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001fc2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001fc6:	b91b      	cbnz	r3, 8001fd0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001fc8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001fcc:	f001 f9f0 	bl	80033b0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001fd0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001fd2:	2324      	movs	r3, #36	; 0x24
 8001fd4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001fd8:	68d3      	ldr	r3, [r2, #12]
 8001fda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001fde:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001fe0:	4620      	mov	r0, r4
 8001fe2:	f7ff fea7 	bl	8001d34 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fe6:	6823      	ldr	r3, [r4, #0]
 8001fe8:	691a      	ldr	r2, [r3, #16]
 8001fea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ff0:	695a      	ldr	r2, [r3, #20]
 8001ff2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ff6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ffe:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002000:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002002:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002004:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002006:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800200a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800200e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002010:	2001      	movs	r0, #1
}
 8002012:	bd10      	pop	{r4, pc}

08002014 <HAL_UART_Transmit>:
{
 8002014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002018:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800201a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800201e:	2b20      	cmp	r3, #32
{
 8002020:	4604      	mov	r4, r0
 8002022:	460d      	mov	r5, r1
 8002024:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002026:	d14f      	bne.n	80020c8 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8002028:	2900      	cmp	r1, #0
 800202a:	d04a      	beq.n	80020c2 <HAL_UART_Transmit+0xae>
 800202c:	2a00      	cmp	r2, #0
 800202e:	d048      	beq.n	80020c2 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8002030:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002034:	2b01      	cmp	r3, #1
 8002036:	d047      	beq.n	80020c8 <HAL_UART_Transmit+0xb4>
 8002038:	2301      	movs	r3, #1
 800203a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800203e:	2300      	movs	r3, #0
 8002040:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002042:	2321      	movs	r3, #33	; 0x21
 8002044:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002048:	f7fe fd04 	bl	8000a54 <HAL_GetTick>
    huart->TxXferSize = Size;
 800204c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8002050:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002052:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002056:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002058:	b29b      	uxth	r3, r3
 800205a:	b96b      	cbnz	r3, 8002078 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800205c:	463b      	mov	r3, r7
 800205e:	4632      	mov	r2, r6
 8002060:	2140      	movs	r1, #64	; 0x40
 8002062:	4620      	mov	r0, r4
 8002064:	f7ff ff80 	bl	8001f68 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002068:	b9b0      	cbnz	r0, 8002098 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 800206a:	2320      	movs	r3, #32
 800206c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002070:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8002074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002078:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800207a:	3b01      	subs	r3, #1
 800207c:	b29b      	uxth	r3, r3
 800207e:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002080:	68a3      	ldr	r3, [r4, #8]
 8002082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002086:	4632      	mov	r2, r6
 8002088:	463b      	mov	r3, r7
 800208a:	f04f 0180 	mov.w	r1, #128	; 0x80
 800208e:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002090:	d10e      	bne.n	80020b0 <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002092:	f7ff ff69 	bl	8001f68 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002096:	b110      	cbz	r0, 800209e <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8002098:	2003      	movs	r0, #3
 800209a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800209e:	882b      	ldrh	r3, [r5, #0]
 80020a0:	6822      	ldr	r2, [r4, #0]
 80020a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020a6:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80020a8:	6923      	ldr	r3, [r4, #16]
 80020aa:	b943      	cbnz	r3, 80020be <HAL_UART_Transmit+0xaa>
          pData += 2U;
 80020ac:	3502      	adds	r5, #2
 80020ae:	e7d2      	b.n	8002056 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020b0:	f7ff ff5a 	bl	8001f68 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80020b4:	2800      	cmp	r0, #0
 80020b6:	d1ef      	bne.n	8002098 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80020b8:	6823      	ldr	r3, [r4, #0]
 80020ba:	782a      	ldrb	r2, [r5, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	3501      	adds	r5, #1
 80020c0:	e7c9      	b.n	8002056 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80020c2:	2001      	movs	r0, #1
 80020c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80020c8:	2002      	movs	r0, #2
}
 80020ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080020ce <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80020ce:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80020d2:	2b20      	cmp	r3, #32
 80020d4:	d120      	bne.n	8002118 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 80020d6:	b1e9      	cbz	r1, 8002114 <HAL_UART_Receive_IT+0x46>
 80020d8:	b1e2      	cbz	r2, 8002114 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 80020da:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d01a      	beq.n	8002118 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 80020e2:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80020e4:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020e6:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80020e8:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020ea:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80020ec:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80020f0:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 80020f2:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80020f4:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 80020f6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80020fa:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80020fe:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002100:	6951      	ldr	r1, [r2, #20]
 8002102:	f041 0101 	orr.w	r1, r1, #1
 8002106:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002108:	68d1      	ldr	r1, [r2, #12]
 800210a:	f041 0120 	orr.w	r1, r1, #32
 800210e:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8002110:	4618      	mov	r0, r3
 8002112:	4770      	bx	lr
      return HAL_ERROR;
 8002114:	2001      	movs	r0, #1
 8002116:	4770      	bx	lr
    return HAL_BUSY;
 8002118:	2002      	movs	r0, #2
}
 800211a:	4770      	bx	lr

0800211c <HAL_UART_TxCpltCallback>:
 800211c:	4770      	bx	lr

0800211e <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800211e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002122:	2b22      	cmp	r3, #34	; 0x22
{
 8002124:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002126:	d136      	bne.n	8002196 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002128:	6883      	ldr	r3, [r0, #8]
 800212a:	6901      	ldr	r1, [r0, #16]
 800212c:	6802      	ldr	r2, [r0, #0]
 800212e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002132:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002134:	d123      	bne.n	800217e <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002136:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002138:	b9e9      	cbnz	r1, 8002176 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800213a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800213e:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8002142:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8002144:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8002146:	3c01      	subs	r4, #1
 8002148:	b2a4      	uxth	r4, r4
 800214a:	85c4      	strh	r4, [r0, #46]	; 0x2e
 800214c:	b98c      	cbnz	r4, 8002172 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800214e:	6803      	ldr	r3, [r0, #0]
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	f022 0220 	bic.w	r2, r2, #32
 8002156:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800215e:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002160:	695a      	ldr	r2, [r3, #20]
 8002162:	f022 0201 	bic.w	r2, r2, #1
 8002166:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002168:	2320      	movs	r3, #32
 800216a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800216e:	f000 ff19 	bl	8002fa4 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8002172:	2000      	movs	r0, #0
}
 8002174:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	f823 2b01 	strh.w	r2, [r3], #1
 800217c:	e7e1      	b.n	8002142 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 800217e:	b921      	cbnz	r1, 800218a <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002180:	1c59      	adds	r1, r3, #1
 8002182:	6852      	ldr	r2, [r2, #4]
 8002184:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002186:	701a      	strb	r2, [r3, #0]
 8002188:	e7dc      	b.n	8002144 <UART_Receive_IT+0x26>
 800218a:	6852      	ldr	r2, [r2, #4]
 800218c:	1c59      	adds	r1, r3, #1
 800218e:	6281      	str	r1, [r0, #40]	; 0x28
 8002190:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002194:	e7f7      	b.n	8002186 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8002196:	2002      	movs	r0, #2
 8002198:	bd10      	pop	{r4, pc}

0800219a <HAL_UART_ErrorCallback>:
 800219a:	4770      	bx	lr

0800219c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800219c:	6803      	ldr	r3, [r0, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021a0:	68d9      	ldr	r1, [r3, #12]
{
 80021a2:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80021a4:	0716      	lsls	r6, r2, #28
{
 80021a6:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021a8:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80021aa:	d107      	bne.n	80021bc <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021ac:	0696      	lsls	r6, r2, #26
 80021ae:	d55a      	bpl.n	8002266 <HAL_UART_IRQHandler+0xca>
 80021b0:	068d      	lsls	r5, r1, #26
 80021b2:	d558      	bpl.n	8002266 <HAL_UART_IRQHandler+0xca>
}
 80021b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80021b8:	f7ff bfb1 	b.w	800211e <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80021bc:	f015 0501 	ands.w	r5, r5, #1
 80021c0:	d102      	bne.n	80021c8 <HAL_UART_IRQHandler+0x2c>
 80021c2:	f411 7f90 	tst.w	r1, #288	; 0x120
 80021c6:	d04e      	beq.n	8002266 <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80021c8:	07d3      	lsls	r3, r2, #31
 80021ca:	d505      	bpl.n	80021d8 <HAL_UART_IRQHandler+0x3c>
 80021cc:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021ce:	bf42      	ittt	mi
 80021d0:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80021d2:	f043 0301 	orrmi.w	r3, r3, #1
 80021d6:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021d8:	0750      	lsls	r0, r2, #29
 80021da:	d504      	bpl.n	80021e6 <HAL_UART_IRQHandler+0x4a>
 80021dc:	b11d      	cbz	r5, 80021e6 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80021de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80021e0:	f043 0302 	orr.w	r3, r3, #2
 80021e4:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021e6:	0793      	lsls	r3, r2, #30
 80021e8:	d504      	bpl.n	80021f4 <HAL_UART_IRQHandler+0x58>
 80021ea:	b11d      	cbz	r5, 80021f4 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80021ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80021ee:	f043 0304 	orr.w	r3, r3, #4
 80021f2:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021f4:	0716      	lsls	r6, r2, #28
 80021f6:	d504      	bpl.n	8002202 <HAL_UART_IRQHandler+0x66>
 80021f8:	b11d      	cbz	r5, 8002202 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80021fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80021fc:	f043 0308 	orr.w	r3, r3, #8
 8002200:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002202:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002204:	2b00      	cmp	r3, #0
 8002206:	d066      	beq.n	80022d6 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002208:	0695      	lsls	r5, r2, #26
 800220a:	d504      	bpl.n	8002216 <HAL_UART_IRQHandler+0x7a>
 800220c:	0688      	lsls	r0, r1, #26
 800220e:	d502      	bpl.n	8002216 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8002210:	4620      	mov	r0, r4
 8002212:	f7ff ff84 	bl	800211e <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002216:	6823      	ldr	r3, [r4, #0]
 8002218:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800221a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800221c:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 800221e:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002220:	d402      	bmi.n	8002228 <HAL_UART_IRQHandler+0x8c>
 8002222:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002226:	d01a      	beq.n	800225e <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8002228:	f7ff fd76 	bl	8001d18 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800222c:	6823      	ldr	r3, [r4, #0]
 800222e:	695a      	ldr	r2, [r3, #20]
 8002230:	0652      	lsls	r2, r2, #25
 8002232:	d510      	bpl.n	8002256 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002234:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002236:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002238:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800223c:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800223e:	b150      	cbz	r0, 8002256 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002240:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <HAL_UART_IRQHandler+0x13c>)
 8002242:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002244:	f7fe fc8a 	bl	8000b5c <HAL_DMA_Abort_IT>
 8002248:	2800      	cmp	r0, #0
 800224a:	d044      	beq.n	80022d6 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800224c:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800224e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002252:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002254:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002256:	4620      	mov	r0, r4
 8002258:	f7ff ff9f 	bl	800219a <HAL_UART_ErrorCallback>
 800225c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800225e:	f7ff ff9c 	bl	800219a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002262:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002264:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002266:	0616      	lsls	r6, r2, #24
 8002268:	d527      	bpl.n	80022ba <HAL_UART_IRQHandler+0x11e>
 800226a:	060d      	lsls	r5, r1, #24
 800226c:	d525      	bpl.n	80022ba <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800226e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002272:	2a21      	cmp	r2, #33	; 0x21
 8002274:	d12f      	bne.n	80022d6 <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002276:	68a2      	ldr	r2, [r4, #8]
 8002278:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800227c:	6a22      	ldr	r2, [r4, #32]
 800227e:	d117      	bne.n	80022b0 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002280:	8811      	ldrh	r1, [r2, #0]
 8002282:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002286:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002288:	6921      	ldr	r1, [r4, #16]
 800228a:	b979      	cbnz	r1, 80022ac <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 800228c:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800228e:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8002290:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002292:	3a01      	subs	r2, #1
 8002294:	b292      	uxth	r2, r2
 8002296:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002298:	b9ea      	cbnz	r2, 80022d6 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022a0:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80022a2:	68da      	ldr	r2, [r3, #12]
 80022a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80022ac:	3201      	adds	r2, #1
 80022ae:	e7ee      	b.n	800228e <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80022b0:	1c51      	adds	r1, r2, #1
 80022b2:	6221      	str	r1, [r4, #32]
 80022b4:	7812      	ldrb	r2, [r2, #0]
 80022b6:	605a      	str	r2, [r3, #4]
 80022b8:	e7ea      	b.n	8002290 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80022ba:	0650      	lsls	r0, r2, #25
 80022bc:	d50b      	bpl.n	80022d6 <HAL_UART_IRQHandler+0x13a>
 80022be:	064a      	lsls	r2, r1, #25
 80022c0:	d509      	bpl.n	80022d6 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80022c2:	68da      	ldr	r2, [r3, #12]
 80022c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022c8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80022ca:	2320      	movs	r3, #32
 80022cc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80022d0:	4620      	mov	r0, r4
 80022d2:	f7ff ff23 	bl	800211c <HAL_UART_TxCpltCallback>
 80022d6:	bd70      	pop	{r4, r5, r6, pc}
 80022d8:	080022dd 	.word	0x080022dd

080022dc <UART_DMAAbortOnError>:
{
 80022dc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022de:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80022e4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80022e6:	f7ff ff58 	bl	800219a <HAL_UART_ErrorCallback>
 80022ea:	bd08      	pop	{r3, pc}

080022ec <getUriType>:

  return status;
}

char getUriType( char *protocol )
{
 80022ec:	b510      	push	{r4, lr}
  if( !memcmp( protocol, URI_ID_0x01_STRING, strlen(URI_ID_0x01_STRING) ) ) return URI_ID_0x01;
 80022ee:	220b      	movs	r2, #11
 80022f0:	49a8      	ldr	r1, [pc, #672]	; (8002594 <getUriType+0x2a8>)
{
 80022f2:	4604      	mov	r4, r0
  if( !memcmp( protocol, URI_ID_0x01_STRING, strlen(URI_ID_0x01_STRING) ) ) return URI_ID_0x01;
 80022f4:	f001 f920 	bl	8003538 <memcmp>
 80022f8:	2800      	cmp	r0, #0
 80022fa:	f000 8107 	beq.w	800250c <getUriType+0x220>
  else if( !memcmp( protocol, URI_ID_0x02_STRING, strlen(URI_ID_0x02_STRING) ) ) return URI_ID_0x02;
 80022fe:	220c      	movs	r2, #12
 8002300:	49a5      	ldr	r1, [pc, #660]	; (8002598 <getUriType+0x2ac>)
 8002302:	4620      	mov	r0, r4
 8002304:	f001 f918 	bl	8003538 <memcmp>
 8002308:	2800      	cmp	r0, #0
 800230a:	f000 8101 	beq.w	8002510 <getUriType+0x224>
  else if( !memcmp( protocol, URI_ID_0x03_STRING, strlen(URI_ID_0x03_STRING) ) ) return URI_ID_0x03;
 800230e:	2207      	movs	r2, #7
 8002310:	49a2      	ldr	r1, [pc, #648]	; (800259c <getUriType+0x2b0>)
 8002312:	4620      	mov	r0, r4
 8002314:	f001 f910 	bl	8003538 <memcmp>
 8002318:	2800      	cmp	r0, #0
 800231a:	f000 80fb 	beq.w	8002514 <getUriType+0x228>
  else if( !memcmp( protocol, URI_ID_0x04_STRING, strlen(URI_ID_0x04_STRING) ) ) return URI_ID_0x04;
 800231e:	2208      	movs	r2, #8
 8002320:	499f      	ldr	r1, [pc, #636]	; (80025a0 <getUriType+0x2b4>)
 8002322:	4620      	mov	r0, r4
 8002324:	f001 f908 	bl	8003538 <memcmp>
 8002328:	2800      	cmp	r0, #0
 800232a:	f000 80f5 	beq.w	8002518 <getUriType+0x22c>
  else if( !memcmp( protocol, URI_ID_0x05_STRING, strlen(URI_ID_0x05_STRING) ) ) return URI_ID_0x05;
 800232e:	2204      	movs	r2, #4
 8002330:	499c      	ldr	r1, [pc, #624]	; (80025a4 <getUriType+0x2b8>)
 8002332:	4620      	mov	r0, r4
 8002334:	f001 f900 	bl	8003538 <memcmp>
 8002338:	2800      	cmp	r0, #0
 800233a:	f000 80ef 	beq.w	800251c <getUriType+0x230>
  else if( !memcmp( protocol, URI_ID_0x06_STRING, strlen(URI_ID_0x06_STRING) ) ) return URI_ID_0x06;
 800233e:	2207      	movs	r2, #7
 8002340:	4999      	ldr	r1, [pc, #612]	; (80025a8 <getUriType+0x2bc>)
 8002342:	4620      	mov	r0, r4
 8002344:	f001 f8f8 	bl	8003538 <memcmp>
 8002348:	2800      	cmp	r0, #0
 800234a:	f000 80e9 	beq.w	8002520 <getUriType+0x234>
  else if( !memcmp( protocol, URI_ID_0x07_STRING, strlen(URI_ID_0x07_STRING) ) ) return URI_ID_0x07;
 800234e:	221a      	movs	r2, #26
 8002350:	4996      	ldr	r1, [pc, #600]	; (80025ac <getUriType+0x2c0>)
 8002352:	4620      	mov	r0, r4
 8002354:	f001 f8f0 	bl	8003538 <memcmp>
 8002358:	2800      	cmp	r0, #0
 800235a:	f000 80e3 	beq.w	8002524 <getUriType+0x238>
  else if( !memcmp( protocol, URI_ID_0x08_STRING, strlen(URI_ID_0x08_STRING) ) ) return URI_ID_0x08;
 800235e:	220a      	movs	r2, #10
 8002360:	4993      	ldr	r1, [pc, #588]	; (80025b0 <getUriType+0x2c4>)
 8002362:	4620      	mov	r0, r4
 8002364:	f001 f8e8 	bl	8003538 <memcmp>
 8002368:	2800      	cmp	r0, #0
 800236a:	f000 80dd 	beq.w	8002528 <getUriType+0x23c>
  else if( !memcmp( protocol, URI_ID_0x09_STRING, strlen(URI_ID_0x09_STRING) ) ) return URI_ID_0x09;
 800236e:	2207      	movs	r2, #7
 8002370:	4990      	ldr	r1, [pc, #576]	; (80025b4 <getUriType+0x2c8>)
 8002372:	4620      	mov	r0, r4
 8002374:	f001 f8e0 	bl	8003538 <memcmp>
 8002378:	2800      	cmp	r0, #0
 800237a:	f000 80d7 	beq.w	800252c <getUriType+0x240>
  else if( !memcmp( protocol, URI_ID_0x0A_STRING, strlen(URI_ID_0x0A_STRING) ) ) return URI_ID_0x0A;
 800237e:	2207      	movs	r2, #7
 8002380:	498d      	ldr	r1, [pc, #564]	; (80025b8 <getUriType+0x2cc>)
 8002382:	4620      	mov	r0, r4
 8002384:	f001 f8d8 	bl	8003538 <memcmp>
 8002388:	2800      	cmp	r0, #0
 800238a:	f000 80d1 	beq.w	8002530 <getUriType+0x244>
  else if( !memcmp( protocol, URI_ID_0x0B_STRING, strlen(URI_ID_0x0B_STRING) ) ) return URI_ID_0x0B;
 800238e:	2206      	movs	r2, #6
 8002390:	498a      	ldr	r1, [pc, #552]	; (80025bc <getUriType+0x2d0>)
 8002392:	4620      	mov	r0, r4
 8002394:	f001 f8d0 	bl	8003538 <memcmp>
 8002398:	2800      	cmp	r0, #0
 800239a:	f000 80cb 	beq.w	8002534 <getUriType+0x248>
  else if( !memcmp( protocol, URI_ID_0x0C_STRING, strlen(URI_ID_0x0C_STRING) ) ) return URI_ID_0x0C;
 800239e:	2206      	movs	r2, #6
 80023a0:	4987      	ldr	r1, [pc, #540]	; (80025c0 <getUriType+0x2d4>)
 80023a2:	4620      	mov	r0, r4
 80023a4:	f001 f8c8 	bl	8003538 <memcmp>
 80023a8:	2800      	cmp	r0, #0
 80023aa:	f000 80c5 	beq.w	8002538 <getUriType+0x24c>
  else if( !memcmp( protocol, URI_ID_0x0D_STRING, strlen(URI_ID_0x0D_STRING) ) ) return URI_ID_0x0D;
 80023ae:	2206      	movs	r2, #6
 80023b0:	4984      	ldr	r1, [pc, #528]	; (80025c4 <getUriType+0x2d8>)
 80023b2:	4620      	mov	r0, r4
 80023b4:	f001 f8c0 	bl	8003538 <memcmp>
 80023b8:	2800      	cmp	r0, #0
 80023ba:	f000 80bf 	beq.w	800253c <getUriType+0x250>
  else if( !memcmp( protocol, URI_ID_0x0E_STRING, strlen(URI_ID_0x0E_STRING) ) ) return URI_ID_0x0E;
 80023be:	2206      	movs	r2, #6
 80023c0:	4981      	ldr	r1, [pc, #516]	; (80025c8 <getUriType+0x2dc>)
 80023c2:	4620      	mov	r0, r4
 80023c4:	f001 f8b8 	bl	8003538 <memcmp>
 80023c8:	2800      	cmp	r0, #0
 80023ca:	f000 80b9 	beq.w	8002540 <getUriType+0x254>
  else if( !memcmp( protocol, URI_ID_0x0F_STRING, strlen(URI_ID_0x0F_STRING) ) ) return URI_ID_0x0F;
 80023ce:	2205      	movs	r2, #5
 80023d0:	497e      	ldr	r1, [pc, #504]	; (80025cc <getUriType+0x2e0>)
 80023d2:	4620      	mov	r0, r4
 80023d4:	f001 f8b0 	bl	8003538 <memcmp>
 80023d8:	2800      	cmp	r0, #0
 80023da:	f000 80b3 	beq.w	8002544 <getUriType+0x258>
  else if( !memcmp( protocol, URI_ID_0x10_STRING, strlen(URI_ID_0x10_STRING) ) ) return URI_ID_0x10;
 80023de:	2209      	movs	r2, #9
 80023e0:	497b      	ldr	r1, [pc, #492]	; (80025d0 <getUriType+0x2e4>)
 80023e2:	4620      	mov	r0, r4
 80023e4:	f001 f8a8 	bl	8003538 <memcmp>
 80023e8:	2800      	cmp	r0, #0
 80023ea:	f000 80ad 	beq.w	8002548 <getUriType+0x25c>
  else if( !memcmp( protocol, URI_ID_0x11_STRING, strlen(URI_ID_0x11_STRING) ) ) return URI_ID_0x11;
 80023ee:	2205      	movs	r2, #5
 80023f0:	4978      	ldr	r1, [pc, #480]	; (80025d4 <getUriType+0x2e8>)
 80023f2:	4620      	mov	r0, r4
 80023f4:	f001 f8a0 	bl	8003538 <memcmp>
 80023f8:	2800      	cmp	r0, #0
 80023fa:	f000 80a7 	beq.w	800254c <getUriType+0x260>
  else if( !memcmp( protocol, URI_ID_0x12_STRING, strlen(URI_ID_0x12_STRING) ) ) return URI_ID_0x12;
 80023fe:	2207      	movs	r2, #7
 8002400:	4975      	ldr	r1, [pc, #468]	; (80025d8 <getUriType+0x2ec>)
 8002402:	4620      	mov	r0, r4
 8002404:	f001 f898 	bl	8003538 <memcmp>
 8002408:	2800      	cmp	r0, #0
 800240a:	f000 80a1 	beq.w	8002550 <getUriType+0x264>
  else if( !memcmp( protocol, URI_ID_0x13_STRING, strlen(URI_ID_0x13_STRING) ) ) return URI_ID_0x13;
 800240e:	2204      	movs	r2, #4
 8002410:	4972      	ldr	r1, [pc, #456]	; (80025dc <getUriType+0x2f0>)
 8002412:	4620      	mov	r0, r4
 8002414:	f001 f890 	bl	8003538 <memcmp>
 8002418:	2800      	cmp	r0, #0
 800241a:	f000 809b 	beq.w	8002554 <getUriType+0x268>
  else if( !memcmp( protocol, URI_ID_0x14_STRING, strlen(URI_ID_0x14_STRING) ) ) return URI_ID_0x14;
 800241e:	2204      	movs	r2, #4
 8002420:	496f      	ldr	r1, [pc, #444]	; (80025e0 <getUriType+0x2f4>)
 8002422:	4620      	mov	r0, r4
 8002424:	f001 f888 	bl	8003538 <memcmp>
 8002428:	2800      	cmp	r0, #0
 800242a:	f000 8095 	beq.w	8002558 <getUriType+0x26c>
  else if( !memcmp( protocol, URI_ID_0x15_STRING, strlen(URI_ID_0x15_STRING) ) ) return URI_ID_0x15;
 800242e:	2204      	movs	r2, #4
 8002430:	496c      	ldr	r1, [pc, #432]	; (80025e4 <getUriType+0x2f8>)
 8002432:	4620      	mov	r0, r4
 8002434:	f001 f880 	bl	8003538 <memcmp>
 8002438:	2800      	cmp	r0, #0
 800243a:	f000 808f 	beq.w	800255c <getUriType+0x270>
  else if( !memcmp( protocol, URI_ID_0x16_STRING, strlen(URI_ID_0x16_STRING) ) ) return URI_ID_0x16;
 800243e:	2205      	movs	r2, #5
 8002440:	4969      	ldr	r1, [pc, #420]	; (80025e8 <getUriType+0x2fc>)
 8002442:	4620      	mov	r0, r4
 8002444:	f001 f878 	bl	8003538 <memcmp>
 8002448:	2800      	cmp	r0, #0
 800244a:	f000 8089 	beq.w	8002560 <getUriType+0x274>
  else if( !memcmp( protocol, URI_ID_0x17_STRING, strlen(URI_ID_0x17_STRING) ) ) return URI_ID_0x17;
 800244e:	2205      	movs	r2, #5
 8002450:	4966      	ldr	r1, [pc, #408]	; (80025ec <getUriType+0x300>)
 8002452:	4620      	mov	r0, r4
 8002454:	f001 f870 	bl	8003538 <memcmp>
 8002458:	2800      	cmp	r0, #0
 800245a:	f000 8083 	beq.w	8002564 <getUriType+0x278>
  else if( !memcmp( protocol, URI_ID_0x18_STRING, strlen(URI_ID_0x18_STRING) ) ) return URI_ID_0x18;
 800245e:	2208      	movs	r2, #8
 8002460:	4963      	ldr	r1, [pc, #396]	; (80025f0 <getUriType+0x304>)
 8002462:	4620      	mov	r0, r4
 8002464:	f001 f868 	bl	8003538 <memcmp>
 8002468:	2800      	cmp	r0, #0
 800246a:	d07d      	beq.n	8002568 <getUriType+0x27c>
  else if( !memcmp( protocol, URI_ID_0x19_STRING, strlen(URI_ID_0x19_STRING) ) ) return URI_ID_0x19;
 800246c:	220a      	movs	r2, #10
 800246e:	4961      	ldr	r1, [pc, #388]	; (80025f4 <getUriType+0x308>)
 8002470:	4620      	mov	r0, r4
 8002472:	f001 f861 	bl	8003538 <memcmp>
 8002476:	2800      	cmp	r0, #0
 8002478:	d078      	beq.n	800256c <getUriType+0x280>
  else if( !memcmp( protocol, URI_ID_0x1A_STRING, strlen(URI_ID_0x1A_STRING) ) ) return URI_ID_0x1A;
 800247a:	2209      	movs	r2, #9
 800247c:	495e      	ldr	r1, [pc, #376]	; (80025f8 <getUriType+0x30c>)
 800247e:	4620      	mov	r0, r4
 8002480:	f001 f85a 	bl	8003538 <memcmp>
 8002484:	2800      	cmp	r0, #0
 8002486:	d073      	beq.n	8002570 <getUriType+0x284>
  else if( !memcmp( protocol, URI_ID_0x1B_STRING, strlen(URI_ID_0x1B_STRING) ) ) return URI_ID_0x1B;
 8002488:	220a      	movs	r2, #10
 800248a:	495c      	ldr	r1, [pc, #368]	; (80025fc <getUriType+0x310>)
 800248c:	4620      	mov	r0, r4
 800248e:	f001 f853 	bl	8003538 <memcmp>
 8002492:	2800      	cmp	r0, #0
 8002494:	d06e      	beq.n	8002574 <getUriType+0x288>
  else if( !memcmp( protocol, URI_ID_0x1C_STRING, strlen(URI_ID_0x1C_STRING) ) ) return URI_ID_0x1C;
 8002496:	220b      	movs	r2, #11
 8002498:	4959      	ldr	r1, [pc, #356]	; (8002600 <getUriType+0x314>)
 800249a:	4620      	mov	r0, r4
 800249c:	f001 f84c 	bl	8003538 <memcmp>
 80024a0:	2800      	cmp	r0, #0
 80024a2:	d069      	beq.n	8002578 <getUriType+0x28c>
  else if( !memcmp( protocol, URI_ID_0x1D_STRING, strlen(URI_ID_0x1D_STRING) ) ) return URI_ID_0x1D;
 80024a4:	2207      	movs	r2, #7
 80024a6:	4957      	ldr	r1, [pc, #348]	; (8002604 <getUriType+0x318>)
 80024a8:	4620      	mov	r0, r4
 80024aa:	f001 f845 	bl	8003538 <memcmp>
 80024ae:	2800      	cmp	r0, #0
 80024b0:	d064      	beq.n	800257c <getUriType+0x290>
  else if( !memcmp( protocol, URI_ID_0x1E_STRING, strlen(URI_ID_0x1E_STRING) ) ) return URI_ID_0x1E;
 80024b2:	220b      	movs	r2, #11
 80024b4:	4954      	ldr	r1, [pc, #336]	; (8002608 <getUriType+0x31c>)
 80024b6:	4620      	mov	r0, r4
 80024b8:	f001 f83e 	bl	8003538 <memcmp>
 80024bc:	2800      	cmp	r0, #0
 80024be:	d05f      	beq.n	8002580 <getUriType+0x294>
  else if( !memcmp( protocol, URI_ID_0x1F_STRING, strlen(URI_ID_0x1F_STRING) ) ) return URI_ID_0x1F;
 80024c0:	220b      	movs	r2, #11
 80024c2:	4952      	ldr	r1, [pc, #328]	; (800260c <getUriType+0x320>)
 80024c4:	4620      	mov	r0, r4
 80024c6:	f001 f837 	bl	8003538 <memcmp>
 80024ca:	2800      	cmp	r0, #0
 80024cc:	d05a      	beq.n	8002584 <getUriType+0x298>
  else if( !memcmp( protocol, URI_ID_0x20_STRING, strlen(URI_ID_0x20_STRING) ) ) return URI_ID_0x20;
 80024ce:	220c      	movs	r2, #12
 80024d0:	494f      	ldr	r1, [pc, #316]	; (8002610 <getUriType+0x324>)
 80024d2:	4620      	mov	r0, r4
 80024d4:	f001 f830 	bl	8003538 <memcmp>
 80024d8:	2800      	cmp	r0, #0
 80024da:	d055      	beq.n	8002588 <getUriType+0x29c>
  else if( !memcmp( protocol, URI_ID_0x21_STRING, strlen(URI_ID_0x21_STRING) ) ) return URI_ID_0x21;
 80024dc:	220c      	movs	r2, #12
 80024de:	494d      	ldr	r1, [pc, #308]	; (8002614 <getUriType+0x328>)
 80024e0:	4620      	mov	r0, r4
 80024e2:	f001 f829 	bl	8003538 <memcmp>
 80024e6:	2800      	cmp	r0, #0
 80024e8:	d050      	beq.n	800258c <getUriType+0x2a0>
  else if( !memcmp( protocol, URI_ID_0x22_STRING, strlen(URI_ID_0x22_STRING) ) ) return URI_ID_0x22;
 80024ea:	2208      	movs	r2, #8
 80024ec:	494a      	ldr	r1, [pc, #296]	; (8002618 <getUriType+0x32c>)
 80024ee:	4620      	mov	r0, r4
 80024f0:	f001 f822 	bl	8003538 <memcmp>
 80024f4:	2800      	cmp	r0, #0
 80024f6:	d04b      	beq.n	8002590 <getUriType+0x2a4>
  else if( !memcmp( protocol, URI_ID_0x23_STRING, strlen(URI_ID_0x23_STRING) ) ) return URI_ID_0x23;
 80024f8:	2208      	movs	r2, #8
 80024fa:	4948      	ldr	r1, [pc, #288]	; (800261c <getUriType+0x330>)
 80024fc:	4620      	mov	r0, r4
 80024fe:	f001 f81b 	bl	8003538 <memcmp>
 8002502:	2800      	cmp	r0, #0
  else return URI_ID_0x00; // No abreviation for this protocol	
 8002504:	bf0c      	ite	eq
 8002506:	2023      	moveq	r0, #35	; 0x23
 8002508:	2000      	movne	r0, #0
 800250a:	bd10      	pop	{r4, pc}
  if( !memcmp( protocol, URI_ID_0x01_STRING, strlen(URI_ID_0x01_STRING) ) ) return URI_ID_0x01;
 800250c:	2001      	movs	r0, #1
 800250e:	bd10      	pop	{r4, pc}
  else if( !memcmp( protocol, URI_ID_0x02_STRING, strlen(URI_ID_0x02_STRING) ) ) return URI_ID_0x02;
 8002510:	2002      	movs	r0, #2
 8002512:	bd10      	pop	{r4, pc}
  else if( !memcmp( protocol, URI_ID_0x03_STRING, strlen(URI_ID_0x03_STRING) ) ) return URI_ID_0x03;
 8002514:	2003      	movs	r0, #3
 8002516:	bd10      	pop	{r4, pc}
  else if( !memcmp( protocol, URI_ID_0x04_STRING, strlen(URI_ID_0x04_STRING) ) ) return URI_ID_0x04;
 8002518:	2004      	movs	r0, #4
 800251a:	bd10      	pop	{r4, pc}
  else if( !memcmp( protocol, URI_ID_0x05_STRING, strlen(URI_ID_0x05_STRING) ) ) return URI_ID_0x05;
 800251c:	2005      	movs	r0, #5
 800251e:	bd10      	pop	{r4, pc}
  else if( !memcmp( protocol, URI_ID_0x06_STRING, strlen(URI_ID_0x06_STRING) ) ) return URI_ID_0x06;
 8002520:	2006      	movs	r0, #6
 8002522:	bd10      	pop	{r4, pc}
  else if( !memcmp( protocol, URI_ID_0x07_STRING, strlen(URI_ID_0x07_STRING) ) ) return URI_ID_0x07;
 8002524:	2007      	movs	r0, #7
 8002526:	bd10      	pop	{r4, pc}
  else if( !memcmp( protocol, URI_ID_0x08_STRING, strlen(URI_ID_0x08_STRING) ) ) return URI_ID_0x08;
 8002528:	2008      	movs	r0, #8
 800252a:	bd10      	pop	{r4, pc}
  else if( !memcmp( protocol, URI_ID_0x09_STRING, strlen(URI_ID_0x09_STRING) ) ) return URI_ID_0x09;
 800252c:	2009      	movs	r0, #9
 800252e:	bd10      	pop	{r4, pc}
  else if( !memcmp( protocol, URI_ID_0x0A_STRING, strlen(URI_ID_0x0A_STRING) ) ) return URI_ID_0x0A;
 8002530:	200a      	movs	r0, #10
 8002532:	bd10      	pop	{r4, pc}
  else if( !memcmp( protocol, URI_ID_0x0B_STRING, strlen(URI_ID_0x0B_STRING) ) ) return URI_ID_0x0B;
 8002534:	200b      	movs	r0, #11
 8002536:	bd10      	pop	{r4, pc}
  else if( !memcmp( protocol, URI_ID_0x0C_STRING, strlen(URI_ID_0x0C_STRING) ) ) return URI_ID_0x0C;
 8002538:	200c      	movs	r0, #12
 800253a:	bd10      	pop	{r4, pc}
  else if( !memcmp( protocol, URI_ID_0x0D_STRING, strlen(URI_ID_0x0D_STRING) ) ) return URI_ID_0x0D;
 800253c:	200d      	movs	r0, #13
 800253e:	bd10      	pop	{r4, pc}
  else if( !memcmp( protocol, URI_ID_0x0E_STRING, strlen(URI_ID_0x0E_STRING) ) ) return URI_ID_0x0E;
 8002540:	200e      	movs	r0, #14
 8002542:	bd10      	pop	{r4, pc}
  else if( !memcmp( protocol, URI_ID_0x0F_STRING, strlen(URI_ID_0x0F_STRING) ) ) return URI_ID_0x0F;
 8002544:	200f      	movs	r0, #15
 8002546:	bd10      	pop	{r4, pc}
  else if( !memcmp( protocol, URI_ID_0x10_STRING, strlen(URI_ID_0x10_STRING) ) ) return URI_ID_0x10;
 8002548:	2010      	movs	r0, #16
 800254a:	bd10      	pop	{r4, pc}
  else if( !memcmp( protocol, URI_ID_0x11_STRING, strlen(URI_ID_0x11_STRING) ) ) return URI_ID_0x11;
 800254c:	2011      	movs	r0, #17
 800254e:	bd10      	pop	{r4, pc}
  else if( !memcmp( protocol, URI_ID_0x12_STRING, strlen(URI_ID_0x12_STRING) ) ) return URI_ID_0x12;
 8002550:	2012      	movs	r0, #18
 8002552:	bd10      	pop	{r4, pc}
  else if( !memcmp( protocol, URI_ID_0x13_STRING, strlen(URI_ID_0x13_STRING) ) ) return URI_ID_0x13;
 8002554:	2013      	movs	r0, #19
 8002556:	bd10      	pop	{r4, pc}
  else if( !memcmp( protocol, URI_ID_0x14_STRING, strlen(URI_ID_0x14_STRING) ) ) return URI_ID_0x14;
 8002558:	2014      	movs	r0, #20
 800255a:	bd10      	pop	{r4, pc}
  else if( !memcmp( protocol, URI_ID_0x15_STRING, strlen(URI_ID_0x15_STRING) ) ) return URI_ID_0x15;
 800255c:	2015      	movs	r0, #21
 800255e:	bd10      	pop	{r4, pc}
  else if( !memcmp( protocol, URI_ID_0x16_STRING, strlen(URI_ID_0x16_STRING) ) ) return URI_ID_0x16;
 8002560:	2016      	movs	r0, #22
 8002562:	bd10      	pop	{r4, pc}
  else if( !memcmp( protocol, URI_ID_0x17_STRING, strlen(URI_ID_0x17_STRING) ) ) return URI_ID_0x17;
 8002564:	2017      	movs	r0, #23
 8002566:	bd10      	pop	{r4, pc}
  else if( !memcmp( protocol, URI_ID_0x18_STRING, strlen(URI_ID_0x18_STRING) ) ) return URI_ID_0x18;
 8002568:	2018      	movs	r0, #24
 800256a:	bd10      	pop	{r4, pc}
  else if( !memcmp( protocol, URI_ID_0x19_STRING, strlen(URI_ID_0x19_STRING) ) ) return URI_ID_0x19;
 800256c:	2019      	movs	r0, #25
 800256e:	bd10      	pop	{r4, pc}
  else if( !memcmp( protocol, URI_ID_0x1A_STRING, strlen(URI_ID_0x1A_STRING) ) ) return URI_ID_0x1A;
 8002570:	201a      	movs	r0, #26
 8002572:	bd10      	pop	{r4, pc}
  else if( !memcmp( protocol, URI_ID_0x1B_STRING, strlen(URI_ID_0x1B_STRING) ) ) return URI_ID_0x1B;
 8002574:	201b      	movs	r0, #27
 8002576:	bd10      	pop	{r4, pc}
  else if( !memcmp( protocol, URI_ID_0x1C_STRING, strlen(URI_ID_0x1C_STRING) ) ) return URI_ID_0x1C;
 8002578:	201c      	movs	r0, #28
 800257a:	bd10      	pop	{r4, pc}
  else if( !memcmp( protocol, URI_ID_0x1D_STRING, strlen(URI_ID_0x1D_STRING) ) ) return URI_ID_0x1D;
 800257c:	201d      	movs	r0, #29
 800257e:	bd10      	pop	{r4, pc}
  else if( !memcmp( protocol, URI_ID_0x1E_STRING, strlen(URI_ID_0x1E_STRING) ) ) return URI_ID_0x1E;
 8002580:	201e      	movs	r0, #30
 8002582:	bd10      	pop	{r4, pc}
  else if( !memcmp( protocol, URI_ID_0x1F_STRING, strlen(URI_ID_0x1F_STRING) ) ) return URI_ID_0x1F;
 8002584:	201f      	movs	r0, #31
 8002586:	bd10      	pop	{r4, pc}
  else if( !memcmp( protocol, URI_ID_0x20_STRING, strlen(URI_ID_0x20_STRING) ) ) return URI_ID_0x20;
 8002588:	2020      	movs	r0, #32
 800258a:	bd10      	pop	{r4, pc}
  else if( !memcmp( protocol, URI_ID_0x21_STRING, strlen(URI_ID_0x21_STRING) ) ) return URI_ID_0x21;
 800258c:	2021      	movs	r0, #33	; 0x21
 800258e:	bd10      	pop	{r4, pc}
  else if( !memcmp( protocol, URI_ID_0x22_STRING, strlen(URI_ID_0x22_STRING) ) ) return URI_ID_0x22;
 8002590:	2022      	movs	r0, #34	; 0x22
}
 8002592:	bd10      	pop	{r4, pc}
 8002594:	08004698 	.word	0x08004698
 8002598:	080046a5 	.word	0x080046a5
 800259c:	080046b3 	.word	0x080046b3
 80025a0:	080046bc 	.word	0x080046bc
 80025a4:	080046c6 	.word	0x080046c6
 80025a8:	080046cc 	.word	0x080046cc
 80025ac:	080046d5 	.word	0x080046d5
 80025b0:	080046f1 	.word	0x080046f1
 80025b4:	080046fd 	.word	0x080046fd
 80025b8:	08004706 	.word	0x08004706
 80025bc:	0800470f 	.word	0x0800470f
 80025c0:	08004717 	.word	0x08004717
 80025c4:	0800471f 	.word	0x0800471f
 80025c8:	08004727 	.word	0x08004727
 80025cc:	0800472f 	.word	0x0800472f
 80025d0:	08004736 	.word	0x08004736
 80025d4:	08004741 	.word	0x08004741
 80025d8:	08004748 	.word	0x08004748
 80025dc:	08004751 	.word	0x08004751
 80025e0:	08004757 	.word	0x08004757
 80025e4:	0800475d 	.word	0x0800475d
 80025e8:	08004763 	.word	0x08004763
 80025ec:	0800476a 	.word	0x0800476a
 80025f0:	08004771 	.word	0x08004771
 80025f4:	0800477b 	.word	0x0800477b
 80025f8:	08004787 	.word	0x08004787
 80025fc:	08004792 	.word	0x08004792
 8002600:	0800479e 	.word	0x0800479e
 8002604:	080047ab 	.word	0x080047ab
 8002608:	080047b4 	.word	0x080047b4
 800260c:	080047c1 	.word	0x080047c1
 8002610:	080047ce 	.word	0x080047ce
 8002614:	080047dc 	.word	0x080047dc
 8002618:	080047ea 	.word	0x080047ea
 800261c:	080047f4 	.word	0x080047f4

08002620 <NDEF_PrepareURIMessage>:
{
 8002620:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002624:	4606      	mov	r6, r0
 8002626:	460d      	mov	r5, r1
 8002628:	4690      	mov	r8, r2
  type = getUriType( pURI->protocol );
 800262a:	f7ff fe5f 	bl	80022ec <getUriType>
 800262e:	f106 0950 	add.w	r9, r6, #80	; 0x50
  if( type != URI_ID_0x00 )
 8002632:	4682      	mov	sl, r0
 8002634:	2800      	cmp	r0, #0
 8002636:	f000 809f 	beq.w	8002778 <NDEF_PrepareURIMessage+0x158>
    uriSize = 1 + strlen(pURI->URI_Message);
 800263a:	4648      	mov	r0, r9
 800263c:	f7fd fdd0 	bl	80001e0 <strlen>
 8002640:	f100 0b01 	add.w	fp, r0, #1
  if( pURI->Information[0] != '\0' )
 8002644:	f896 71e0 	ldrb.w	r7, [r6, #480]	; 0x1e0
 8002648:	2f00      	cmp	r7, #0
 800264a:	f000 80a6 	beq.w	800279a <NDEF_PrepareURIMessage+0x17a>
    infoSize = 1 + ISO_ENGLISH_CODE_STRING_LENGTH + strlen(pURI->Information);
 800264e:	f506 70f0 	add.w	r0, r6, #480	; 0x1e0
 8002652:	f7fd fdc5 	bl	80001e0 <strlen>
 8002656:	1cc7      	adds	r7, r0, #3
    totalSize = 4 + uriSize + 4 + infoSize;
 8002658:	eb0b 0307 	add.w	r3, fp, r7
    if( uriSize > 255 ) totalSize += 3;   /* Normal URI size */
 800265c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8002660:	bf8c      	ite	hi
 8002662:	330b      	addhi	r3, #11
    totalSize = 4 + uriSize + 4 + infoSize;
 8002664:	3308      	addls	r3, #8
    if( infoSize > 255 ) totalSize += 3;  /* Normal Info size */
 8002666:	2fff      	cmp	r7, #255	; 0xff
 8002668:	bf88      	it	hi
 800266a:	3303      	addhi	r3, #3
    if( totalSize > 255 )
 800266c:	2bff      	cmp	r3, #255	; 0xff
 800266e:	f04f 0202 	mov.w	r2, #2
 8002672:	f240 808c 	bls.w	800278e <NDEF_PrepareURIMessage+0x16e>
      pNDEFMessage[Offset++] = SMART_POSTER_TYPE_STRING_LENGTH;
 8002676:	706a      	strb	r2, [r5, #1]
      pNDEFMessage[Offset++] = (totalSize & 0xFF000000) >> 24;
 8002678:	0e1a      	lsrs	r2, r3, #24
 800267a:	70aa      	strb	r2, [r5, #2]
      pNDEFMessage[Offset++] = (totalSize & 0x00FF0000) >> 16;
 800267c:	0c1a      	lsrs	r2, r3, #16
      pNDEFMessage[Offset++] = 0xC1;
 800267e:	21c1      	movs	r1, #193	; 0xc1
      pNDEFMessage[Offset++] = (totalSize & 0x00FF0000) >> 16;
 8002680:	70ea      	strb	r2, [r5, #3]
      pNDEFMessage[Offset++] = (totalSize & 0x0000FF00) >> 8;
 8002682:	0a1a      	lsrs	r2, r3, #8
      pNDEFMessage[Offset++] = 0xC1;
 8002684:	7029      	strb	r1, [r5, #0]
      pNDEFMessage[Offset++] = (totalSize & 0x0000FF00) >> 8;
 8002686:	712a      	strb	r2, [r5, #4]
      pNDEFMessage[Offset++] = totalSize & 0x000000FF;
 8002688:	716b      	strb	r3, [r5, #5]
 800268a:	2406      	movs	r4, #6
    memcpy( &pNDEFMessage[Offset], SMART_POSTER_TYPE_STRING, SMART_POSTER_TYPE_STRING_LENGTH );
 800268c:	4b49      	ldr	r3, [pc, #292]	; (80027b4 <NDEF_PrepareURIMessage+0x194>)
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	532b      	strh	r3, [r5, r4]
    Offset += SMART_POSTER_TYPE_STRING_LENGTH;
 8002692:	3402      	adds	r4, #2
  if( uriSize < 256 ) pNDEFMessage[Offset] |= 0x10;                      // Set the SR bit
 8002694:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
  pNDEFMessage[Offset] = 0x81;
 8002698:	eb05 0204 	add.w	r2, r5, r4
  if( uriSize < 256 ) pNDEFMessage[Offset] |= 0x10;                      // Set the SR bit
 800269c:	bf8c      	ite	hi
 800269e:	2381      	movhi	r3, #129	; 0x81
 80026a0:	2391      	movls	r3, #145	; 0x91
 80026a2:	7013      	strb	r3, [r2, #0]
  if( pURI->Information[0] == '\0' ) pNDEFMessage[Offset] |= 0x40;       // Set the ME bit
 80026a4:	f896 11e0 	ldrb.w	r1, [r6, #480]	; 0x1e0
 80026a8:	b911      	cbnz	r1, 80026b0 <NDEF_PrepareURIMessage+0x90>
 80026aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026ae:	7013      	strb	r3, [r2, #0]
  pNDEFMessage[Offset++] = URI_TYPE_STRING_LENGTH;
 80026b0:	2101      	movs	r1, #1
  if( uriSize > 255 )
 80026b2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
  pNDEFMessage[Offset++] = URI_TYPE_STRING_LENGTH;
 80026b6:	f104 0302 	add.w	r3, r4, #2
 80026ba:	7051      	strb	r1, [r2, #1]
  if( uriSize > 255 )
 80026bc:	d96f      	bls.n	800279e <NDEF_PrepareURIMessage+0x17e>
    pNDEFMessage[Offset++] = (uriSize & 0xFF000000) >> 24;
 80026be:	ea4f 611b 	mov.w	r1, fp, lsr #24
 80026c2:	54e9      	strb	r1, [r5, r3]
    pNDEFMessage[Offset++] = (uriSize & 0x00FF0000) >> 16;
 80026c4:	ea4f 431b 	mov.w	r3, fp, lsr #16
 80026c8:	70d3      	strb	r3, [r2, #3]
    pNDEFMessage[Offset++] = (uriSize & 0x0000FF00) >> 8;
 80026ca:	ea4f 231b 	mov.w	r3, fp, lsr #8
 80026ce:	7113      	strb	r3, [r2, #4]
    pNDEFMessage[Offset++] = uriSize & 0x000000FF;
 80026d0:	3406      	adds	r4, #6
 80026d2:	f882 b005 	strb.w	fp, [r2, #5]
  memcpy( &pNDEFMessage[Offset], URI_TYPE_STRING, URI_TYPE_STRING_LENGTH );
 80026d6:	192b      	adds	r3, r5, r4
 80026d8:	2255      	movs	r2, #85	; 0x55
 80026da:	552a      	strb	r2, [r5, r4]
  pNDEFMessage[Offset++] = type;
 80026dc:	3402      	adds	r4, #2
 80026de:	f883 a001 	strb.w	sl, [r3, #1]
  if( type == URI_ID_0x00 ) // No abreviation
 80026e2:	f1ba 0f00 	cmp.w	sl, #0
 80026e6:	d10b      	bne.n	8002700 <NDEF_PrepareURIMessage+0xe0>
    memcpy( &pNDEFMessage[Offset], pURI->protocol, strlen(pURI->protocol) );
 80026e8:	4630      	mov	r0, r6
 80026ea:	f7fd fd79 	bl	80001e0 <strlen>
 80026ee:	4631      	mov	r1, r6
 80026f0:	4602      	mov	r2, r0
 80026f2:	1928      	adds	r0, r5, r4
 80026f4:	f000 ff2f 	bl	8003556 <memcpy>
    Offset += strlen(pURI->protocol);
 80026f8:	4630      	mov	r0, r6
 80026fa:	f7fd fd71 	bl	80001e0 <strlen>
 80026fe:	4404      	add	r4, r0
  memcpy( &pNDEFMessage[Offset], pURI->URI_Message, strlen(pURI->URI_Message) );
 8002700:	4648      	mov	r0, r9
 8002702:	f7fd fd6d 	bl	80001e0 <strlen>
 8002706:	4649      	mov	r1, r9
 8002708:	4602      	mov	r2, r0
 800270a:	1928      	adds	r0, r5, r4
 800270c:	f000 ff23 	bl	8003556 <memcpy>
  Offset += strlen(pURI->URI_Message);
 8002710:	4648      	mov	r0, r9
 8002712:	f7fd fd65 	bl	80001e0 <strlen>
  if( pURI->Information[0] != '\0' )
 8002716:	f896 31e0 	ldrb.w	r3, [r6, #480]	; 0x1e0
  Offset += strlen(pURI->URI_Message);
 800271a:	4420      	add	r0, r4
  if( pURI->Information[0] != '\0' )
 800271c:	b343      	cbz	r3, 8002770 <NDEF_PrepareURIMessage+0x150>
    if( infoSize > 255 )
 800271e:	2fff      	cmp	r7, #255	; 0xff
 8002720:	f04f 0201 	mov.w	r2, #1
 8002724:	eb05 0300 	add.w	r3, r5, r0
 8002728:	d93d      	bls.n	80027a6 <NDEF_PrepareURIMessage+0x186>
      pNDEFMessage[Offset++] = 0x41;
 800272a:	2141      	movs	r1, #65	; 0x41
 800272c:	5429      	strb	r1, [r5, r0]
      pNDEFMessage[Offset++] = TEXT_TYPE_STRING_LENGTH;
 800272e:	705a      	strb	r2, [r3, #1]
      pNDEFMessage[Offset++] = (infoSize & 0xFF000000) >> 24;
 8002730:	0e3a      	lsrs	r2, r7, #24
 8002732:	709a      	strb	r2, [r3, #2]
      pNDEFMessage[Offset++] = (infoSize & 0x00FF0000) >> 16;
 8002734:	0c3a      	lsrs	r2, r7, #16
 8002736:	70da      	strb	r2, [r3, #3]
      pNDEFMessage[Offset++] = (infoSize & 0x0000FF00) >> 8;
 8002738:	0a3a      	lsrs	r2, r7, #8
 800273a:	711a      	strb	r2, [r3, #4]
      pNDEFMessage[Offset++] = infoSize & 0x000000FF;
 800273c:	3006      	adds	r0, #6
 800273e:	715f      	strb	r7, [r3, #5]
    memcpy( &pNDEFMessage[Offset], TEXT_TYPE_STRING, TEXT_TYPE_STRING_LENGTH );
 8002740:	182b      	adds	r3, r5, r0
 8002742:	2254      	movs	r2, #84	; 0x54
 8002744:	542a      	strb	r2, [r5, r0]
    pNDEFMessage[Offset++] = ISO_ENGLISH_CODE_STRING_LENGTH; /* UTF-8 with x byte language code */
 8002746:	2202      	movs	r2, #2
 8002748:	705a      	strb	r2, [r3, #1]
 800274a:	1883      	adds	r3, r0, r2
    memcpy( &pNDEFMessage[Offset], ISO_ENGLISH_CODE_STRING, ISO_ENGLISH_CODE_STRING_LENGTH );
 800274c:	4a1a      	ldr	r2, [pc, #104]	; (80027b8 <NDEF_PrepareURIMessage+0x198>)
    memcpy( &pNDEFMessage[Offset], pURI->Information, strlen(pURI->Information) );
 800274e:	f506 76f0 	add.w	r6, r6, #480	; 0x1e0
    memcpy( &pNDEFMessage[Offset], ISO_ENGLISH_CODE_STRING, ISO_ENGLISH_CODE_STRING_LENGTH );
 8002752:	8812      	ldrh	r2, [r2, #0]
 8002754:	52ea      	strh	r2, [r5, r3]
    Offset += ISO_ENGLISH_CODE_STRING_LENGTH;
 8002756:	1d04      	adds	r4, r0, #4
    memcpy( &pNDEFMessage[Offset], pURI->Information, strlen(pURI->Information) );
 8002758:	4630      	mov	r0, r6
 800275a:	f7fd fd41 	bl	80001e0 <strlen>
 800275e:	4631      	mov	r1, r6
 8002760:	4602      	mov	r2, r0
 8002762:	1928      	adds	r0, r5, r4
 8002764:	f000 fef7 	bl	8003556 <memcpy>
    Offset += strlen(pURI->Information);
 8002768:	4630      	mov	r0, r6
 800276a:	f7fd fd39 	bl	80001e0 <strlen>
 800276e:	4420      	add	r0, r4
  *size = Offset;
 8002770:	f8a8 0000 	strh.w	r0, [r8]
 8002774:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uriSize = 1 + strlen(pURI->protocol) + strlen(pURI->URI_Message);
 8002778:	4630      	mov	r0, r6
 800277a:	f7fd fd31 	bl	80001e0 <strlen>
 800277e:	4683      	mov	fp, r0
 8002780:	4648      	mov	r0, r9
 8002782:	f7fd fd2d 	bl	80001e0 <strlen>
 8002786:	4483      	add	fp, r0
 8002788:	f10b 0b01 	add.w	fp, fp, #1
 800278c:	e75a      	b.n	8002644 <NDEF_PrepareURIMessage+0x24>
      pNDEFMessage[Offset++] = 0xD1;
 800278e:	21d1      	movs	r1, #209	; 0xd1
 8002790:	7029      	strb	r1, [r5, #0]
      pNDEFMessage[Offset++] = SMART_POSTER_TYPE_STRING_LENGTH;
 8002792:	706a      	strb	r2, [r5, #1]
      pNDEFMessage[Offset++] = (uint8_t)totalSize;
 8002794:	70ab      	strb	r3, [r5, #2]
 8002796:	2403      	movs	r4, #3
 8002798:	e778      	b.n	800268c <NDEF_PrepareURIMessage+0x6c>
  uint32_t uriSize, totalSize, Offset = 0;
 800279a:	463c      	mov	r4, r7
 800279c:	e77a      	b.n	8002694 <NDEF_PrepareURIMessage+0x74>
    pNDEFMessage[Offset++] = (uint8_t)uriSize;
 800279e:	3403      	adds	r4, #3
 80027a0:	f805 b003 	strb.w	fp, [r5, r3]
 80027a4:	e797      	b.n	80026d6 <NDEF_PrepareURIMessage+0xb6>
      pNDEFMessage[Offset++] = 0x51;
 80027a6:	2151      	movs	r1, #81	; 0x51
 80027a8:	5429      	strb	r1, [r5, r0]
      pNDEFMessage[Offset++] = TEXT_TYPE_STRING_LENGTH;
 80027aa:	705a      	strb	r2, [r3, #1]
      pNDEFMessage[Offset++] = (uint8_t)infoSize;
 80027ac:	3003      	adds	r0, #3
 80027ae:	709f      	strb	r7, [r3, #2]
 80027b0:	e7c6      	b.n	8002740 <NDEF_PrepareURIMessage+0x120>
 80027b2:	bf00      	nop
 80027b4:	08004822 	.word	0x08004822
 80027b8:	08004825 	.word	0x08004825

080027bc <NDEF_WriteURI>:
{
 80027bc:	b513      	push	{r0, r1, r4, lr}
  NDEF_PrepareURIMessage( pURI, NDEF_Buffer, &Offset );
 80027be:	4c07      	ldr	r4, [pc, #28]	; (80027dc <NDEF_WriteURI+0x20>)
  uint16_t status = NDEF_ERROR, Offset = 0;
 80027c0:	aa02      	add	r2, sp, #8
 80027c2:	2300      	movs	r3, #0
 80027c4:	f822 3d02 	strh.w	r3, [r2, #-2]!
  NDEF_PrepareURIMessage( pURI, NDEF_Buffer, &Offset );
 80027c8:	4621      	mov	r1, r4
 80027ca:	f7ff ff29 	bl	8002620 <NDEF_PrepareURIMessage>
  status = NfcTag_WriteNDEF( Offset , NDEF_Buffer );
 80027ce:	4621      	mov	r1, r4
 80027d0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80027d4:	f000 f81a 	bl	800280c <NfcTag_WriteNDEF>
}
 80027d8:	b002      	add	sp, #8
 80027da:	bd10      	pop	{r4, pc}
 80027dc:	200011f0 	.word	0x200011f0

080027e0 <NfcTag_SelectProtocol>:

static NFCTAG_Protocol_Id_t CurrentProtocol = NFCTAG_NOTSET;

uint16_t NfcTag_SelectProtocol(NFCTAG_Protocol_Id_t protocol)
{
  if(protocol >= NFCTAG_NOTSET)
 80027e0:	2804      	cmp	r0, #4
 80027e2:	d80c      	bhi.n	80027fe <NfcTag_SelectProtocol+0x1e>
 80027e4:	4b07      	ldr	r3, [pc, #28]	; (8002804 <NfcTag_SelectProtocol+0x24>)
    return NDEF_ERROR;

  if(protocol == NFCTAG_TYPE1)
 80027e6:	d105      	bne.n	80027f4 <NfcTag_SelectProtocol+0x14>
    ccFileOffset = 10;
 80027e8:	220a      	movs	r2, #10
  else if (protocol == NFCTAG_TYPE2)
    ccFileOffset = 12;
  else
    ccFileOffset = 0;
 80027ea:	801a      	strh	r2, [r3, #0]

  CurrentProtocol = protocol;
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <NfcTag_SelectProtocol+0x28>)
 80027ee:	7018      	strb	r0, [r3, #0]
  return NDEF_OK;
 80027f0:	2000      	movs	r0, #0
 80027f2:	4770      	bx	lr
  else if (protocol == NFCTAG_TYPE2)
 80027f4:	2803      	cmp	r0, #3
    ccFileOffset = 12;
 80027f6:	bf0c      	ite	eq
 80027f8:	220c      	moveq	r2, #12
    ccFileOffset = 0;
 80027fa:	2200      	movne	r2, #0
 80027fc:	e7f5      	b.n	80027ea <NfcTag_SelectProtocol+0xa>
    return NDEF_ERROR;
 80027fe:	2001      	movs	r0, #1
}
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	20000278 	.word	0x20000278
 8002808:	20000048 	.word	0x20000048

0800280c <NfcTag_WriteNDEF>:


uint16_t NfcTag_WriteNDEF(uint16_t Length , uint8_t *pData )
{
  uint16_t status = NDEF_ERROR;
  switch (CurrentProtocol)
 800280c:	4b08      	ldr	r3, [pc, #32]	; (8002830 <NfcTag_WriteNDEF+0x24>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b04      	cmp	r3, #4
 8002812:	d80a      	bhi.n	800282a <NfcTag_WriteNDEF+0x1e>
 8002814:	e8df f003 	tbb	[pc, r3]
 8002818:	07050307 	.word	0x07050307
 800281c:	07          	.byte	0x07
 800281d:	00          	.byte	0x00
  {
    case NFCTAG_TYPE4:
      status = NfcType4_WriteNDEF(Length, pData);
 800281e:	f000 b82b 	b.w	8002878 <NfcType4_WriteNDEF>
    break;
    case NFCTAG_TYPE3:
      status = NfcType3_WriteNDEF(Length,pData);
 8002822:	f000 b807 	b.w	8002834 <NfcType3_WriteNDEF>
    break;
    case NFCTAG_TYPE5:
    case NFCTAG_TYPE2:
    case NFCTAG_TYPE1:
      status = NfcType5_WriteNDEF(Length, pData);
 8002826:	f000 b961 	b.w	8002aec <NfcType5_WriteNDEF>
    default:
      status = NDEF_ERROR;
    break;
  }
  return status;
}
 800282a:	2001      	movs	r0, #1
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	20000048 	.word	0x20000048

08002834 <NfcType3_WriteNDEF>:
  return NDEF_OK;

}

uint16_t NfcType3_WriteNDEF(uint16_t Length, uint8_t* pData )
{
 8002834:	b538      	push	{r3, r4, r5, lr}
 8002836:	4605      	mov	r5, r0
  uint8_t err = NDEF_Wrapper_WriteData(pData,16,Length);
 8002838:	462a      	mov	r2, r5
{
 800283a:	4608      	mov	r0, r1
  uint8_t err = NDEF_Wrapper_WriteData(pData,16,Length);
 800283c:	2110      	movs	r1, #16
 800283e:	f000 fac6 	bl	8002dce <NDEF_Wrapper_WriteData>
  if(err != NDEF_OK)
 8002842:	b2c1      	uxtb	r1, r0
 8002844:	b109      	cbz	r1, 800284a <NfcType3_WriteNDEF+0x16>
  {
    return NDEF_ERROR;
 8002846:	2001      	movs	r0, #1
 8002848:	bd38      	pop	{r3, r4, r5, pc}
  }

  err = NDEF_Wrapper_ReadData((uint8_t *)&NDEF_Attr_Info,0,16);
 800284a:	4c0a      	ldr	r4, [pc, #40]	; (8002874 <NfcType3_WriteNDEF+0x40>)
 800284c:	2210      	movs	r2, #16
 800284e:	4620      	mov	r0, r4
 8002850:	f000 fab2 	bl	8002db8 <NDEF_Wrapper_ReadData>
  if(err != NDEF_OK)
 8002854:	b2c1      	uxtb	r1, r0
 8002856:	2900      	cmp	r1, #0
 8002858:	d1f5      	bne.n	8002846 <NfcType3_WriteNDEF+0x12>
  {
    return NDEF_ERROR;
  }
  // update the length field
  NDEF_Attr_Info.Ln[0] = (Length >> 16) & 0xFF;
  NDEF_Attr_Info.Ln[1] = (Length >> 8) & 0xFF;
 800285a:	0a2b      	lsrs	r3, r5, #8
  NDEF_Attr_Info.Ln[2] = Length & 0xFF;
  err = NDEF_Wrapper_WriteData((uint8_t *)&NDEF_Attr_Info,0,16);
 800285c:	2210      	movs	r2, #16
 800285e:	4620      	mov	r0, r4
  NDEF_Attr_Info.Ln[0] = (Length >> 16) & 0xFF;
 8002860:	72e1      	strb	r1, [r4, #11]
  NDEF_Attr_Info.Ln[1] = (Length >> 8) & 0xFF;
 8002862:	7323      	strb	r3, [r4, #12]
  NDEF_Attr_Info.Ln[2] = Length & 0xFF;
 8002864:	7365      	strb	r5, [r4, #13]
  err = NDEF_Wrapper_WriteData((uint8_t *)&NDEF_Attr_Info,0,16);
 8002866:	f000 fab2 	bl	8002dce <NDEF_Wrapper_WriteData>
  if(err != NDEF_OK)
 800286a:	b2c0      	uxtb	r0, r0
    return NDEF_ERROR;
 800286c:	3000      	adds	r0, #0
 800286e:	bf18      	it	ne
 8002870:	2001      	movne	r0, #1
  {
    return NDEF_ERROR;
  }

  return NDEF_OK;
}
 8002872:	bd38      	pop	{r3, r4, r5, pc}
 8002874:	20000268 	.word	0x20000268

08002878 <NfcType4_WriteNDEF>:
  return NDEF_OK;

}

uint16_t NfcType4_WriteNDEF(uint16_t Length, uint8_t* pData )
{
 8002878:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t txLen[2];
  txLen[0] = Length >> 8;
 800287a:	0a03      	lsrs	r3, r0, #8
  txLen[1] = Length & 0xFF;
 800287c:	f88d 0005 	strb.w	r0, [sp, #5]
{
 8002880:	4604      	mov	r4, r0
 8002882:	460d      	mov	r5, r1
  uint16_t status = NDEF_Wrapper_WriteData(txLen, 0, 2);
 8002884:	2202      	movs	r2, #2
 8002886:	2100      	movs	r1, #0
 8002888:	a801      	add	r0, sp, #4
  txLen[0] = Length >> 8;
 800288a:	f88d 3004 	strb.w	r3, [sp, #4]
  uint16_t status = NDEF_Wrapper_WriteData(txLen, 0, 2);
 800288e:	f000 fa9e 	bl	8002dce <NDEF_Wrapper_WriteData>
 8002892:	b280      	uxth	r0, r0
  if(status != NDEF_OK)
 8002894:	b928      	cbnz	r0, 80028a2 <NfcType4_WriteNDEF+0x2a>
  {
    return status;
  }
  return NDEF_Wrapper_WriteData(pData, 2, Length);
 8002896:	4622      	mov	r2, r4
 8002898:	2102      	movs	r1, #2
 800289a:	4628      	mov	r0, r5
 800289c:	f000 fa97 	bl	8002dce <NDEF_Wrapper_WriteData>
 80028a0:	b280      	uxth	r0, r0
}
 80028a2:	b003      	add	sp, #12
 80028a4:	bd30      	pop	{r4, r5, pc}

080028a6 <NfcType5_WriteCCFile>:
  * @param  pCCBuffer Pointer on the buffer containnig the Capability Container.
  * @retval NDEF_ERROR Error when writing the Tag.
  * @retval NDEF_OK    The CC has been successfully written.
  */
uint16_t NfcType5_WriteCCFile( const uint8_t * const pCCBuffer )
{
 80028a6:	b510      	push	{r4, lr}
 80028a8:	4604      	mov	r4, r0
  int32_t ret_value;
  
  /* Write first block of CCFile */
  ret_value = NDEF_Wrapper_WriteData( pCCBuffer, 0x00, 0x4 );
 80028aa:	2204      	movs	r2, #4
 80028ac:	2100      	movs	r1, #0
 80028ae:	f000 fa8e 	bl	8002dce <NDEF_Wrapper_WriteData>
 
  /* If extended memory writes the next 4 bytes */
  if( (pCCBuffer[2] == 0x00) && (ret_value == NDEF_OK) )
 80028b2:	78a3      	ldrb	r3, [r4, #2]
 80028b4:	b92b      	cbnz	r3, 80028c2 <NfcType5_WriteCCFile+0x1c>
 80028b6:	b940      	cbnz	r0, 80028ca <NfcType5_WriteCCFile+0x24>
  {
    ret_value = NDEF_Wrapper_WriteData( pCCBuffer + 4, 0x04, 4 );
 80028b8:	2204      	movs	r2, #4
 80028ba:	4611      	mov	r1, r2
 80028bc:	18a0      	adds	r0, r4, r2
 80028be:	f000 fa86 	bl	8002dce <NDEF_Wrapper_WriteData>
  }

  if( ret_value != NDEF_OK )
  {
    return NDEF_ERROR;
 80028c2:	3000      	adds	r0, #0
 80028c4:	bf18      	it	ne
 80028c6:	2001      	movne	r0, #1
 80028c8:	bd10      	pop	{r4, pc}
 80028ca:	2001      	movs	r0, #1
  }
  
	return NDEF_OK;
}
 80028cc:	bd10      	pop	{r4, pc}
	...

080028d0 <NfcType5_ReadCCFile>:
  * @param  pCCBuffer Pointer on the buffer used to store the CC.
  * @retval NDEF_ERROR Error when reading the Tag.
  * @retval NDEF_OK    The CC has been successfully read.
  */
uint16_t NfcType5_ReadCCFile( uint8_t * const pCCBuffer )
{
 80028d0:	b538      	push	{r3, r4, r5, lr}
  int32_t ret_value;
  
  /* Read 4 bytes of CC File */
  ret_value = NDEF_Wrapper_ReadData( pCCBuffer, ccFileOffset, 4 );
 80028d2:	4d0a      	ldr	r5, [pc, #40]	; (80028fc <NfcType5_ReadCCFile+0x2c>)
{
 80028d4:	4604      	mov	r4, r0
  ret_value = NDEF_Wrapper_ReadData( pCCBuffer, ccFileOffset, 4 );
 80028d6:	2204      	movs	r2, #4
 80028d8:	8829      	ldrh	r1, [r5, #0]
 80028da:	f000 fa6d 	bl	8002db8 <NDEF_Wrapper_ReadData>

  /* If extended memory reads the next 4 bytes */
  if( (pCCBuffer[2] == 0x00) && (ret_value == NDEF_OK) )
 80028de:	78a3      	ldrb	r3, [r4, #2]
 80028e0:	b933      	cbnz	r3, 80028f0 <NfcType5_ReadCCFile+0x20>
 80028e2:	b948      	cbnz	r0, 80028f8 <NfcType5_ReadCCFile+0x28>
  {
    ret_value = NDEF_Wrapper_ReadData( pCCBuffer + 4, ccFileOffset + 0x04, 4 );
 80028e4:	8829      	ldrh	r1, [r5, #0]
 80028e6:	2204      	movs	r2, #4
 80028e8:	4411      	add	r1, r2
 80028ea:	18a0      	adds	r0, r4, r2
 80028ec:	f000 fa64 	bl	8002db8 <NDEF_Wrapper_ReadData>
  }
  
  if( ret_value != NDEF_OK )
  {
    return NDEF_ERROR;
 80028f0:	3000      	adds	r0, #0
 80028f2:	bf18      	it	ne
 80028f4:	2001      	movne	r0, #1
 80028f6:	bd38      	pop	{r3, r4, r5, pc}
 80028f8:	2001      	movs	r0, #1
  }
  
	return NDEF_OK;
}
 80028fa:	bd38      	pop	{r3, r4, r5, pc}
 80028fc:	20000278 	.word	0x20000278

08002900 <NfcType5_TT5Init>:
  * @details The Capability Container content is defined by the global variable `CCFileStruct`.
  * @retval NDEF_ERROR The Tag has not been initialized.
  * @retval NDEF_OK    The Tag has been successfully initialized.
  */
uint16_t NfcType5_TT5Init( void )
{
 8002900:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint16_t status;
  uint8_t accbuffer[8];
  uint8_t cdata;

  /* Prepare buffer to update CCFile */
  accbuffer[0] = CCFileStruct.MagicNumber;
 8002902:	4c1c      	ldr	r4, [pc, #112]	; (8002974 <NfcType5_TT5Init+0x74>)
 8002904:	7822      	ldrb	r2, [r4, #0]
 8002906:	f88d 2008 	strb.w	r2, [sp, #8]
  accbuffer[1] = CCFileStruct.Version;
 800290a:	7862      	ldrb	r2, [r4, #1]
 800290c:	f88d 2009 	strb.w	r2, [sp, #9]
  accbuffer[2] = CCFileStruct.MemorySize;
  accbuffer[3] = CCFileStruct.TT5Tag;
 8002910:	78e2      	ldrb	r2, [r4, #3]
 8002912:	f88d 200b 	strb.w	r2, [sp, #11]
  CCFileStruct.NDEF_offset = ccFileOffset + 0x04;
 8002916:	4a18      	ldr	r2, [pc, #96]	; (8002978 <NfcType5_TT5Init+0x78>)
  accbuffer[2] = CCFileStruct.MemorySize;
 8002918:	78a1      	ldrb	r1, [r4, #2]
  CCFileStruct.NDEF_offset = ccFileOffset + 0x04;
 800291a:	8812      	ldrh	r2, [r2, #0]
  accbuffer[2] = CCFileStruct.MemorySize;
 800291c:	f88d 100a 	strb.w	r1, [sp, #10]
  CCFileStruct.NDEF_offset = ccFileOffset + 0x04;
 8002920:	1d10      	adds	r0, r2, #4
 8002922:	60e0      	str	r0, [r4, #12]
  
  /* If extended memory prepare the length bytes */
  if( CCFileStruct.MemorySize == NFCT5_EXTENDED_CCFILE )
 8002924:	b939      	cbnz	r1, 8002936 <NfcType5_TT5Init+0x36>
  {
    accbuffer[6] = (uint8_t)(CCFileStruct.ExtMemorySize >> 8);
 8002926:	88e3      	ldrh	r3, [r4, #6]
    accbuffer[7] = (uint8_t)(CCFileStruct.ExtMemorySize & 0xFF);
 8002928:	f88d 300f 	strb.w	r3, [sp, #15]
    accbuffer[6] = (uint8_t)(CCFileStruct.ExtMemorySize >> 8);
 800292c:	0a19      	lsrs	r1, r3, #8
    CCFileStruct.NDEF_offset = ccFileOffset + 0x08;
 800292e:	3208      	adds	r2, #8
    accbuffer[6] = (uint8_t)(CCFileStruct.ExtMemorySize >> 8);
 8002930:	f88d 100e 	strb.w	r1, [sp, #14]
    CCFileStruct.NDEF_offset = ccFileOffset + 0x08;
 8002934:	60e2      	str	r2, [r4, #12]
  }
  
  /* Update CCFile */
  status = NfcType5_WriteCCFile( accbuffer );
 8002936:	a802      	add	r0, sp, #8
 8002938:	f7ff ffb5 	bl	80028a6 <NfcType5_WriteCCFile>
  if( status != NDEF_OK )
 800293c:	4605      	mov	r5, r0
 800293e:	b9a0      	cbnz	r0, 800296a <NfcType5_TT5Init+0x6a>
    return status;
  }
  
  /* Update NDEF TLV for INITIALIZED state */
  /* Update T */
  cdata = NFCT5_NDEF_MSG_TLV;
 8002940:	ae04      	add	r6, sp, #16
 8002942:	2303      	movs	r3, #3
 8002944:	f806 3d09 	strb.w	r3, [r6, #-9]!
  ret_value = NDEF_Wrapper_WriteData( &cdata, CCFileStruct.NDEF_offset, 1 );
 8002948:	2201      	movs	r2, #1
 800294a:	68e1      	ldr	r1, [r4, #12]
 800294c:	4630      	mov	r0, r6
 800294e:	f000 fa3e 	bl	8002dce <NDEF_Wrapper_WriteData>
  if( ret_value != NDEF_OK )
 8002952:	b968      	cbnz	r0, 8002970 <NfcType5_TT5Init+0x70>
    return NDEF_ERROR;
  }

  /* Update L */
  cdata = 0x00;
  ret_value = NDEF_Wrapper_WriteData( &cdata, (CCFileStruct.NDEF_offset + 1), 1 );
 8002954:	68e1      	ldr	r1, [r4, #12]
  cdata = 0x00;
 8002956:	f88d 5007 	strb.w	r5, [sp, #7]
  ret_value = NDEF_Wrapper_WriteData( &cdata, (CCFileStruct.NDEF_offset + 1), 1 );
 800295a:	2201      	movs	r2, #1
 800295c:	4411      	add	r1, r2
 800295e:	4630      	mov	r0, r6
 8002960:	f000 fa35 	bl	8002dce <NDEF_Wrapper_WriteData>
    return NDEF_ERROR;
 8002964:	1c05      	adds	r5, r0, #0
 8002966:	bf18      	it	ne
 8002968:	2501      	movne	r5, #1
  {
    return NDEF_ERROR;
  }
  
  return NDEF_OK;
}
 800296a:	4628      	mov	r0, r5
 800296c:	b004      	add	sp, #16
 800296e:	bd70      	pop	{r4, r5, r6, pc}
    return NDEF_ERROR;
 8002970:	2501      	movs	r5, #1
 8002972:	e7fa      	b.n	800296a <NfcType5_TT5Init+0x6a>
 8002974:	200013f0 	.word	0x200013f0
 8002978:	20000278 	.word	0x20000278

0800297c <NfcType5_NDEFDetection>:
  *           The `CCfileStruct` global variable is updated accordingly with what is detected.
  * @retval NDEF_OK                 NDEF message Tag Type 5 detected.
  * @retval NDEF_ERROR_NOT_FORMATED Device is not a NFC Tag Type 5 Tag.
  */
uint16_t NfcType5_NDEFDetection( void )
{
 800297c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t acc_buffer[8];
  TT5_TLV_t tlv_detect;
  uint16_t status;
  uint32_t memory_size;
  
  CCFileStruct.State = TT5_NO_NDEF;
 800297e:	4c33      	ldr	r4, [pc, #204]	; (8002a4c <NfcType5_NDEFDetection+0xd0>)
 8002980:	2300      	movs	r3, #0
  
  /* Read CCFile */
  status = NfcType5_ReadCCFile( acc_buffer );
 8002982:	a802      	add	r0, sp, #8
  CCFileStruct.State = TT5_NO_NDEF;
 8002984:	7223      	strb	r3, [r4, #8]
  status = NfcType5_ReadCCFile( acc_buffer );
 8002986:	f7ff ffa3 	bl	80028d0 <NfcType5_ReadCCFile>
  if( status != NDEF_OK )
 800298a:	4605      	mov	r5, r0
 800298c:	b938      	cbnz	r0, 800299e <NfcType5_NDEFDetection+0x22>
  {
    return status;
  }
  
  /* Check Byte 0 is equal to magic number */
  if( ( acc_buffer[0] != NFCT5_MAGICNUMBER_E1_CCFILE ) && ( acc_buffer[0] != NFCT5_MAGICNUMBER_E2_CCFILE ) )
 800298e:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8002992:	f101 031f 	add.w	r3, r1, #31
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b01      	cmp	r3, #1
 800299a:	d903      	bls.n	80029a4 <NfcType5_NDEFDetection+0x28>
  {
    return NDEF_ERROR_NOT_FORMATED;
 800299c:	2505      	movs	r5, #5
      
    CCFileStruct.NDEF_offset++;
  }
  
  return NDEF_ERROR_NOT_FORMATED;
}
 800299e:	4628      	mov	r0, r5
 80029a0:	b004      	add	sp, #16
 80029a2:	bd70      	pop	{r4, r5, r6, pc}
  else if( ( (acc_buffer[1]&0xFC) != 0x40 ) && ((acc_buffer[1]&0xFC) != 0x10 ) )
 80029a4:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80029a8:	f002 03fc 	and.w	r3, r2, #252	; 0xfc
 80029ac:	2b40      	cmp	r3, #64	; 0x40
 80029ae:	d001      	beq.n	80029b4 <NfcType5_NDEFDetection+0x38>
 80029b0:	2b10      	cmp	r3, #16
 80029b2:	d1f3      	bne.n	800299c <NfcType5_NDEFDetection+0x20>
  if( acc_buffer[2] == 0x00 )
 80029b4:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80029b8:	4825      	ldr	r0, [pc, #148]	; (8002a50 <NfcType5_NDEFDetection+0xd4>)
    CCFileStruct.MemorySize = 0x0;
 80029ba:	70a3      	strb	r3, [r4, #2]
  if( acc_buffer[2] == 0x00 )
 80029bc:	bb23      	cbnz	r3, 8002a08 <NfcType5_NDEFDetection+0x8c>
    CCFileStruct.ExtMemorySize = ( CCFileStruct.ExtMemorySize << 8 ) |  acc_buffer[7];
 80029be:	f89d 600e 	ldrb.w	r6, [sp, #14]
 80029c2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80029c6:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 80029ca:	80e3      	strh	r3, [r4, #6]
    memory_size = CCFileStruct.ExtMemorySize;
 80029cc:	461e      	mov	r6, r3
    CCFileStruct.NDEF_offset = ccFileOffset + 8;
 80029ce:	8803      	ldrh	r3, [r0, #0]
 80029d0:	3308      	adds	r3, #8
    CCFileStruct.NDEF_offset = ccFileOffset + 4;
 80029d2:	60e3      	str	r3, [r4, #12]
  CCFileStruct.TT5Tag = acc_buffer[3];
 80029d4:	f89d 300b 	ldrb.w	r3, [sp, #11]
  CCFileStruct.MagicNumber = (TT5_MagicNumber_t)acc_buffer[0];
 80029d8:	7021      	strb	r1, [r4, #0]
  CCFileStruct.Version = acc_buffer[1];
 80029da:	7062      	strb	r2, [r4, #1]
  CCFileStruct.TT5Tag = acc_buffer[3];
 80029dc:	70e3      	strb	r3, [r4, #3]
  while( ( NDEF_Wrapper_ReadData( (uint8_t *)&tlv_detect, CCFileStruct.NDEF_offset, sizeof(TT5_TLV_t) ) == NDEF_OK ) && ( CCFileStruct.NDEF_offset < memory_size ) )
 80029de:	2204      	movs	r2, #4
 80029e0:	68e1      	ldr	r1, [r4, #12]
 80029e2:	eb0d 0002 	add.w	r0, sp, r2
 80029e6:	f000 f9e7 	bl	8002db8 <NDEF_Wrapper_ReadData>
 80029ea:	2800      	cmp	r0, #0
 80029ec:	d1d6      	bne.n	800299c <NfcType5_NDEFDetection+0x20>
 80029ee:	68e3      	ldr	r3, [r4, #12]
 80029f0:	429e      	cmp	r6, r3
 80029f2:	d9d3      	bls.n	800299c <NfcType5_NDEFDetection+0x20>
    if( tlv_detect.Type == NFCT5_NDEF_MSG_TLV )
 80029f4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80029f8:	2a03      	cmp	r2, #3
 80029fa:	d112      	bne.n	8002a22 <NfcType5_NDEFDetection+0xa6>
      if( tlv_detect.Length == 0x00 )
 80029fc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002a00:	b943      	cbnz	r3, 8002a14 <NfcType5_NDEFDetection+0x98>
        CCFileStruct.State = TT5_INITIALIZED;
 8002a02:	2301      	movs	r3, #1
          CCFileStruct.State = TT5_READ_WRITE;
 8002a04:	7223      	strb	r3, [r4, #8]
 8002a06:	e7ca      	b.n	800299e <NfcType5_NDEFDetection+0x22>
    CCFileStruct.ExtMemorySize = 0x0;
 8002a08:	2600      	movs	r6, #0
 8002a0a:	80e6      	strh	r6, [r4, #6]
    memory_size = CCFileStruct.MemorySize;
 8002a0c:	461e      	mov	r6, r3
    CCFileStruct.NDEF_offset = ccFileOffset + 4;
 8002a0e:	8803      	ldrh	r3, [r0, #0]
 8002a10:	3304      	adds	r3, #4
 8002a12:	e7de      	b.n	80029d2 <NfcType5_NDEFDetection+0x56>
        if( CCFileStruct.Version & 0x3 )
 8002a14:	7863      	ldrb	r3, [r4, #1]
 8002a16:	079b      	lsls	r3, r3, #30
 8002a18:	d001      	beq.n	8002a1e <NfcType5_NDEFDetection+0xa2>
          CCFileStruct.State = TT5_READ;
 8002a1a:	7222      	strb	r2, [r4, #8]
 8002a1c:	e7bf      	b.n	800299e <NfcType5_NDEFDetection+0x22>
          CCFileStruct.State = TT5_READ_WRITE;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e7f0      	b.n	8002a04 <NfcType5_NDEFDetection+0x88>
    else if(( tlv_detect.Type == NFCT5_PROPRIETARY_TLV ) || 
 8002a22:	2afd      	cmp	r2, #253	; 0xfd
 8002a24:	d002      	beq.n	8002a2c <NfcType5_NDEFDetection+0xb0>
 8002a26:	1e51      	subs	r1, r2, #1
 8002a28:	2901      	cmp	r1, #1
 8002a2a:	d80a      	bhi.n	8002a42 <NfcType5_NDEFDetection+0xc6>
      if( tlv_detect.Length == NFCT5_3_BYTES_L_TLV )
 8002a2c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002a30:	2aff      	cmp	r2, #255	; 0xff
        CCFileStruct.NDEF_offset = CCFileStruct.NDEF_offset + tlv_detect.Length16 + 4;
 8002a32:	bf06      	itte	eq
 8002a34:	f8bd 2006 	ldrheq.w	r2, [sp, #6]
 8002a38:	3304      	addeq	r3, #4
        CCFileStruct.NDEF_offset = CCFileStruct.NDEF_offset + tlv_detect.Length + 2;
 8002a3a:	3302      	addne	r3, #2
 8002a3c:	4413      	add	r3, r2
    CCFileStruct.NDEF_offset++;
 8002a3e:	60e3      	str	r3, [r4, #12]
 8002a40:	e7cd      	b.n	80029de <NfcType5_NDEFDetection+0x62>
    else if( tlv_detect.Type == NFCT5_TERMINATOR_TLV )
 8002a42:	2afe      	cmp	r2, #254	; 0xfe
 8002a44:	d0aa      	beq.n	800299c <NfcType5_NDEFDetection+0x20>
    CCFileStruct.NDEF_offset++;
 8002a46:	3301      	adds	r3, #1
 8002a48:	e7f9      	b.n	8002a3e <NfcType5_NDEFDetection+0xc2>
 8002a4a:	bf00      	nop
 8002a4c:	200013f0 	.word	0x200013f0
 8002a50:	20000278 	.word	0x20000278

08002a54 <NfcType5_WriteData>:
{
 8002a54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
                        - CCFileStruct.NDEF_offset;     /* - CCfile length */
 8002a58:	4f23      	ldr	r7, [pc, #140]	; (8002ae8 <NfcType5_WriteData+0x94>)
  uint8_t NfcT5_Terminator = NFCT5_TERMINATOR_TLV;
 8002a5a:	23fe      	movs	r3, #254	; 0xfe
{
 8002a5c:	460c      	mov	r4, r1
  uint8_t NfcT5_Terminator = NFCT5_TERMINATOR_TLV;
 8002a5e:	f88d 3003 	strb.w	r3, [sp, #3]
{
 8002a62:	4605      	mov	r5, r0
 8002a64:	4616      	mov	r6, r2
  uint32_t max_length = NDEF_Wrapper_GetMemorySize()        /* Memory size */
 8002a66:	f000 f9bd 	bl	8002de4 <NDEF_Wrapper_GetMemorySize>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
                        - ((Length >= 0xFF) ? 4 : 2)    /* - TLV length */
 8002a6c:	2cff      	cmp	r4, #255	; 0xff
  uint32_t max_length = NDEF_Wrapper_GetMemorySize()        /* Memory size */
 8002a6e:	ea6f 0303 	mvn.w	r3, r3
                        - ((Length >= 0xFF) ? 4 : 2)    /* - TLV length */
 8002a72:	bf34      	ite	cc
 8002a74:	2102      	movcc	r1, #2
 8002a76:	2104      	movcs	r1, #4
  uint32_t max_length = NDEF_Wrapper_GetMemorySize()        /* Memory size */
 8002a78:	4403      	add	r3, r0
 8002a7a:	1a5b      	subs	r3, r3, r1
  if( Length > max_length )
 8002a7c:	42a3      	cmp	r3, r4
 8002a7e:	d331      	bcc.n	8002ae4 <NfcType5_WriteData+0x90>
  if( NfcType5_NDEFDetection( ) != NDEF_OK )
 8002a80:	f7ff ff7c 	bl	800297c <NfcType5_NDEFDetection>
 8002a84:	b118      	cbz	r0, 8002a8e <NfcType5_WriteData+0x3a>
    return NDEF_ERROR;
 8002a86:	2001      	movs	r0, #1
}
 8002a88:	b002      	add	sp, #8
 8002a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(Length >= 0xFF)
 8002a8e:	2cfe      	cmp	r4, #254	; 0xfe
  tlv.Type = Type;
 8002a90:	f88d 5004 	strb.w	r5, [sp, #4]
  if(Length >= 0xFF)
 8002a94:	d921      	bls.n	8002ada <NfcType5_WriteData+0x86>
    tlv.Length = NFCT5_3_BYTES_L_TLV;
 8002a96:	23ff      	movs	r3, #255	; 0xff
 8002a98:	f88d 3005 	strb.w	r3, [sp, #5]
    tlv.Length16 = ((Length&0xff)<<8) | ((Length>>8)&0xff) ;
 8002a9c:	ba63      	rev16	r3, r4
 8002a9e:	f8ad 3006 	strh.w	r3, [sp, #6]
    tlv_size = 4;
 8002aa2:	f04f 0804 	mov.w	r8, #4
  offset = CCFileStruct.NDEF_offset;
 8002aa6:	68fd      	ldr	r5, [r7, #12]
  if(NDEF_Wrapper_WriteData( (uint8_t*)&tlv, offset, tlv_size )!= NDEF_OK)
 8002aa8:	4642      	mov	r2, r8
 8002aaa:	4629      	mov	r1, r5
 8002aac:	a801      	add	r0, sp, #4
 8002aae:	f000 f98e 	bl	8002dce <NDEF_Wrapper_WriteData>
 8002ab2:	2800      	cmp	r0, #0
 8002ab4:	d1e7      	bne.n	8002a86 <NfcType5_WriteData+0x32>
  offset += tlv_size;
 8002ab6:	4445      	add	r5, r8
  if(NDEF_Wrapper_WriteData( pData , offset, Length ) != NDEF_OK )
 8002ab8:	4622      	mov	r2, r4
 8002aba:	4629      	mov	r1, r5
 8002abc:	4630      	mov	r0, r6
 8002abe:	f000 f986 	bl	8002dce <NDEF_Wrapper_WriteData>
 8002ac2:	2800      	cmp	r0, #0
 8002ac4:	d1df      	bne.n	8002a86 <NfcType5_WriteData+0x32>
  if(NDEF_Wrapper_WriteData( &NfcT5_Terminator, offset, sizeof(NfcT5_Terminator) ) != NDEF_OK)
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	1961      	adds	r1, r4, r5
 8002aca:	f10d 0003 	add.w	r0, sp, #3
 8002ace:	f000 f97e 	bl	8002dce <NDEF_Wrapper_WriteData>
    return NDEF_ERROR_MEMORY_TAG;
 8002ad2:	3000      	adds	r0, #0
 8002ad4:	bf18      	it	ne
 8002ad6:	2001      	movne	r0, #1
 8002ad8:	e7d6      	b.n	8002a88 <NfcType5_WriteData+0x34>
    tlv.Length = Length;
 8002ada:	f88d 4005 	strb.w	r4, [sp, #5]
    tlv_size = 2;
 8002ade:	f04f 0802 	mov.w	r8, #2
 8002ae2:	e7e0      	b.n	8002aa6 <NfcType5_WriteData+0x52>
    return NDEF_ERROR_MEMORY_TAG;
 8002ae4:	2002      	movs	r0, #2
 8002ae6:	e7cf      	b.n	8002a88 <NfcType5_WriteData+0x34>
 8002ae8:	200013f0 	.word	0x200013f0

08002aec <NfcType5_WriteNDEF>:
  return NfcType5_WriteData(NFCT5_NDEF_MSG_TLV,Length,pData);
 8002aec:	460a      	mov	r2, r1
 8002aee:	4601      	mov	r1, r0
 8002af0:	2003      	movs	r0, #3
 8002af2:	f7ff bfaf 	b.w	8002a54 <NfcType5_WriteData>
	...

08002af8 <uri_modify_request_handler>:

#include "app_nfc_uri.h"
#include "lib_NDEF_URI.h"
#include <stdbool.h>

void uri_modify_request_handler(char *data) {
 8002af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  static bool receiving = false;

  static sURI_Info URI;

  if (!receiving) {
 8002afc:	4c24      	ldr	r4, [pc, #144]	; (8002b90 <uri_modify_request_handler+0x98>)
 8002afe:	4d25      	ldr	r5, [pc, #148]	; (8002b94 <uri_modify_request_handler+0x9c>)
 8002b00:	7823      	ldrb	r3, [r4, #0]
void uri_modify_request_handler(char *data) {
 8002b02:	4606      	mov	r6, r0
  if (!receiving) {
 8002b04:	b943      	cbnz	r3, 8002b18 <uri_modify_request_handler+0x20>
    type = data[0];
    switch(type) {
 8002b06:	7803      	ldrb	r3, [r0, #0]
 8002b08:	2b33      	cmp	r3, #51	; 0x33
 8002b0a:	d013      	beq.n	8002b34 <uri_modify_request_handler+0x3c>
 8002b0c:	2b34      	cmp	r3, #52	; 0x34
 8002b0e:	d016      	beq.n	8002b3e <uri_modify_request_handler+0x46>
        strcpy( URI.protocol,URI_ID_0x04_STRING);
        break;
      default:
        break;
    }
    cnt= 2;
 8002b10:	2302      	movs	r3, #2
 8002b12:	602b      	str	r3, [r5, #0]
    receiving = true;
 8002b14:	2301      	movs	r3, #1
 8002b16:	7023      	strb	r3, [r4, #0]
  }

  while (cnt <= 19 && receiving) {
    uri[i] = data[cnt];
 8002b18:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8002bb0 <uri_modify_request_handler+0xb8>
 8002b1c:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8002bb4 <uri_modify_request_handler+0xbc>
    if (uri[i] == '\n') {
      receiving = false;
      uri[i] = '\0';
      i = 0;
      strcpy( URI.URI_Message, uri);
 8002b20:	4f1d      	ldr	r7, [pc, #116]	; (8002b98 <uri_modify_request_handler+0xa0>)
  while (cnt <= 19 && receiving) {
 8002b22:	682b      	ldr	r3, [r5, #0]
 8002b24:	2b13      	cmp	r3, #19
 8002b26:	dc01      	bgt.n	8002b2c <uri_modify_request_handler+0x34>
 8002b28:	7822      	ldrb	r2, [r4, #0]
 8002b2a:	b952      	cbnz	r2, 8002b42 <uri_modify_request_handler+0x4a>
    } else {
      cnt++;
      i++;
    }
  }
  cnt = 0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	602b      	str	r3, [r5, #0]
 8002b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        strcpy( URI.protocol,URI_ID_0x03_STRING);
 8002b34:	4919      	ldr	r1, [pc, #100]	; (8002b9c <uri_modify_request_handler+0xa4>)
        strcpy( URI.protocol,URI_ID_0x04_STRING);
 8002b36:	481a      	ldr	r0, [pc, #104]	; (8002ba0 <uri_modify_request_handler+0xa8>)
 8002b38:	f000 fda8 	bl	800368c <strcpy>
        break;
 8002b3c:	e7e8      	b.n	8002b10 <uri_modify_request_handler+0x18>
        strcpy( URI.protocol,URI_ID_0x04_STRING);
 8002b3e:	4919      	ldr	r1, [pc, #100]	; (8002ba4 <uri_modify_request_handler+0xac>)
 8002b40:	e7f9      	b.n	8002b36 <uri_modify_request_handler+0x3e>
    uri[i] = data[cnt];
 8002b42:	5cf1      	ldrb	r1, [r6, r3]
 8002b44:	f8d8 2000 	ldr.w	r2, [r8]
    if (uri[i] == '\n') {
 8002b48:	290a      	cmp	r1, #10
    uri[i] = data[cnt];
 8002b4a:	f809 1002 	strb.w	r1, [r9, r2]
    if (uri[i] == '\n') {
 8002b4e:	d118      	bne.n	8002b82 <uri_modify_request_handler+0x8a>
      receiving = false;
 8002b50:	2300      	movs	r3, #0
      strcpy( URI.URI_Message, uri);
 8002b52:	4649      	mov	r1, r9
 8002b54:	4638      	mov	r0, r7
      receiving = false;
 8002b56:	7023      	strb	r3, [r4, #0]
      uri[i] = '\0';
 8002b58:	f809 3002 	strb.w	r3, [r9, r2]
      i = 0;
 8002b5c:	f8c8 3000 	str.w	r3, [r8]
      strcpy( URI.URI_Message, uri);
 8002b60:	f000 fd94 	bl	800368c <strcpy>
      strcpy( URI.Information,"\0" );
 8002b64:	4910      	ldr	r1, [pc, #64]	; (8002ba8 <uri_modify_request_handler+0xb0>)
 8002b66:	4811      	ldr	r0, [pc, #68]	; (8002bac <uri_modify_request_handler+0xb4>)
      while( NDEF_WriteURI( &URI ) != NDEF_OK );
 8002b68:	f8df a034 	ldr.w	sl, [pc, #52]	; 8002ba0 <uri_modify_request_handler+0xa8>
      strcpy( URI.Information,"\0" );
 8002b6c:	f000 fd8e 	bl	800368c <strcpy>
      HAL_Delay(5);
 8002b70:	2005      	movs	r0, #5
 8002b72:	f7fd ff75 	bl	8000a60 <HAL_Delay>
      while( NDEF_WriteURI( &URI ) != NDEF_OK );
 8002b76:	4650      	mov	r0, sl
 8002b78:	f7ff fe20 	bl	80027bc <NDEF_WriteURI>
 8002b7c:	2800      	cmp	r0, #0
 8002b7e:	d1fa      	bne.n	8002b76 <uri_modify_request_handler+0x7e>
 8002b80:	e7cf      	b.n	8002b22 <uri_modify_request_handler+0x2a>
      cnt++;
 8002b82:	3301      	adds	r3, #1
      i++;
 8002b84:	3201      	adds	r2, #1
      cnt++;
 8002b86:	602b      	str	r3, [r5, #0]
      i++;
 8002b88:	f8c8 2000 	str.w	r2, [r8]
 8002b8c:	e7c9      	b.n	8002b22 <uri_modify_request_handler+0x2a>
 8002b8e:	bf00      	nop
 8002b90:	200005f4 	.word	0x200005f4
 8002b94:	200005ec 	.word	0x200005ec
 8002b98:	200002ca 	.word	0x200002ca
 8002b9c:	080047fe 	.word	0x080047fe
 8002ba0:	2000027a 	.word	0x2000027a
 8002ba4:	08004807 	.word	0x08004807
 8002ba8:	08004811 	.word	0x08004811
 8002bac:	2000045a 	.word	0x2000045a
 8002bb0:	200005f0 	.word	0x200005f0
 8002bb4:	200005f5 	.word	0x200005f5

08002bb8 <MX_NFC_Process>:
 8002bb8:	4770      	bx	lr
	...

08002bbc <MX_NFC4_NDEF_URI_Init>:

  /* USER CODE END NFC4_Library_Process */
}

void MX_NFC4_NDEF_URI_Init(void)
{
 8002bbc:	b510      	push	{r4, lr}
	  /******************************************************************************/
  /* Configuration of X-NUCLEO-NFC02A1                                          */
  /******************************************************************************/
  /* Init of the Leds on X-NUCLEO-NFC04A1 board */
  NFC04A1_LED_Init(GREEN_LED );
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	f7fd fe56 	bl	8000870 <NFC04A1_LED_Init>
  NFC04A1_LED_Init(BLUE_LED );
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	f7fd fe53 	bl	8000870 <NFC04A1_LED_Init>
  NFC04A1_LED_Init(YELLOW_LED );
 8002bca:	2002      	movs	r0, #2
 8002bcc:	f7fd fe50 	bl	8000870 <NFC04A1_LED_Init>
  NFC04A1_LED_On( GREEN_LED );
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	f7fd fe65 	bl	80008a0 <NFC04A1_LED_On>
  HAL_Delay( 300 );
 8002bd6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002bda:	f7fd ff41 	bl	8000a60 <HAL_Delay>
  NFC04A1_LED_On( BLUE_LED );
 8002bde:	2001      	movs	r0, #1
 8002be0:	f7fd fe5e 	bl	80008a0 <NFC04A1_LED_On>
  HAL_Delay( 300 );
 8002be4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002be8:	f7fd ff3a 	bl	8000a60 <HAL_Delay>
  NFC04A1_LED_On( YELLOW_LED );
 8002bec:	2002      	movs	r0, #2
 8002bee:	f7fd fe57 	bl	80008a0 <NFC04A1_LED_On>
  HAL_Delay( 300 );
 8002bf2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002bf6:	f7fd ff33 	bl	8000a60 <HAL_Delay>
  
  /* Init ST25DV driver */
  while( NFC04A1_NFCTAG_Init(NFC04A1_NFCTAG_INSTANCE) != NFCTAG_OK );
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f7fd fe6c 	bl	80008d8 <NFC04A1_NFCTAG_Init>
 8002c00:	4604      	mov	r4, r0
 8002c02:	2800      	cmp	r0, #0
 8002c04:	d1f9      	bne.n	8002bfa <MX_NFC4_NDEF_URI_Init+0x3e>

  /* Reset Mailbox enable to allow write to EEPROM */
  NFC04A1_NFCTAG_ResetMBEN_Dyn(NFC04A1_NFCTAG_INSTANCE);
 8002c06:	f7fd fed5 	bl	80009b4 <NFC04A1_NFCTAG_ResetMBEN_Dyn>

  NfcTag_SelectProtocol(NFCTAG_TYPE5);
 8002c0a:	4620      	mov	r0, r4
 8002c0c:	f7ff fde8 	bl	80027e0 <NfcTag_SelectProtocol>

  /* Check if no NDEF detected, init mem in Tag Type 5 */
  if( NfcType5_NDEFDetection( ) != NDEF_OK )
 8002c10:	f7ff feb4 	bl	800297c <NfcType5_NDEFDetection>
 8002c14:	bb70      	cbnz	r0, 8002c74 <MX_NFC4_NDEF_URI_Init+0xb8>
    /* Init of the Type Tag 5 component (M24LR) */
    while( NfcType5_TT5Init( ) != NFCTAG_OK );
  }

  /* Init done */
  NFC04A1_LED_Off( GREEN_LED );
 8002c16:	2000      	movs	r0, #0
 8002c18:	f7fd fe50 	bl	80008bc <NFC04A1_LED_Off>
  HAL_Delay( 300 );
 8002c1c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002c20:	f7fd ff1e 	bl	8000a60 <HAL_Delay>
  NFC04A1_LED_Off( BLUE_LED );
 8002c24:	2001      	movs	r0, #1
 8002c26:	f7fd fe49 	bl	80008bc <NFC04A1_LED_Off>
  HAL_Delay( 300 );
 8002c2a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002c2e:	f7fd ff17 	bl	8000a60 <HAL_Delay>
  NFC04A1_LED_Off( YELLOW_LED );
 8002c32:	2002      	movs	r0, #2
 8002c34:	f7fd fe42 	bl	80008bc <NFC04A1_LED_Off>
  HAL_Delay( 300 );
 8002c38:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002c3c:	f7fd ff10 	bl	8000a60 <HAL_Delay>
  
  /* Prepare URI NDEF message content */
  strcpy( URI.protocol,URI_ID_0x01_STRING );
 8002c40:	4913      	ldr	r1, [pc, #76]	; (8002c90 <MX_NFC4_NDEF_URI_Init+0xd4>)
 8002c42:	4814      	ldr	r0, [pc, #80]	; (8002c94 <MX_NFC4_NDEF_URI_Init+0xd8>)
  strcpy( URI.URI_Message,"st.com/st25-demo" );
  strcpy( URI.Information,"\0" );
  
  /* Write NDEF to EEPROM */
  HAL_Delay(5);
  while( NDEF_WriteURI( &URI ) != NDEF_OK );
 8002c44:	4c13      	ldr	r4, [pc, #76]	; (8002c94 <MX_NFC4_NDEF_URI_Init+0xd8>)
  strcpy( URI.protocol,URI_ID_0x01_STRING );
 8002c46:	f000 fd21 	bl	800368c <strcpy>
  strcpy( URI.URI_Message,"st.com/st25-demo" );
 8002c4a:	4913      	ldr	r1, [pc, #76]	; (8002c98 <MX_NFC4_NDEF_URI_Init+0xdc>)
 8002c4c:	4813      	ldr	r0, [pc, #76]	; (8002c9c <MX_NFC4_NDEF_URI_Init+0xe0>)
 8002c4e:	f000 fd1d 	bl	800368c <strcpy>
  strcpy( URI.Information,"\0" );
 8002c52:	4913      	ldr	r1, [pc, #76]	; (8002ca0 <MX_NFC4_NDEF_URI_Init+0xe4>)
 8002c54:	4813      	ldr	r0, [pc, #76]	; (8002ca4 <MX_NFC4_NDEF_URI_Init+0xe8>)
 8002c56:	f000 fd19 	bl	800368c <strcpy>
  HAL_Delay(5);
 8002c5a:	2005      	movs	r0, #5
 8002c5c:	f7fd ff00 	bl	8000a60 <HAL_Delay>
  while( NDEF_WriteURI( &URI ) != NDEF_OK );
 8002c60:	4620      	mov	r0, r4
 8002c62:	f7ff fdab 	bl	80027bc <NDEF_WriteURI>
 8002c66:	2800      	cmp	r0, #0
 8002c68:	d1fa      	bne.n	8002c60 <MX_NFC4_NDEF_URI_Init+0xa4>
  
  /* Set the LED3 on to indicate Programing done */
  NFC04A1_LED_On( YELLOW_LED );
 8002c6a:	2002      	movs	r0, #2

}
 8002c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  NFC04A1_LED_On( YELLOW_LED );
 8002c70:	f7fd be16 	b.w	80008a0 <NFC04A1_LED_On>
    CCFileStruct.MagicNumber = NFCT5_MAGICNUMBER_E1_CCFILE;
 8002c74:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <MX_NFC4_NDEF_URI_Init+0xec>)
 8002c76:	22e1      	movs	r2, #225	; 0xe1
 8002c78:	701a      	strb	r2, [r3, #0]
    CCFileStruct.Version = NFCT5_VERSION_V1_0;
 8002c7a:	2240      	movs	r2, #64	; 0x40
 8002c7c:	705a      	strb	r2, [r3, #1]
    CCFileStruct.MemorySize = ( ST25DV_MAX_SIZE / 8 ) & 0xFF;
 8002c7e:	709a      	strb	r2, [r3, #2]
    CCFileStruct.TT5Tag = 0x05;
 8002c80:	2205      	movs	r2, #5
 8002c82:	70da      	strb	r2, [r3, #3]
    while( NfcType5_TT5Init( ) != NFCTAG_OK );
 8002c84:	f7ff fe3c 	bl	8002900 <NfcType5_TT5Init>
 8002c88:	2800      	cmp	r0, #0
 8002c8a:	d1fb      	bne.n	8002c84 <MX_NFC4_NDEF_URI_Init+0xc8>
 8002c8c:	e7c3      	b.n	8002c16 <MX_NFC4_NDEF_URI_Init+0x5a>
 8002c8e:	bf00      	nop
 8002c90:	08004813 	.word	0x08004813
 8002c94:	20001400 	.word	0x20001400
 8002c98:	08004828 	.word	0x08004828
 8002c9c:	20001450 	.word	0x20001450
 8002ca0:	08004820 	.word	0x08004820
 8002ca4:	200015e0 	.word	0x200015e0
 8002ca8:	200013f0 	.word	0x200013f0

08002cac <MX_NFC_Init>:
  MX_NFC4_NDEF_URI_Init();
 8002cac:	f7ff bf86 	b.w	8002bbc <MX_NFC4_NDEF_URI_Init>

08002cb0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002cb0:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb2:	2214      	movs	r2, #20
{
 8002cb4:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb6:	eb0d 0002 	add.w	r0, sp, r2
 8002cba:	2100      	movs	r1, #0
 8002cbc:	f000 fc56 	bl	800356c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cc0:	2400      	movs	r4, #0
 8002cc2:	4b37      	ldr	r3, [pc, #220]	; (8002da0 <MX_GPIO_Init+0xf0>)
 8002cc4:	9401      	str	r4, [sp, #4]
 8002cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8002cc8:	4d36      	ldr	r5, [pc, #216]	; (8002da4 <MX_GPIO_Init+0xf4>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002cca:	4e37      	ldr	r6, [pc, #220]	; (8002da8 <MX_GPIO_Init+0xf8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ccc:	f042 0204 	orr.w	r2, r2, #4
 8002cd0:	631a      	str	r2, [r3, #48]	; 0x30
 8002cd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd4:	f002 0204 	and.w	r2, r2, #4
 8002cd8:	9201      	str	r2, [sp, #4]
 8002cda:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cdc:	9402      	str	r4, [sp, #8]
 8002cde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ce0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ce4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ce6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ce8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002cec:	9202      	str	r2, [sp, #8]
 8002cee:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf0:	9403      	str	r4, [sp, #12]
 8002cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cf4:	f042 0201 	orr.w	r2, r2, #1
 8002cf8:	631a      	str	r2, [r3, #48]	; 0x30
 8002cfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cfc:	f002 0201 	and.w	r2, r2, #1
 8002d00:	9203      	str	r2, [sp, #12]
 8002d02:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d04:	9404      	str	r4, [sp, #16]
 8002d06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d08:	f042 0202 	orr.w	r2, r2, #2
 8002d0c:	631a      	str	r2, [r3, #48]	; 0x30
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8002d16:	4622      	mov	r2, r4
 8002d18:	4628      	mov	r0, r5
 8002d1a:	f44f 61a4 	mov.w	r1, #1312	; 0x520
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d1e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8002d20:	f7fe f886 	bl	8000e30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002d24:	4622      	mov	r2, r4
 8002d26:	4630      	mov	r0, r6
 8002d28:	2130      	movs	r1, #48	; 0x30
 8002d2a:	f7fe f881 	bl	8000e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002d2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d32:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d34:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d36:	4b1d      	ldr	r3, [pc, #116]	; (8002dac <MX_GPIO_Init+0xfc>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d38:	481d      	ldr	r0, [pc, #116]	; (8002db0 <MX_GPIO_Init+0x100>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d3a:	9306      	str	r3, [sp, #24]

  /*Configure GPIO pins : PAPin PA8 PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d3c:	2701      	movs	r7, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d40:	f7fd ff2a 	bl	8000b98 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_10;
 8002d44:	f44f 63a4 	mov.w	r3, #1312	; 0x520
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d48:	a905      	add	r1, sp, #20
 8002d4a:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_10;
 8002d4c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d4e:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d52:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d54:	f7fd ff20 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d58:	2340      	movs	r3, #64	; 0x40
 8002d5a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d5c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d5e:	4b15      	ldr	r3, [pc, #84]	; (8002db4 <MX_GPIO_Init+0x104>)
 8002d60:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d62:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d64:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d66:	f7fd ff17 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002d6a:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d6c:	a905      	add	r1, sp, #20
 8002d6e:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002d70:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d72:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d74:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d76:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d78:	f7fd ff0e 	bl	8000b98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002d7c:	4622      	mov	r2, r4
 8002d7e:	4621      	mov	r1, r4
 8002d80:	2017      	movs	r0, #23
 8002d82:	f7fd fe93 	bl	8000aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002d86:	2017      	movs	r0, #23
 8002d88:	f7fd fec4 	bl	8000b14 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002d8c:	4622      	mov	r2, r4
 8002d8e:	4621      	mov	r1, r4
 8002d90:	2028      	movs	r0, #40	; 0x28
 8002d92:	f7fd fe8b 	bl	8000aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d96:	2028      	movs	r0, #40	; 0x28
 8002d98:	f7fd febc 	bl	8000b14 <HAL_NVIC_EnableIRQ>

}
 8002d9c:	b00b      	add	sp, #44	; 0x2c
 8002d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002da0:	40023800 	.word	0x40023800
 8002da4:	40020000 	.word	0x40020000
 8002da8:	40020400 	.word	0x40020400
 8002dac:	10210000 	.word	0x10210000
 8002db0:	40020800 	.word	0x40020800
 8002db4:	10110000 	.word	0x10110000

08002db8 <NDEF_Wrapper_ReadData>:
  * @param  offset: Address to read
  * @param  Size : Size in bytes of the value to be read
  * @retval NDEF_OK if success, NDEF_ERROR in case of failure
  */
int32_t NDEF_Wrapper_ReadData(uint8_t* pData, uint32_t offset, uint32_t length )
{
 8002db8:	b508      	push	{r3, lr}
  if(NFC04A1_NFCTAG_ReadData(NFC04A1_NFCTAG_INSTANCE, pData, offset, length ) != NFCTAG_OK)
 8002dba:	b293      	uxth	r3, r2
 8002dbc:	b28a      	uxth	r2, r1
 8002dbe:	4601      	mov	r1, r0
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	f7fd fdbd 	bl	8000940 <NFC04A1_NFCTAG_ReadData>
    return NDEF_ERROR;
  return NDEF_OK;
}
 8002dc6:	3000      	adds	r0, #0
 8002dc8:	bf18      	it	ne
 8002dca:	2001      	movne	r0, #1
 8002dcc:	bd08      	pop	{r3, pc}

08002dce <NDEF_Wrapper_WriteData>:
  * @param  offset: Address to write
  * @param  Size : Number of bytes to be written
  * @retval NDEF_OK if success, NDEF_ERROR in case of failure
  */
int32_t NDEF_Wrapper_WriteData(const uint8_t* pData, uint32_t offset, uint32_t length )
{
 8002dce:	b508      	push	{r3, lr}
  if(NFC04A1_NFCTAG_WriteData(NFC04A1_NFCTAG_INSTANCE, pData, offset, length ) != NFCTAG_OK)
 8002dd0:	b293      	uxth	r3, r2
 8002dd2:	b28a      	uxth	r2, r1
 8002dd4:	4601      	mov	r1, r0
 8002dd6:	2000      	movs	r0, #0
 8002dd8:	f7fd fdc6 	bl	8000968 <NFC04A1_NFCTAG_WriteData>
    return NDEF_ERROR;
  return NDEF_OK;
}
 8002ddc:	3000      	adds	r0, #0
 8002dde:	bf18      	it	ne
 8002de0:	2001      	movne	r0, #1
 8002de2:	bd08      	pop	{r3, pc}

08002de4 <NDEF_Wrapper_GetMemorySize>:
  * @brief  Compute the NFCTAG Memory Size.
  * @return uint32_t Memory size in bytes.
  */
uint32_t NDEF_Wrapper_GetMemorySize(void)
{
  return NFC04A1_NFCTAG_GetByteSize(NFC04A1_NFCTAG_INSTANCE);
 8002de4:	2000      	movs	r0, #0
 8002de6:	f7fd bdd3 	b.w	8000990 <NFC04A1_NFCTAG_GetByteSize>
	...

08002dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002dec:	b530      	push	{r4, r5, lr}
 8002dee:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002df0:	2230      	movs	r2, #48	; 0x30
 8002df2:	2100      	movs	r1, #0
 8002df4:	a808      	add	r0, sp, #32
 8002df6:	f000 fbb9 	bl	800356c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	2214      	movs	r2, #20
 8002dfe:	a803      	add	r0, sp, #12
 8002e00:	f000 fbb4 	bl	800356c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e04:	2400      	movs	r4, #0
 8002e06:	4b1c      	ldr	r3, [pc, #112]	; (8002e78 <SystemClock_Config+0x8c>)
 8002e08:	9401      	str	r4, [sp, #4]
 8002e0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e0c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e10:	641a      	str	r2, [r3, #64]	; 0x40
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e14:	4a19      	ldr	r2, [pc, #100]	; (8002e7c <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1a:	9301      	str	r3, [sp, #4]
 8002e1c:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e1e:	9402      	str	r4, [sp, #8]
 8002e20:	6813      	ldr	r3, [r2, #0]
 8002e22:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e2a:	6013      	str	r3, [r2, #0]
 8002e2c:	6813      	ldr	r3, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e2e:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e34:	9302      	str	r3, [sp, #8]
 8002e36:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e3c:	2310      	movs	r3, #16
 8002e3e:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002e40:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002e42:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002e46:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002e48:	2304      	movs	r3, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e4a:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002e4c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e4e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002e50:	2307      	movs	r3, #7
 8002e52:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e54:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e56:	950e      	str	r5, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e58:	f7fe fcf4 	bl	8001844 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e5c:	230f      	movs	r3, #15
 8002e5e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e60:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e66:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e68:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e6a:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e6c:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e6e:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e70:	f7fe fe98 	bl	8001ba4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8002e74:	b015      	add	sp, #84	; 0x54
 8002e76:	bd30      	pop	{r4, r5, pc}
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	40007000 	.word	0x40007000

08002e80 <main>:
{
 8002e80:	b508      	push	{r3, lr}
  HAL_Init();
 8002e82:	f7fd fdc1 	bl	8000a08 <HAL_Init>
  SystemClock_Config();
 8002e86:	f7ff ffb1 	bl	8002dec <SystemClock_Config>
  MX_GPIO_Init();
 8002e8a:	f7ff ff11 	bl	8002cb0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002e8e:	f000 fa57 	bl	8003340 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8002e92:	f000 fa71 	bl	8003378 <MX_USART6_UART_Init>
  MX_NFC_Init();
 8002e96:	f7ff ff09 	bl	8002cac <MX_NFC_Init>
  RN4020_Init();
 8002e9a:	f000 f813 	bl	8002ec4 <RN4020_Init>
    RN4020_Process();
 8002e9e:	f000 f857 	bl	8002f50 <RN4020_Process>
  MX_NFC_Process();
 8002ea2:	f7ff fe89 	bl	8002bb8 <MX_NFC_Process>
 8002ea6:	e7fa      	b.n	8002e9e <main+0x1e>

08002ea8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8002ea8:	b510      	push	{r4, lr}
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, (uint16_t) len, 0xFFFFFFFF);
 8002eaa:	f04f 33ff 	mov.w	r3, #4294967295
int _write(int file, char *ptr, int len) {
 8002eae:	4614      	mov	r4, r2
  HAL_UART_Transmit(&huart2, (uint8_t *) ptr, (uint16_t) len, 0xFFFFFFFF);
 8002eb0:	4802      	ldr	r0, [pc, #8]	; (8002ebc <_write+0x14>)
 8002eb2:	b292      	uxth	r2, r2
 8002eb4:	f7ff f8ae 	bl	8002014 <HAL_UART_Transmit>
  return len;
}
 8002eb8:	4620      	mov	r0, r4
 8002eba:	bd10      	pop	{r4, pc}
 8002ebc:	20001890 	.word	0x20001890

08002ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ec0:	4770      	bx	lr
	...

08002ec4 <RN4020_Init>:

/**
 * Initialize interface to RN4020
 */
void RN4020_Init(void) {
  HAL_UART_Receive_IT(&huart6, &uart_rx_data, 1);
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	4902      	ldr	r1, [pc, #8]	; (8002ed0 <RN4020_Init+0xc>)
 8002ec8:	4802      	ldr	r0, [pc, #8]	; (8002ed4 <RN4020_Init+0x10>)
 8002eca:	f7ff b900 	b.w	80020ce <HAL_UART_Receive_IT>
 8002ece:	bf00      	nop
 8002ed0:	200017f8 	.word	0x200017f8
 8002ed4:	20001850 	.word	0x20001850

08002ed8 <sendData>:
}

/**
 * Send byte array (max. 20 bytes) to a BLE central via RN4020 module
 */
void sendData(uint8_t *data, int len) {
 8002ed8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002edc:	4607      	mov	r7, r0
 8002ede:	460c      	mov	r4, r1
  char ascii_hex_buf[2];

  strcpy(send_buf, NOTIFY_COMMAND);
 8002ee0:	4816      	ldr	r0, [pc, #88]	; (8002f3c <sendData+0x64>)
 8002ee2:	4917      	ldr	r1, [pc, #92]	; (8002f40 <sendData+0x68>)
 8002ee4:	4d17      	ldr	r5, [pc, #92]	; (8002f44 <sendData+0x6c>)
  for (int i = 0; i < len; i++) {
    sprintf(ascii_hex_buf, "%02x", data[i]);
 8002ee6:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8002f4c <sendData+0x74>
  strcpy(send_buf, NOTIFY_COMMAND);
 8002eea:	f000 fbcf 	bl	800368c <strcpy>
  for (int i = 0; i < len; i++) {
 8002eee:	463e      	mov	r6, r7
 8002ef0:	1bf3      	subs	r3, r6, r7
 8002ef2:	429c      	cmp	r4, r3
 8002ef4:	f105 0502 	add.w	r5, r5, #2
 8002ef8:	dc11      	bgt.n	8002f1e <sendData+0x46>
    send_buf[37+i*2] = ascii_hex_buf[0];
    send_buf[37+i*2+1] = ascii_hex_buf[1];
  }
  send_buf[37+len*2] = '\n';
 8002efa:	4910      	ldr	r1, [pc, #64]	; (8002f3c <sendData+0x64>)

  HAL_UART_Transmit(&huart6, (uint8_t *)send_buf, 37+len*2+1, 0xffff);
 8002efc:	4812      	ldr	r0, [pc, #72]	; (8002f48 <sendData+0x70>)
  send_buf[37+len*2] = '\n';
 8002efe:	eb01 0344 	add.w	r3, r1, r4, lsl #1
 8002f02:	220a      	movs	r2, #10
 8002f04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  HAL_UART_Transmit(&huart6, (uint8_t *)send_buf, 37+len*2+1, 0xffff);
 8002f08:	f104 0213 	add.w	r2, r4, #19
 8002f0c:	0052      	lsls	r2, r2, #1
 8002f0e:	b292      	uxth	r2, r2
 8002f10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f14:	f7ff f87e 	bl	8002014 <HAL_UART_Transmit>
}
 8002f18:	b002      	add	sp, #8
 8002f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sprintf(ascii_hex_buf, "%02x", data[i]);
 8002f1e:	f816 2b01 	ldrb.w	r2, [r6], #1
 8002f22:	4641      	mov	r1, r8
 8002f24:	a801      	add	r0, sp, #4
 8002f26:	f000 fb8d 	bl	8003644 <siprintf>
    send_buf[37+i*2] = ascii_hex_buf[0];
 8002f2a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002f2e:	f805 3c02 	strb.w	r3, [r5, #-2]
    send_buf[37+i*2+1] = ascii_hex_buf[1];
 8002f32:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002f36:	f805 3c01 	strb.w	r3, [r5, #-1]
 8002f3a:	e7d9      	b.n	8002ef0 <sendData+0x18>
 8002f3c:	20001794 	.word	0x20001794
 8002f40:	08004839 	.word	0x08004839
 8002f44:	200017b9 	.word	0x200017b9
 8002f48:	20001850 	.word	0x20001850
 8002f4c:	0800485f 	.word	0x0800485f

08002f50 <RN4020_Process>:

/**
 * Include this process in the infinite loop of main.c.
 */
void RN4020_Process(void) {
 8002f50:	b570      	push	{r4, r5, r6, lr}
  uint8_t data[20] = { 0 };
  if (command_received) {
 8002f52:	4d10      	ldr	r5, [pc, #64]	; (8002f94 <RN4020_Process+0x44>)
void RN4020_Process(void) {
 8002f54:	b086      	sub	sp, #24
  uint8_t data[20] = { 0 };
 8002f56:	2214      	movs	r2, #20
 8002f58:	2100      	movs	r1, #0
 8002f5a:	a801      	add	r0, sp, #4
 8002f5c:	f000 fb06 	bl	800356c <memset>
  if (command_received) {
 8002f60:	782b      	ldrb	r3, [r5, #0]
 8002f62:	b1ab      	cbz	r3, 8002f90 <RN4020_Process+0x40>
  data[len] = '\0';
 8002f64:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <RN4020_Process+0x48>)
 8002f66:	4c0d      	ldr	r4, [pc, #52]	; (8002f9c <RN4020_Process+0x4c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2600      	movs	r6, #0
  printf("%s\n", data);
 8002f6c:	4620      	mov	r0, r4
  data[len] = '\0';
 8002f6e:	551e      	strb	r6, [r3, r4]
  printf("%s\n", data);
 8002f70:	f000 fb60 	bl	8003634 <puts>
  uri_modify_request_handler((char *)data);
 8002f74:	4620      	mov	r0, r4
 8002f76:	f7ff fdbf 	bl	8002af8 <uri_modify_request_handler>
    /* ADD CODE HERE START */
    receiveData(data_buf, data_len);
    data[0] = cnt++;
 8002f7a:	4a09      	ldr	r2, [pc, #36]	; (8002fa0 <RN4020_Process+0x50>)
 8002f7c:	7813      	ldrb	r3, [r2, #0]
 8002f7e:	f88d 3004 	strb.w	r3, [sp, #4]
 8002f82:	1c59      	adds	r1, r3, #1
 8002f84:	7011      	strb	r1, [r2, #0]
    sendData(data, 1);
 8002f86:	a801      	add	r0, sp, #4
 8002f88:	2101      	movs	r1, #1
 8002f8a:	f7ff ffa5 	bl	8002ed8 <sendData>
    /* ADD CODE HERE END */
    command_received = false;
 8002f8e:	702e      	strb	r6, [r5, #0]
  }
}
 8002f90:	b006      	add	sp, #24
 8002f92:	bd70      	pop	{r4, r5, r6, pc}
 8002f94:	200006f6 	.word	0x200006f6
 8002f98:	20001790 	.word	0x20001790
 8002f9c:	20001770 	.word	0x20001770
 8002fa0:	200006f5 	.word	0x200006f5

08002fa4 <HAL_UART_RxCpltCallback>:

/**
 * Receive data from RN4020 via usart1.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8002fa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  static int idx = 0;
  static uint8_t uart_rx_buf[BUFSIZE];
  char ascii_hex_buf[3];
  if (!command_received) {
 8002fa8:	4a28      	ldr	r2, [pc, #160]	; (800304c <HAL_UART_RxCpltCallback+0xa8>)
 8002faa:	7813      	ldrb	r3, [r2, #0]
 8002fac:	4690      	mov	r8, r2
 8002fae:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8002fb2:	bb5b      	cbnz	r3, 800300c <HAL_UART_RxCpltCallback+0x68>
    if (uart_rx_data == '\n') {
 8002fb4:	4b26      	ldr	r3, [pc, #152]	; (8003050 <HAL_UART_RxCpltCallback+0xac>)
 8002fb6:	4e27      	ldr	r6, [pc, #156]	; (8003054 <HAL_UART_RxCpltCallback+0xb0>)
 8002fb8:	7819      	ldrb	r1, [r3, #0]
 8002fba:	4c27      	ldr	r4, [pc, #156]	; (8003058 <HAL_UART_RxCpltCallback+0xb4>)
      uart_rx_buf[idx] = '\0';
 8002fbc:	6832      	ldr	r2, [r6, #0]
    if (uart_rx_data == '\n') {
 8002fbe:	290a      	cmp	r1, #10
 8002fc0:	d13f      	bne.n	8003042 <HAL_UART_RxCpltCallback+0x9e>
      uart_rx_buf[idx] = '\0';
 8002fc2:	54a5      	strb	r5, [r4, r2]
      //printf("uart_rx_buf: %s\n", uart_rx_buf);
      // Receive NOTIFY in the form of "WV,XXXX,DDDD." from RN4020.
      if (uart_rx_buf[0] == 'W' && uart_rx_buf[1] == 'V' && uart_rx_buf[2] == ',') {
 8002fc4:	7821      	ldrb	r1, [r4, #0]
 8002fc6:	2957      	cmp	r1, #87	; 0x57
 8002fc8:	d119      	bne.n	8002ffe <HAL_UART_RxCpltCallback+0x5a>
 8002fca:	7861      	ldrb	r1, [r4, #1]
 8002fcc:	2956      	cmp	r1, #86	; 0x56
 8002fce:	d116      	bne.n	8002ffe <HAL_UART_RxCpltCallback+0x5a>
 8002fd0:	78a1      	ldrb	r1, [r4, #2]
 8002fd2:	292c      	cmp	r1, #44	; 0x2c
 8002fd4:	d113      	bne.n	8002ffe <HAL_UART_RxCpltCallback+0x5a>
        data_len = idx - 10;
 8002fd6:	4f21      	ldr	r7, [pc, #132]	; (800305c <HAL_UART_RxCpltCallback+0xb8>)
        // Convert ASCII HEX (XX) to uint8_t
        for (int i = 0; i < data_len / 2; i++) {
          ascii_hex_buf[0] = uart_rx_buf[8+i*2];
          ascii_hex_buf[1] = uart_rx_buf[8+i*2+1];
          ascii_hex_buf[2] = '\0';
          data_buf[i] = (uint8_t)strtol(ascii_hex_buf, NULL, 16);
 8002fd8:	f8df b088 	ldr.w	fp, [pc, #136]	; 8003064 <HAL_UART_RxCpltCallback+0xc0>
        data_len = idx - 10;
 8002fdc:	3a0a      	subs	r2, #10
 8002fde:	603a      	str	r2, [r7, #0]
 8002fe0:	3408      	adds	r4, #8
        for (int i = 0; i < data_len / 2; i++) {
 8002fe2:	f04f 0902 	mov.w	r9, #2
          ascii_hex_buf[2] = '\0';
 8002fe6:	46aa      	mov	sl, r5
        for (int i = 0; i < data_len / 2; i++) {
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	fb93 f3f9 	sdiv	r3, r3, r9
 8002fee:	429d      	cmp	r5, r3
 8002ff0:	f104 0402 	add.w	r4, r4, #2
 8002ff4:	db12      	blt.n	800301c <HAL_UART_RxCpltCallback+0x78>
        }
        data_len = data_len/2;
 8002ff6:	603b      	str	r3, [r7, #0]
        command_received = true;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	f888 3000 	strb.w	r3, [r8]
      }
      idx = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	6033      	str	r3, [r6, #0]
    } else {
      uart_rx_buf[idx++] = uart_rx_data;
    }
    if (idx >= BUFSIZE) idx = 0;
 8003002:	6833      	ldr	r3, [r6, #0]
 8003004:	2b3f      	cmp	r3, #63	; 0x3f
 8003006:	bf84      	itt	hi
 8003008:	2300      	movhi	r3, #0
 800300a:	6033      	strhi	r3, [r6, #0]
  }
  HAL_UART_Receive_IT(&huart6, &uart_rx_data, 1);
 800300c:	2201      	movs	r2, #1
 800300e:	4910      	ldr	r1, [pc, #64]	; (8003050 <HAL_UART_RxCpltCallback+0xac>)
 8003010:	4813      	ldr	r0, [pc, #76]	; (8003060 <HAL_UART_RxCpltCallback+0xbc>)
 8003012:	f7ff f85c 	bl	80020ce <HAL_UART_Receive_IT>
}
 8003016:	b003      	add	sp, #12
 8003018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          ascii_hex_buf[0] = uart_rx_buf[8+i*2];
 800301c:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8003020:	f88d 3004 	strb.w	r3, [sp, #4]
          data_buf[i] = (uint8_t)strtol(ascii_hex_buf, NULL, 16);
 8003024:	2210      	movs	r2, #16
          ascii_hex_buf[1] = uart_rx_buf[8+i*2+1];
 8003026:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800302a:	f88d 3005 	strb.w	r3, [sp, #5]
          data_buf[i] = (uint8_t)strtol(ascii_hex_buf, NULL, 16);
 800302e:	2100      	movs	r1, #0
 8003030:	a801      	add	r0, sp, #4
          ascii_hex_buf[2] = '\0';
 8003032:	f88d a006 	strb.w	sl, [sp, #6]
          data_buf[i] = (uint8_t)strtol(ascii_hex_buf, NULL, 16);
 8003036:	f000 fbb1 	bl	800379c <strtol>
 800303a:	f80b 0005 	strb.w	r0, [fp, r5]
        for (int i = 0; i < data_len / 2; i++) {
 800303e:	3501      	adds	r5, #1
 8003040:	e7d2      	b.n	8002fe8 <HAL_UART_RxCpltCallback+0x44>
      uart_rx_buf[idx++] = uart_rx_data;
 8003042:	1c50      	adds	r0, r2, #1
 8003044:	6030      	str	r0, [r6, #0]
 8003046:	54a1      	strb	r1, [r4, r2]
 8003048:	e7db      	b.n	8003002 <HAL_UART_RxCpltCallback+0x5e>
 800304a:	bf00      	nop
 800304c:	200006f6 	.word	0x200006f6
 8003050:	200017f8 	.word	0x200017f8
 8003054:	200006f8 	.word	0x200006f8
 8003058:	200006fc 	.word	0x200006fc
 800305c:	20001790 	.word	0x20001790
 8003060:	20001850 	.word	0x20001850
 8003064:	20001770 	.word	0x20001770

08003068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003068:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800306a:	4b0e      	ldr	r3, [pc, #56]	; (80030a4 <HAL_MspInit+0x3c>)
 800306c:	2100      	movs	r1, #0
 800306e:	9100      	str	r1, [sp, #0]
 8003070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003072:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003076:	645a      	str	r2, [r3, #68]	; 0x44
 8003078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800307a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800307e:	9200      	str	r2, [sp, #0]
 8003080:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003082:	9101      	str	r1, [sp, #4]
 8003084:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003086:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800308a:	641a      	str	r2, [r3, #64]	; 0x40
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003092:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003094:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8003096:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003098:	f7fd fcf6 	bl	8000a88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800309c:	b003      	add	sp, #12
 800309e:	f85d fb04 	ldr.w	pc, [sp], #4
 80030a2:	bf00      	nop
 80030a4:	40023800 	.word	0x40023800

080030a8 <NMI_Handler>:
 80030a8:	4770      	bx	lr

080030aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030aa:	e7fe      	b.n	80030aa <HardFault_Handler>

080030ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030ac:	e7fe      	b.n	80030ac <MemManage_Handler>

080030ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030ae:	e7fe      	b.n	80030ae <BusFault_Handler>

080030b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030b0:	e7fe      	b.n	80030b0 <UsageFault_Handler>

080030b2 <SVC_Handler>:
 80030b2:	4770      	bx	lr

080030b4 <DebugMon_Handler>:
 80030b4:	4770      	bx	lr

080030b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030b6:	4770      	bx	lr

080030b8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030b8:	f7fd bcc0 	b.w	8000a3c <HAL_IncTick>

080030bc <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 80030bc:	4801      	ldr	r0, [pc, #4]	; (80030c4 <EXTI9_5_IRQHandler+0x8>)
 80030be:	f7fd bd5f 	b.w	8000b80 <HAL_EXTI_IRQHandler>
 80030c2:	bf00      	nop
 80030c4:	20000034 	.word	0x20000034

080030c8 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80030c8:	4801      	ldr	r0, [pc, #4]	; (80030d0 <USART2_IRQHandler+0x8>)
 80030ca:	f7ff b867 	b.w	800219c <HAL_UART_IRQHandler>
 80030ce:	bf00      	nop
 80030d0:	20001890 	.word	0x20001890

080030d4 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80030d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80030d8:	f7fd beb0 	b.w	8000e3c <HAL_GPIO_EXTI_IRQHandler>

080030dc <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80030dc:	4801      	ldr	r0, [pc, #4]	; (80030e4 <USART6_IRQHandler+0x8>)
 80030de:	f7ff b85d 	b.w	800219c <HAL_UART_IRQHandler>
 80030e2:	bf00      	nop
 80030e4:	20001850 	.word	0x20001850

080030e8 <BSP_I2C1_DeInit>:
  */
int32_t BSP_I2C1_DeInit(void) 
{
  int32_t ret = BSP_ERROR_NONE;
  
  if (I2C1InitCounter > 0)
 80030e8:	4a0d      	ldr	r2, [pc, #52]	; (8003120 <BSP_I2C1_DeInit+0x38>)
{
 80030ea:	b508      	push	{r3, lr}
  if (I2C1InitCounter > 0)
 80030ec:	6813      	ldr	r3, [r2, #0]
 80030ee:	b90b      	cbnz	r3, 80030f4 <BSP_I2C1_DeInit+0xc>
  int32_t ret = BSP_ERROR_NONE;
 80030f0:	2000      	movs	r0, #0
 80030f2:	bd08      	pop	{r3, pc}
  {       
    if (--I2C1InitCounter == 0)
 80030f4:	3b01      	subs	r3, #1
 80030f6:	6013      	str	r3, [r2, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1f9      	bne.n	80030f0 <BSP_I2C1_DeInit+0x8>
{
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80030fc:	4a09      	ldr	r2, [pc, #36]	; (8003124 <BSP_I2C1_DeInit+0x3c>)
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 80030fe:	480a      	ldr	r0, [pc, #40]	; (8003128 <BSP_I2C1_DeInit+0x40>)
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003100:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003102:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003106:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8003108:	f44f 7140 	mov.w	r1, #768	; 0x300
 800310c:	f7fd fe1a 	bl	8000d44 <HAL_GPIO_DeInit>
  		if (HAL_I2C_DeInit(&hi2c1) != HAL_OK) 
 8003110:	4806      	ldr	r0, [pc, #24]	; (800312c <BSP_I2C1_DeInit+0x44>)
 8003112:	f7fe f916 	bl	8001342 <HAL_I2C_DeInit>
 8003116:	2800      	cmp	r0, #0
 8003118:	d0ea      	beq.n	80030f0 <BSP_I2C1_DeInit+0x8>
    		ret = BSP_ERROR_BUS_FAILURE;
 800311a:	f06f 0007 	mvn.w	r0, #7
}
 800311e:	bd08      	pop	{r3, pc}
 8003120:	2000073c 	.word	0x2000073c
 8003124:	40023800 	.word	0x40023800
 8003128:	40020400 	.word	0x40020400
 800312c:	200017fc 	.word	0x200017fc

08003130 <BSP_I2C1_IsReady>:
{
 8003130:	b508      	push	{r3, lr}
  if (HAL_I2C_IsDeviceReady(&hi2c1, DevAddr, Trials, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8003132:	460a      	mov	r2, r1
 8003134:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003138:	4601      	mov	r1, r0
 800313a:	4804      	ldr	r0, [pc, #16]	; (800314c <BSP_I2C1_IsReady+0x1c>)
 800313c:	f7fe fab6 	bl	80016ac <HAL_I2C_IsDeviceReady>
 8003140:	2800      	cmp	r0, #0
}
 8003142:	bf14      	ite	ne
 8003144:	f06f 0002 	mvnne.w	r0, #2
 8003148:	2000      	moveq	r0, #0
 800314a:	bd08      	pop	{r3, pc}
 800314c:	200017fc 	.word	0x200017fc

08003150 <BSP_I2C1_WriteReg16>:
{
 8003150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8003152:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8003156:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
 800315a:	460a      	mov	r2, r1
 800315c:	2310      	movs	r3, #16
 800315e:	4601      	mov	r1, r0
 8003160:	4807      	ldr	r0, [pc, #28]	; (8003180 <BSP_I2C1_WriteReg16+0x30>)
 8003162:	f7fe f907 	bl	8001374 <HAL_I2C_Mem_Write>
 8003166:	b140      	cbz	r0, 800317a <BSP_I2C1_WriteReg16+0x2a>
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)    
 8003168:	4805      	ldr	r0, [pc, #20]	; (8003180 <BSP_I2C1_WriteReg16+0x30>)
 800316a:	f7fe fb4a 	bl	8001802 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800316e:	2804      	cmp	r0, #4
 8003170:	bf0c      	ite	eq
 8003172:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8003176:	f06f 0003 	mvnne.w	r0, #3
}
 800317a:	b004      	add	sp, #16
 800317c:	bd10      	pop	{r4, pc}
 800317e:	bf00      	nop
 8003180:	200017fc 	.word	0x200017fc

08003184 <BSP_I2C1_ReadReg16>:
{
 8003184:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8003186:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 800318a:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
 800318e:	460a      	mov	r2, r1
 8003190:	2310      	movs	r3, #16
 8003192:	4601      	mov	r1, r0
 8003194:	4807      	ldr	r0, [pc, #28]	; (80031b4 <BSP_I2C1_ReadReg16+0x30>)
 8003196:	f7fe f97d 	bl	8001494 <HAL_I2C_Mem_Read>
 800319a:	b140      	cbz	r0, 80031ae <BSP_I2C1_ReadReg16+0x2a>
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 800319c:	4805      	ldr	r0, [pc, #20]	; (80031b4 <BSP_I2C1_ReadReg16+0x30>)
 800319e:	f7fe fb30 	bl	8001802 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80031a2:	2804      	cmp	r0, #4
 80031a4:	bf14      	ite	ne
 80031a6:	f06f 0065 	mvnne.w	r0, #101	; 0x65
 80031aa:	f06f 0003 	mvneq.w	r0, #3
}
 80031ae:	b004      	add	sp, #16
 80031b0:	bd10      	pop	{r4, pc}
 80031b2:	bf00      	nop
 80031b4:	200017fc 	.word	0x200017fc

080031b8 <MX_I2C1_Init>:
  hi2c->Init.ClockSpeed = 400000;
 80031b8:	f8df c02c 	ldr.w	ip, [pc, #44]	; 80031e8 <MX_I2C1_Init+0x30>
 80031bc:	4a09      	ldr	r2, [pc, #36]	; (80031e4 <MX_I2C1_Init+0x2c>)
{
 80031be:	b508      	push	{r3, lr}
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  hi2c->Init.ClockSpeed = 400000;
 80031c4:	e880 1004 	stmia.w	r0, {r2, ip}
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 80031c8:	2200      	movs	r2, #0
 80031ca:	6082      	str	r2, [r0, #8]
  hi2c->Init.OwnAddress1 = 0;
 80031cc:	60c2      	str	r2, [r0, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031ce:	6101      	str	r1, [r0, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80031d0:	6142      	str	r2, [r0, #20]
  hi2c->Init.OwnAddress2 = 0;
 80031d2:	6182      	str	r2, [r0, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031d4:	61c2      	str	r2, [r0, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80031d6:	6202      	str	r2, [r0, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80031d8:	f7fe f80e 	bl	80011f8 <HAL_I2C_Init>
}
 80031dc:	3000      	adds	r0, #0
 80031de:	bf18      	it	ne
 80031e0:	2001      	movne	r0, #1
 80031e2:	bd08      	pop	{r3, pc}
 80031e4:	40005400 	.word	0x40005400
 80031e8:	00061a80 	.word	0x00061a80

080031ec <BSP_I2C1_Init>:
{
 80031ec:	b570      	push	{r4, r5, r6, lr}
  if(I2C1InitCounter++ == 0)
 80031ee:	4a22      	ldr	r2, [pc, #136]	; (8003278 <BSP_I2C1_Init+0x8c>)
  hi2c1.Instance  = I2C1;
 80031f0:	4d22      	ldr	r5, [pc, #136]	; (800327c <BSP_I2C1_Init+0x90>)
 80031f2:	4b23      	ldr	r3, [pc, #140]	; (8003280 <BSP_I2C1_Init+0x94>)
 80031f4:	602b      	str	r3, [r5, #0]
  if(I2C1InitCounter++ == 0)
 80031f6:	6813      	ldr	r3, [r2, #0]
 80031f8:	1c59      	adds	r1, r3, #1
{
 80031fa:	b088      	sub	sp, #32
  if(I2C1InitCounter++ == 0)
 80031fc:	6011      	str	r1, [r2, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d137      	bne.n	8003272 <BSP_I2C1_Init+0x86>
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8003202:	4628      	mov	r0, r5
 8003204:	f7fe fafa 	bl	80017fc <HAL_I2C_GetState>
 8003208:	4606      	mov	r6, r0
 800320a:	2800      	cmp	r0, #0
 800320c:	d131      	bne.n	8003272 <BSP_I2C1_Init+0x86>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800320e:	4c1d      	ldr	r4, [pc, #116]	; (8003284 <BSP_I2C1_Init+0x98>)
 8003210:	9001      	str	r0, [sp, #4]
 8003212:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003214:	481c      	ldr	r0, [pc, #112]	; (8003288 <BSP_I2C1_Init+0x9c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003216:	f043 0302 	orr.w	r3, r3, #2
 800321a:	6323      	str	r3, [r4, #48]	; 0x30
 800321c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	9301      	str	r3, [sp, #4]
 8003224:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003226:	f44f 7340 	mov.w	r3, #768	; 0x300
 800322a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800322c:	2312      	movs	r3, #18
 800322e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003230:	2301      	movs	r3, #1
 8003232:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003234:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003236:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003238:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800323a:	2304      	movs	r3, #4
 800323c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800323e:	f7fd fcab 	bl	8000b98 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003242:	9602      	str	r6, [sp, #8]
 8003244:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003246:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800324a:	6423      	str	r3, [r4, #64]	; 0x40
 800324c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800324e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003252:	9302      	str	r3, [sp, #8]
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8003254:	4628      	mov	r0, r5
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003256:	9b02      	ldr	r3, [sp, #8]
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8003258:	f7ff ffae 	bl	80031b8 <MX_I2C1_Init>
 800325c:	4601      	mov	r1, r0
 800325e:	b118      	cbz	r0, 8003268 <BSP_I2C1_Init+0x7c>
      		ret = BSP_ERROR_BUS_FAILURE;
 8003260:	f06f 0007 	mvn.w	r0, #7
}
 8003264:	b008      	add	sp, #32
 8003266:	bd70      	pop	{r4, r5, r6, pc}
    	else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) 
 8003268:	4628      	mov	r0, r5
 800326a:	f7fe facc 	bl	8001806 <HAL_I2CEx_ConfigAnalogFilter>
 800326e:	2800      	cmp	r0, #0
 8003270:	d1f6      	bne.n	8003260 <BSP_I2C1_Init+0x74>
      		ret = BSP_ERROR_NONE;
 8003272:	2000      	movs	r0, #0
  return ret;
 8003274:	e7f6      	b.n	8003264 <BSP_I2C1_Init+0x78>
 8003276:	bf00      	nop
 8003278:	2000073c 	.word	0x2000073c
 800327c:	200017fc 	.word	0x200017fc
 8003280:	40005400 	.word	0x40005400
 8003284:	40023800 	.word	0x40023800
 8003288:	40020400 	.word	0x40020400

0800328c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800328c:	b570      	push	{r4, r5, r6, lr}
 800328e:	460e      	mov	r6, r1
 8003290:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003292:	460c      	mov	r4, r1
 8003294:	1ba3      	subs	r3, r4, r6
 8003296:	429d      	cmp	r5, r3
 8003298:	dc01      	bgt.n	800329e <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800329a:	4628      	mov	r0, r5
 800329c:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800329e:	f3af 8000 	nop.w
 80032a2:	f804 0b01 	strb.w	r0, [r4], #1
 80032a6:	e7f5      	b.n	8003294 <_read+0x8>

080032a8 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80032a8:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80032aa:	4b0a      	ldr	r3, [pc, #40]	; (80032d4 <_sbrk+0x2c>)
 80032ac:	6819      	ldr	r1, [r3, #0]
{
 80032ae:	4602      	mov	r2, r0
	if (heap_end == 0)
 80032b0:	b909      	cbnz	r1, 80032b6 <_sbrk+0xe>
		heap_end = &end;
 80032b2:	4909      	ldr	r1, [pc, #36]	; (80032d8 <_sbrk+0x30>)
 80032b4:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80032b6:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80032b8:	4669      	mov	r1, sp
 80032ba:	4402      	add	r2, r0
 80032bc:	428a      	cmp	r2, r1
 80032be:	d906      	bls.n	80032ce <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80032c0:	f000 f910 	bl	80034e4 <__errno>
 80032c4:	230c      	movs	r3, #12
 80032c6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80032c8:	f04f 30ff 	mov.w	r0, #4294967295
 80032cc:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80032ce:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80032d0:	bd08      	pop	{r3, pc}
 80032d2:	bf00      	nop
 80032d4:	20000740 	.word	0x20000740
 80032d8:	200018d4 	.word	0x200018d4

080032dc <_close>:

int _close(int file)
{
	return -1;
}
 80032dc:	f04f 30ff 	mov.w	r0, #4294967295
 80032e0:	4770      	bx	lr

080032e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80032e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032e6:	604b      	str	r3, [r1, #4]
	return 0;
}
 80032e8:	2000      	movs	r0, #0
 80032ea:	4770      	bx	lr

080032ec <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80032ec:	2001      	movs	r0, #1
 80032ee:	4770      	bx	lr

080032f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80032f0:	2000      	movs	r0, #0
 80032f2:	4770      	bx	lr

080032f4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032f4:	490f      	ldr	r1, [pc, #60]	; (8003334 <SystemInit+0x40>)
 80032f6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80032fa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003302:	4b0d      	ldr	r3, [pc, #52]	; (8003338 <SystemInit+0x44>)
 8003304:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003306:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003308:	f042 0201 	orr.w	r2, r2, #1
 800330c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800330e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003316:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800331a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800331c:	4a07      	ldr	r2, [pc, #28]	; (800333c <SystemInit+0x48>)
 800331e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003326:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003328:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800332a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800332e:	608b      	str	r3, [r1, #8]
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	e000ed00 	.word	0xe000ed00
 8003338:	40023800 	.word	0x40023800
 800333c:	24003010 	.word	0x24003010

08003340 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003340:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8003342:	480b      	ldr	r0, [pc, #44]	; (8003370 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8003344:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <MX_USART2_UART_Init+0x34>)
 8003346:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800334a:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800334e:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003350:	2300      	movs	r3, #0
 8003352:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003354:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003356:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003358:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800335a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800335c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800335e:	f7fe fe2b 	bl	8001fb8 <HAL_UART_Init>
 8003362:	b118      	cbz	r0, 800336c <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8003364:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003368:	f7ff bdaa 	b.w	8002ec0 <Error_Handler>
 800336c:	bd08      	pop	{r3, pc}
 800336e:	bf00      	nop
 8003370:	20001890 	.word	0x20001890
 8003374:	40004400 	.word	0x40004400

08003378 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003378:	b508      	push	{r3, lr}

  huart6.Instance = USART6;
 800337a:	480b      	ldr	r0, [pc, #44]	; (80033a8 <MX_USART6_UART_Init+0x30>)
  huart6.Init.BaudRate = 115200;
 800337c:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <MX_USART6_UART_Init+0x34>)
 800337e:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8003382:	e880 4008 	stmia.w	r0, {r3, lr}
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003386:	220c      	movs	r2, #12
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003388:	2300      	movs	r3, #0
 800338a:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800338c:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800338e:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003390:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003392:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003394:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003396:	f7fe fe0f 	bl	8001fb8 <HAL_UART_Init>
 800339a:	b118      	cbz	r0, 80033a4 <MX_USART6_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 800339c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80033a0:	f7ff bd8e 	b.w	8002ec0 <Error_Handler>
 80033a4:	bd08      	pop	{r3, pc}
 80033a6:	bf00      	nop
 80033a8:	20001850 	.word	0x20001850
 80033ac:	40011400 	.word	0x40011400

080033b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80033b0:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b2:	2214      	movs	r2, #20
{
 80033b4:	b08a      	sub	sp, #40	; 0x28
 80033b6:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b8:	2100      	movs	r1, #0
 80033ba:	eb0d 0002 	add.w	r0, sp, r2
 80033be:	f000 f8d5 	bl	800356c <memset>
  if(uartHandle->Instance==USART2)
 80033c2:	6823      	ldr	r3, [r4, #0]
 80033c4:	4a2d      	ldr	r2, [pc, #180]	; (800347c <HAL_UART_MspInit+0xcc>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d129      	bne.n	800341e <HAL_UART_MspInit+0x6e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80033ca:	4b2d      	ldr	r3, [pc, #180]	; (8003480 <HAL_UART_MspInit+0xd0>)
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033cc:	482d      	ldr	r0, [pc, #180]	; (8003484 <HAL_UART_MspInit+0xd4>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80033ce:	2400      	movs	r4, #0
 80033d0:	9401      	str	r4, [sp, #4]
 80033d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033d4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80033d8:	641a      	str	r2, [r3, #64]	; 0x40
 80033da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033dc:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80033e0:	9201      	str	r2, [sp, #4]
 80033e2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e4:	9402      	str	r4, [sp, #8]
 80033e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033e8:	f042 0201 	orr.w	r2, r2, #1
 80033ec:	631a      	str	r2, [r3, #48]	; 0x30
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	9302      	str	r3, [sp, #8]
 80033f6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80033f8:	230c      	movs	r3, #12
 80033fa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fc:	2302      	movs	r3, #2
 80033fe:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003400:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003402:	2307      	movs	r3, #7
 8003404:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003406:	f7fd fbc7 	bl	8000b98 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800340a:	2026      	movs	r0, #38	; 0x26
 800340c:	4622      	mov	r2, r4
 800340e:	4621      	mov	r1, r4
 8003410:	f7fd fb4c 	bl	8000aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003414:	2026      	movs	r0, #38	; 0x26
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003416:	f7fd fb7d 	bl	8000b14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800341a:	b00a      	add	sp, #40	; 0x28
 800341c:	bd10      	pop	{r4, pc}
  else if(uartHandle->Instance==USART6)
 800341e:	4a1a      	ldr	r2, [pc, #104]	; (8003488 <HAL_UART_MspInit+0xd8>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d1fa      	bne.n	800341a <HAL_UART_MspInit+0x6a>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003424:	4b16      	ldr	r3, [pc, #88]	; (8003480 <HAL_UART_MspInit+0xd0>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003426:	4819      	ldr	r0, [pc, #100]	; (800348c <HAL_UART_MspInit+0xdc>)
    __HAL_RCC_USART6_CLK_ENABLE();
 8003428:	2400      	movs	r4, #0
 800342a:	9403      	str	r4, [sp, #12]
 800342c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800342e:	f042 0220 	orr.w	r2, r2, #32
 8003432:	645a      	str	r2, [r3, #68]	; 0x44
 8003434:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003436:	f002 0220 	and.w	r2, r2, #32
 800343a:	9203      	str	r2, [sp, #12]
 800343c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800343e:	9404      	str	r4, [sp, #16]
 8003440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003442:	f042 0204 	orr.w	r2, r2, #4
 8003446:	631a      	str	r2, [r3, #48]	; 0x30
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	f003 0304 	and.w	r3, r3, #4
 800344e:	9304      	str	r3, [sp, #16]
 8003450:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003452:	23c0      	movs	r3, #192	; 0xc0
 8003454:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003456:	2302      	movs	r3, #2
 8003458:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800345a:	2301      	movs	r3, #1
 800345c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800345e:	2303      	movs	r3, #3
 8003460:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003462:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003464:	2308      	movs	r3, #8
 8003466:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003468:	f7fd fb96 	bl	8000b98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800346c:	2047      	movs	r0, #71	; 0x47
 800346e:	4622      	mov	r2, r4
 8003470:	4621      	mov	r1, r4
 8003472:	f7fd fb1b 	bl	8000aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003476:	2047      	movs	r0, #71	; 0x47
 8003478:	e7cd      	b.n	8003416 <HAL_UART_MspInit+0x66>
 800347a:	bf00      	nop
 800347c:	40004400 	.word	0x40004400
 8003480:	40023800 	.word	0x40023800
 8003484:	40020000 	.word	0x40020000
 8003488:	40011400 	.word	0x40011400
 800348c:	40020800 	.word	0x40020800

08003490 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003490:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003494:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003496:	e003      	b.n	80034a0 <LoopCopyDataInit>

08003498 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003498:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800349a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800349c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800349e:	3104      	adds	r1, #4

080034a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80034a0:	480b      	ldr	r0, [pc, #44]	; (80034d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80034a2:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80034a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80034a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80034a8:	d3f6      	bcc.n	8003498 <CopyDataInit>
  ldr  r2, =_sbss
 80034aa:	4a0b      	ldr	r2, [pc, #44]	; (80034d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80034ac:	e002      	b.n	80034b4 <LoopFillZerobss>

080034ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80034ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80034b0:	f842 3b04 	str.w	r3, [r2], #4

080034b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80034b4:	4b09      	ldr	r3, [pc, #36]	; (80034dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80034b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80034b8:	d3f9      	bcc.n	80034ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80034ba:	f7ff ff1b 	bl	80032f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034be:	f000 f817 	bl	80034f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034c2:	f7ff fcdd 	bl	8002e80 <main>
  bx  lr    
 80034c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80034c8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80034cc:	08004a30 	.word	0x08004a30
  ldr  r0, =_sdata
 80034d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80034d4:	20000220 	.word	0x20000220
  ldr  r2, =_sbss
 80034d8:	20000220 	.word	0x20000220
  ldr  r3, = _ebss
 80034dc:	200018d4 	.word	0x200018d4

080034e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034e0:	e7fe      	b.n	80034e0 <ADC_IRQHandler>
	...

080034e4 <__errno>:
 80034e4:	4b01      	ldr	r3, [pc, #4]	; (80034ec <__errno+0x8>)
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	20000050 	.word	0x20000050

080034f0 <__libc_init_array>:
 80034f0:	b570      	push	{r4, r5, r6, lr}
 80034f2:	4e0d      	ldr	r6, [pc, #52]	; (8003528 <__libc_init_array+0x38>)
 80034f4:	4c0d      	ldr	r4, [pc, #52]	; (800352c <__libc_init_array+0x3c>)
 80034f6:	1ba4      	subs	r4, r4, r6
 80034f8:	10a4      	asrs	r4, r4, #2
 80034fa:	2500      	movs	r5, #0
 80034fc:	42a5      	cmp	r5, r4
 80034fe:	d109      	bne.n	8003514 <__libc_init_array+0x24>
 8003500:	4e0b      	ldr	r6, [pc, #44]	; (8003530 <__libc_init_array+0x40>)
 8003502:	4c0c      	ldr	r4, [pc, #48]	; (8003534 <__libc_init_array+0x44>)
 8003504:	f001 f8bc 	bl	8004680 <_init>
 8003508:	1ba4      	subs	r4, r4, r6
 800350a:	10a4      	asrs	r4, r4, #2
 800350c:	2500      	movs	r5, #0
 800350e:	42a5      	cmp	r5, r4
 8003510:	d105      	bne.n	800351e <__libc_init_array+0x2e>
 8003512:	bd70      	pop	{r4, r5, r6, pc}
 8003514:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003518:	4798      	blx	r3
 800351a:	3501      	adds	r5, #1
 800351c:	e7ee      	b.n	80034fc <__libc_init_array+0xc>
 800351e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003522:	4798      	blx	r3
 8003524:	3501      	adds	r5, #1
 8003526:	e7f2      	b.n	800350e <__libc_init_array+0x1e>
 8003528:	08004a28 	.word	0x08004a28
 800352c:	08004a28 	.word	0x08004a28
 8003530:	08004a28 	.word	0x08004a28
 8003534:	08004a2c 	.word	0x08004a2c

08003538 <memcmp>:
 8003538:	b510      	push	{r4, lr}
 800353a:	3901      	subs	r1, #1
 800353c:	4402      	add	r2, r0
 800353e:	4290      	cmp	r0, r2
 8003540:	d101      	bne.n	8003546 <memcmp+0xe>
 8003542:	2000      	movs	r0, #0
 8003544:	bd10      	pop	{r4, pc}
 8003546:	f810 3b01 	ldrb.w	r3, [r0], #1
 800354a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800354e:	42a3      	cmp	r3, r4
 8003550:	d0f5      	beq.n	800353e <memcmp+0x6>
 8003552:	1b18      	subs	r0, r3, r4
 8003554:	bd10      	pop	{r4, pc}

08003556 <memcpy>:
 8003556:	b510      	push	{r4, lr}
 8003558:	1e43      	subs	r3, r0, #1
 800355a:	440a      	add	r2, r1
 800355c:	4291      	cmp	r1, r2
 800355e:	d100      	bne.n	8003562 <memcpy+0xc>
 8003560:	bd10      	pop	{r4, pc}
 8003562:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003566:	f803 4f01 	strb.w	r4, [r3, #1]!
 800356a:	e7f7      	b.n	800355c <memcpy+0x6>

0800356c <memset>:
 800356c:	4402      	add	r2, r0
 800356e:	4603      	mov	r3, r0
 8003570:	4293      	cmp	r3, r2
 8003572:	d100      	bne.n	8003576 <memset+0xa>
 8003574:	4770      	bx	lr
 8003576:	f803 1b01 	strb.w	r1, [r3], #1
 800357a:	e7f9      	b.n	8003570 <memset+0x4>

0800357c <_puts_r>:
 800357c:	b570      	push	{r4, r5, r6, lr}
 800357e:	460e      	mov	r6, r1
 8003580:	4605      	mov	r5, r0
 8003582:	b118      	cbz	r0, 800358c <_puts_r+0x10>
 8003584:	6983      	ldr	r3, [r0, #24]
 8003586:	b90b      	cbnz	r3, 800358c <_puts_r+0x10>
 8003588:	f000 fad0 	bl	8003b2c <__sinit>
 800358c:	69ab      	ldr	r3, [r5, #24]
 800358e:	68ac      	ldr	r4, [r5, #8]
 8003590:	b913      	cbnz	r3, 8003598 <_puts_r+0x1c>
 8003592:	4628      	mov	r0, r5
 8003594:	f000 faca 	bl	8003b2c <__sinit>
 8003598:	4b23      	ldr	r3, [pc, #140]	; (8003628 <_puts_r+0xac>)
 800359a:	429c      	cmp	r4, r3
 800359c:	d117      	bne.n	80035ce <_puts_r+0x52>
 800359e:	686c      	ldr	r4, [r5, #4]
 80035a0:	89a3      	ldrh	r3, [r4, #12]
 80035a2:	071b      	lsls	r3, r3, #28
 80035a4:	d51d      	bpl.n	80035e2 <_puts_r+0x66>
 80035a6:	6923      	ldr	r3, [r4, #16]
 80035a8:	b1db      	cbz	r3, 80035e2 <_puts_r+0x66>
 80035aa:	3e01      	subs	r6, #1
 80035ac:	68a3      	ldr	r3, [r4, #8]
 80035ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80035b2:	3b01      	subs	r3, #1
 80035b4:	60a3      	str	r3, [r4, #8]
 80035b6:	b9e9      	cbnz	r1, 80035f4 <_puts_r+0x78>
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	da2e      	bge.n	800361a <_puts_r+0x9e>
 80035bc:	4622      	mov	r2, r4
 80035be:	210a      	movs	r1, #10
 80035c0:	4628      	mov	r0, r5
 80035c2:	f000 f901 	bl	80037c8 <__swbuf_r>
 80035c6:	3001      	adds	r0, #1
 80035c8:	d011      	beq.n	80035ee <_puts_r+0x72>
 80035ca:	200a      	movs	r0, #10
 80035cc:	bd70      	pop	{r4, r5, r6, pc}
 80035ce:	4b17      	ldr	r3, [pc, #92]	; (800362c <_puts_r+0xb0>)
 80035d0:	429c      	cmp	r4, r3
 80035d2:	d101      	bne.n	80035d8 <_puts_r+0x5c>
 80035d4:	68ac      	ldr	r4, [r5, #8]
 80035d6:	e7e3      	b.n	80035a0 <_puts_r+0x24>
 80035d8:	4b15      	ldr	r3, [pc, #84]	; (8003630 <_puts_r+0xb4>)
 80035da:	429c      	cmp	r4, r3
 80035dc:	bf08      	it	eq
 80035de:	68ec      	ldreq	r4, [r5, #12]
 80035e0:	e7de      	b.n	80035a0 <_puts_r+0x24>
 80035e2:	4621      	mov	r1, r4
 80035e4:	4628      	mov	r0, r5
 80035e6:	f000 f941 	bl	800386c <__swsetup_r>
 80035ea:	2800      	cmp	r0, #0
 80035ec:	d0dd      	beq.n	80035aa <_puts_r+0x2e>
 80035ee:	f04f 30ff 	mov.w	r0, #4294967295
 80035f2:	bd70      	pop	{r4, r5, r6, pc}
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	da04      	bge.n	8003602 <_puts_r+0x86>
 80035f8:	69a2      	ldr	r2, [r4, #24]
 80035fa:	4293      	cmp	r3, r2
 80035fc:	db06      	blt.n	800360c <_puts_r+0x90>
 80035fe:	290a      	cmp	r1, #10
 8003600:	d004      	beq.n	800360c <_puts_r+0x90>
 8003602:	6823      	ldr	r3, [r4, #0]
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	6022      	str	r2, [r4, #0]
 8003608:	7019      	strb	r1, [r3, #0]
 800360a:	e7cf      	b.n	80035ac <_puts_r+0x30>
 800360c:	4622      	mov	r2, r4
 800360e:	4628      	mov	r0, r5
 8003610:	f000 f8da 	bl	80037c8 <__swbuf_r>
 8003614:	3001      	adds	r0, #1
 8003616:	d1c9      	bne.n	80035ac <_puts_r+0x30>
 8003618:	e7e9      	b.n	80035ee <_puts_r+0x72>
 800361a:	6823      	ldr	r3, [r4, #0]
 800361c:	200a      	movs	r0, #10
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	6022      	str	r2, [r4, #0]
 8003622:	7018      	strb	r0, [r3, #0]
 8003624:	bd70      	pop	{r4, r5, r6, pc}
 8003626:	bf00      	nop
 8003628:	080048a0 	.word	0x080048a0
 800362c:	080048c0 	.word	0x080048c0
 8003630:	08004880 	.word	0x08004880

08003634 <puts>:
 8003634:	4b02      	ldr	r3, [pc, #8]	; (8003640 <puts+0xc>)
 8003636:	4601      	mov	r1, r0
 8003638:	6818      	ldr	r0, [r3, #0]
 800363a:	f7ff bf9f 	b.w	800357c <_puts_r>
 800363e:	bf00      	nop
 8003640:	20000050 	.word	0x20000050

08003644 <siprintf>:
 8003644:	b40e      	push	{r1, r2, r3}
 8003646:	b500      	push	{lr}
 8003648:	b09c      	sub	sp, #112	; 0x70
 800364a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800364e:	ab1d      	add	r3, sp, #116	; 0x74
 8003650:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003654:	9002      	str	r0, [sp, #8]
 8003656:	9006      	str	r0, [sp, #24]
 8003658:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800365c:	480a      	ldr	r0, [pc, #40]	; (8003688 <siprintf+0x44>)
 800365e:	9104      	str	r1, [sp, #16]
 8003660:	9107      	str	r1, [sp, #28]
 8003662:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003666:	f853 2b04 	ldr.w	r2, [r3], #4
 800366a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800366e:	6800      	ldr	r0, [r0, #0]
 8003670:	9301      	str	r3, [sp, #4]
 8003672:	a902      	add	r1, sp, #8
 8003674:	f000 fc66 	bl	8003f44 <_svfiprintf_r>
 8003678:	9b02      	ldr	r3, [sp, #8]
 800367a:	2200      	movs	r2, #0
 800367c:	701a      	strb	r2, [r3, #0]
 800367e:	b01c      	add	sp, #112	; 0x70
 8003680:	f85d eb04 	ldr.w	lr, [sp], #4
 8003684:	b003      	add	sp, #12
 8003686:	4770      	bx	lr
 8003688:	20000050 	.word	0x20000050

0800368c <strcpy>:
 800368c:	4603      	mov	r3, r0
 800368e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003692:	f803 2b01 	strb.w	r2, [r3], #1
 8003696:	2a00      	cmp	r2, #0
 8003698:	d1f9      	bne.n	800368e <strcpy+0x2>
 800369a:	4770      	bx	lr

0800369c <_strtol_l.isra.0>:
 800369c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036a0:	4680      	mov	r8, r0
 80036a2:	4689      	mov	r9, r1
 80036a4:	4692      	mov	sl, r2
 80036a6:	461f      	mov	r7, r3
 80036a8:	468b      	mov	fp, r1
 80036aa:	465d      	mov	r5, fp
 80036ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 80036ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80036b2:	f000 fac5 	bl	8003c40 <__locale_ctype_ptr_l>
 80036b6:	4420      	add	r0, r4
 80036b8:	7846      	ldrb	r6, [r0, #1]
 80036ba:	f016 0608 	ands.w	r6, r6, #8
 80036be:	d10b      	bne.n	80036d8 <_strtol_l.isra.0+0x3c>
 80036c0:	2c2d      	cmp	r4, #45	; 0x2d
 80036c2:	d10b      	bne.n	80036dc <_strtol_l.isra.0+0x40>
 80036c4:	782c      	ldrb	r4, [r5, #0]
 80036c6:	2601      	movs	r6, #1
 80036c8:	f10b 0502 	add.w	r5, fp, #2
 80036cc:	b167      	cbz	r7, 80036e8 <_strtol_l.isra.0+0x4c>
 80036ce:	2f10      	cmp	r7, #16
 80036d0:	d114      	bne.n	80036fc <_strtol_l.isra.0+0x60>
 80036d2:	2c30      	cmp	r4, #48	; 0x30
 80036d4:	d00a      	beq.n	80036ec <_strtol_l.isra.0+0x50>
 80036d6:	e011      	b.n	80036fc <_strtol_l.isra.0+0x60>
 80036d8:	46ab      	mov	fp, r5
 80036da:	e7e6      	b.n	80036aa <_strtol_l.isra.0+0xe>
 80036dc:	2c2b      	cmp	r4, #43	; 0x2b
 80036de:	bf04      	itt	eq
 80036e0:	782c      	ldrbeq	r4, [r5, #0]
 80036e2:	f10b 0502 	addeq.w	r5, fp, #2
 80036e6:	e7f1      	b.n	80036cc <_strtol_l.isra.0+0x30>
 80036e8:	2c30      	cmp	r4, #48	; 0x30
 80036ea:	d127      	bne.n	800373c <_strtol_l.isra.0+0xa0>
 80036ec:	782b      	ldrb	r3, [r5, #0]
 80036ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80036f2:	2b58      	cmp	r3, #88	; 0x58
 80036f4:	d14b      	bne.n	800378e <_strtol_l.isra.0+0xf2>
 80036f6:	786c      	ldrb	r4, [r5, #1]
 80036f8:	2710      	movs	r7, #16
 80036fa:	3502      	adds	r5, #2
 80036fc:	2e00      	cmp	r6, #0
 80036fe:	bf0c      	ite	eq
 8003700:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8003704:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8003708:	2200      	movs	r2, #0
 800370a:	fbb1 fef7 	udiv	lr, r1, r7
 800370e:	4610      	mov	r0, r2
 8003710:	fb07 1c1e 	mls	ip, r7, lr, r1
 8003714:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003718:	2b09      	cmp	r3, #9
 800371a:	d811      	bhi.n	8003740 <_strtol_l.isra.0+0xa4>
 800371c:	461c      	mov	r4, r3
 800371e:	42a7      	cmp	r7, r4
 8003720:	dd1d      	ble.n	800375e <_strtol_l.isra.0+0xc2>
 8003722:	1c53      	adds	r3, r2, #1
 8003724:	d007      	beq.n	8003736 <_strtol_l.isra.0+0x9a>
 8003726:	4586      	cmp	lr, r0
 8003728:	d316      	bcc.n	8003758 <_strtol_l.isra.0+0xbc>
 800372a:	d101      	bne.n	8003730 <_strtol_l.isra.0+0x94>
 800372c:	45a4      	cmp	ip, r4
 800372e:	db13      	blt.n	8003758 <_strtol_l.isra.0+0xbc>
 8003730:	fb00 4007 	mla	r0, r0, r7, r4
 8003734:	2201      	movs	r2, #1
 8003736:	f815 4b01 	ldrb.w	r4, [r5], #1
 800373a:	e7eb      	b.n	8003714 <_strtol_l.isra.0+0x78>
 800373c:	270a      	movs	r7, #10
 800373e:	e7dd      	b.n	80036fc <_strtol_l.isra.0+0x60>
 8003740:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003744:	2b19      	cmp	r3, #25
 8003746:	d801      	bhi.n	800374c <_strtol_l.isra.0+0xb0>
 8003748:	3c37      	subs	r4, #55	; 0x37
 800374a:	e7e8      	b.n	800371e <_strtol_l.isra.0+0x82>
 800374c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003750:	2b19      	cmp	r3, #25
 8003752:	d804      	bhi.n	800375e <_strtol_l.isra.0+0xc2>
 8003754:	3c57      	subs	r4, #87	; 0x57
 8003756:	e7e2      	b.n	800371e <_strtol_l.isra.0+0x82>
 8003758:	f04f 32ff 	mov.w	r2, #4294967295
 800375c:	e7eb      	b.n	8003736 <_strtol_l.isra.0+0x9a>
 800375e:	1c53      	adds	r3, r2, #1
 8003760:	d108      	bne.n	8003774 <_strtol_l.isra.0+0xd8>
 8003762:	2322      	movs	r3, #34	; 0x22
 8003764:	f8c8 3000 	str.w	r3, [r8]
 8003768:	4608      	mov	r0, r1
 800376a:	f1ba 0f00 	cmp.w	sl, #0
 800376e:	d107      	bne.n	8003780 <_strtol_l.isra.0+0xe4>
 8003770:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003774:	b106      	cbz	r6, 8003778 <_strtol_l.isra.0+0xdc>
 8003776:	4240      	negs	r0, r0
 8003778:	f1ba 0f00 	cmp.w	sl, #0
 800377c:	d00c      	beq.n	8003798 <_strtol_l.isra.0+0xfc>
 800377e:	b122      	cbz	r2, 800378a <_strtol_l.isra.0+0xee>
 8003780:	3d01      	subs	r5, #1
 8003782:	f8ca 5000 	str.w	r5, [sl]
 8003786:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800378a:	464d      	mov	r5, r9
 800378c:	e7f9      	b.n	8003782 <_strtol_l.isra.0+0xe6>
 800378e:	2430      	movs	r4, #48	; 0x30
 8003790:	2f00      	cmp	r7, #0
 8003792:	d1b3      	bne.n	80036fc <_strtol_l.isra.0+0x60>
 8003794:	2708      	movs	r7, #8
 8003796:	e7b1      	b.n	80036fc <_strtol_l.isra.0+0x60>
 8003798:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800379c <strtol>:
 800379c:	4b08      	ldr	r3, [pc, #32]	; (80037c0 <strtol+0x24>)
 800379e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80037a0:	681c      	ldr	r4, [r3, #0]
 80037a2:	4d08      	ldr	r5, [pc, #32]	; (80037c4 <strtol+0x28>)
 80037a4:	6a23      	ldr	r3, [r4, #32]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	bf08      	it	eq
 80037aa:	462b      	moveq	r3, r5
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	4613      	mov	r3, r2
 80037b0:	460a      	mov	r2, r1
 80037b2:	4601      	mov	r1, r0
 80037b4:	4620      	mov	r0, r4
 80037b6:	f7ff ff71 	bl	800369c <_strtol_l.isra.0>
 80037ba:	b003      	add	sp, #12
 80037bc:	bd30      	pop	{r4, r5, pc}
 80037be:	bf00      	nop
 80037c0:	20000050 	.word	0x20000050
 80037c4:	200000b4 	.word	0x200000b4

080037c8 <__swbuf_r>:
 80037c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ca:	460e      	mov	r6, r1
 80037cc:	4614      	mov	r4, r2
 80037ce:	4605      	mov	r5, r0
 80037d0:	b118      	cbz	r0, 80037da <__swbuf_r+0x12>
 80037d2:	6983      	ldr	r3, [r0, #24]
 80037d4:	b90b      	cbnz	r3, 80037da <__swbuf_r+0x12>
 80037d6:	f000 f9a9 	bl	8003b2c <__sinit>
 80037da:	4b21      	ldr	r3, [pc, #132]	; (8003860 <__swbuf_r+0x98>)
 80037dc:	429c      	cmp	r4, r3
 80037de:	d12a      	bne.n	8003836 <__swbuf_r+0x6e>
 80037e0:	686c      	ldr	r4, [r5, #4]
 80037e2:	69a3      	ldr	r3, [r4, #24]
 80037e4:	60a3      	str	r3, [r4, #8]
 80037e6:	89a3      	ldrh	r3, [r4, #12]
 80037e8:	071a      	lsls	r2, r3, #28
 80037ea:	d52e      	bpl.n	800384a <__swbuf_r+0x82>
 80037ec:	6923      	ldr	r3, [r4, #16]
 80037ee:	b363      	cbz	r3, 800384a <__swbuf_r+0x82>
 80037f0:	6923      	ldr	r3, [r4, #16]
 80037f2:	6820      	ldr	r0, [r4, #0]
 80037f4:	1ac0      	subs	r0, r0, r3
 80037f6:	6963      	ldr	r3, [r4, #20]
 80037f8:	b2f6      	uxtb	r6, r6
 80037fa:	4298      	cmp	r0, r3
 80037fc:	4637      	mov	r7, r6
 80037fe:	db04      	blt.n	800380a <__swbuf_r+0x42>
 8003800:	4621      	mov	r1, r4
 8003802:	4628      	mov	r0, r5
 8003804:	f000 f928 	bl	8003a58 <_fflush_r>
 8003808:	bb28      	cbnz	r0, 8003856 <__swbuf_r+0x8e>
 800380a:	68a3      	ldr	r3, [r4, #8]
 800380c:	3b01      	subs	r3, #1
 800380e:	60a3      	str	r3, [r4, #8]
 8003810:	6823      	ldr	r3, [r4, #0]
 8003812:	1c5a      	adds	r2, r3, #1
 8003814:	6022      	str	r2, [r4, #0]
 8003816:	701e      	strb	r6, [r3, #0]
 8003818:	6963      	ldr	r3, [r4, #20]
 800381a:	3001      	adds	r0, #1
 800381c:	4298      	cmp	r0, r3
 800381e:	d004      	beq.n	800382a <__swbuf_r+0x62>
 8003820:	89a3      	ldrh	r3, [r4, #12]
 8003822:	07db      	lsls	r3, r3, #31
 8003824:	d519      	bpl.n	800385a <__swbuf_r+0x92>
 8003826:	2e0a      	cmp	r6, #10
 8003828:	d117      	bne.n	800385a <__swbuf_r+0x92>
 800382a:	4621      	mov	r1, r4
 800382c:	4628      	mov	r0, r5
 800382e:	f000 f913 	bl	8003a58 <_fflush_r>
 8003832:	b190      	cbz	r0, 800385a <__swbuf_r+0x92>
 8003834:	e00f      	b.n	8003856 <__swbuf_r+0x8e>
 8003836:	4b0b      	ldr	r3, [pc, #44]	; (8003864 <__swbuf_r+0x9c>)
 8003838:	429c      	cmp	r4, r3
 800383a:	d101      	bne.n	8003840 <__swbuf_r+0x78>
 800383c:	68ac      	ldr	r4, [r5, #8]
 800383e:	e7d0      	b.n	80037e2 <__swbuf_r+0x1a>
 8003840:	4b09      	ldr	r3, [pc, #36]	; (8003868 <__swbuf_r+0xa0>)
 8003842:	429c      	cmp	r4, r3
 8003844:	bf08      	it	eq
 8003846:	68ec      	ldreq	r4, [r5, #12]
 8003848:	e7cb      	b.n	80037e2 <__swbuf_r+0x1a>
 800384a:	4621      	mov	r1, r4
 800384c:	4628      	mov	r0, r5
 800384e:	f000 f80d 	bl	800386c <__swsetup_r>
 8003852:	2800      	cmp	r0, #0
 8003854:	d0cc      	beq.n	80037f0 <__swbuf_r+0x28>
 8003856:	f04f 37ff 	mov.w	r7, #4294967295
 800385a:	4638      	mov	r0, r7
 800385c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800385e:	bf00      	nop
 8003860:	080048a0 	.word	0x080048a0
 8003864:	080048c0 	.word	0x080048c0
 8003868:	08004880 	.word	0x08004880

0800386c <__swsetup_r>:
 800386c:	4b32      	ldr	r3, [pc, #200]	; (8003938 <__swsetup_r+0xcc>)
 800386e:	b570      	push	{r4, r5, r6, lr}
 8003870:	681d      	ldr	r5, [r3, #0]
 8003872:	4606      	mov	r6, r0
 8003874:	460c      	mov	r4, r1
 8003876:	b125      	cbz	r5, 8003882 <__swsetup_r+0x16>
 8003878:	69ab      	ldr	r3, [r5, #24]
 800387a:	b913      	cbnz	r3, 8003882 <__swsetup_r+0x16>
 800387c:	4628      	mov	r0, r5
 800387e:	f000 f955 	bl	8003b2c <__sinit>
 8003882:	4b2e      	ldr	r3, [pc, #184]	; (800393c <__swsetup_r+0xd0>)
 8003884:	429c      	cmp	r4, r3
 8003886:	d10f      	bne.n	80038a8 <__swsetup_r+0x3c>
 8003888:	686c      	ldr	r4, [r5, #4]
 800388a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800388e:	b29a      	uxth	r2, r3
 8003890:	0715      	lsls	r5, r2, #28
 8003892:	d42c      	bmi.n	80038ee <__swsetup_r+0x82>
 8003894:	06d0      	lsls	r0, r2, #27
 8003896:	d411      	bmi.n	80038bc <__swsetup_r+0x50>
 8003898:	2209      	movs	r2, #9
 800389a:	6032      	str	r2, [r6, #0]
 800389c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038a0:	81a3      	strh	r3, [r4, #12]
 80038a2:	f04f 30ff 	mov.w	r0, #4294967295
 80038a6:	bd70      	pop	{r4, r5, r6, pc}
 80038a8:	4b25      	ldr	r3, [pc, #148]	; (8003940 <__swsetup_r+0xd4>)
 80038aa:	429c      	cmp	r4, r3
 80038ac:	d101      	bne.n	80038b2 <__swsetup_r+0x46>
 80038ae:	68ac      	ldr	r4, [r5, #8]
 80038b0:	e7eb      	b.n	800388a <__swsetup_r+0x1e>
 80038b2:	4b24      	ldr	r3, [pc, #144]	; (8003944 <__swsetup_r+0xd8>)
 80038b4:	429c      	cmp	r4, r3
 80038b6:	bf08      	it	eq
 80038b8:	68ec      	ldreq	r4, [r5, #12]
 80038ba:	e7e6      	b.n	800388a <__swsetup_r+0x1e>
 80038bc:	0751      	lsls	r1, r2, #29
 80038be:	d512      	bpl.n	80038e6 <__swsetup_r+0x7a>
 80038c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038c2:	b141      	cbz	r1, 80038d6 <__swsetup_r+0x6a>
 80038c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038c8:	4299      	cmp	r1, r3
 80038ca:	d002      	beq.n	80038d2 <__swsetup_r+0x66>
 80038cc:	4630      	mov	r0, r6
 80038ce:	f000 fa31 	bl	8003d34 <_free_r>
 80038d2:	2300      	movs	r3, #0
 80038d4:	6363      	str	r3, [r4, #52]	; 0x34
 80038d6:	89a3      	ldrh	r3, [r4, #12]
 80038d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80038dc:	81a3      	strh	r3, [r4, #12]
 80038de:	2300      	movs	r3, #0
 80038e0:	6063      	str	r3, [r4, #4]
 80038e2:	6923      	ldr	r3, [r4, #16]
 80038e4:	6023      	str	r3, [r4, #0]
 80038e6:	89a3      	ldrh	r3, [r4, #12]
 80038e8:	f043 0308 	orr.w	r3, r3, #8
 80038ec:	81a3      	strh	r3, [r4, #12]
 80038ee:	6923      	ldr	r3, [r4, #16]
 80038f0:	b94b      	cbnz	r3, 8003906 <__swsetup_r+0x9a>
 80038f2:	89a3      	ldrh	r3, [r4, #12]
 80038f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80038f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038fc:	d003      	beq.n	8003906 <__swsetup_r+0x9a>
 80038fe:	4621      	mov	r1, r4
 8003900:	4630      	mov	r0, r6
 8003902:	f000 f9c5 	bl	8003c90 <__smakebuf_r>
 8003906:	89a2      	ldrh	r2, [r4, #12]
 8003908:	f012 0301 	ands.w	r3, r2, #1
 800390c:	d00c      	beq.n	8003928 <__swsetup_r+0xbc>
 800390e:	2300      	movs	r3, #0
 8003910:	60a3      	str	r3, [r4, #8]
 8003912:	6963      	ldr	r3, [r4, #20]
 8003914:	425b      	negs	r3, r3
 8003916:	61a3      	str	r3, [r4, #24]
 8003918:	6923      	ldr	r3, [r4, #16]
 800391a:	b953      	cbnz	r3, 8003932 <__swsetup_r+0xc6>
 800391c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003920:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003924:	d1ba      	bne.n	800389c <__swsetup_r+0x30>
 8003926:	bd70      	pop	{r4, r5, r6, pc}
 8003928:	0792      	lsls	r2, r2, #30
 800392a:	bf58      	it	pl
 800392c:	6963      	ldrpl	r3, [r4, #20]
 800392e:	60a3      	str	r3, [r4, #8]
 8003930:	e7f2      	b.n	8003918 <__swsetup_r+0xac>
 8003932:	2000      	movs	r0, #0
 8003934:	e7f7      	b.n	8003926 <__swsetup_r+0xba>
 8003936:	bf00      	nop
 8003938:	20000050 	.word	0x20000050
 800393c:	080048a0 	.word	0x080048a0
 8003940:	080048c0 	.word	0x080048c0
 8003944:	08004880 	.word	0x08004880

08003948 <__sflush_r>:
 8003948:	898a      	ldrh	r2, [r1, #12]
 800394a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800394e:	4605      	mov	r5, r0
 8003950:	0710      	lsls	r0, r2, #28
 8003952:	460c      	mov	r4, r1
 8003954:	d45a      	bmi.n	8003a0c <__sflush_r+0xc4>
 8003956:	684b      	ldr	r3, [r1, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	dc05      	bgt.n	8003968 <__sflush_r+0x20>
 800395c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800395e:	2b00      	cmp	r3, #0
 8003960:	dc02      	bgt.n	8003968 <__sflush_r+0x20>
 8003962:	2000      	movs	r0, #0
 8003964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003968:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800396a:	2e00      	cmp	r6, #0
 800396c:	d0f9      	beq.n	8003962 <__sflush_r+0x1a>
 800396e:	2300      	movs	r3, #0
 8003970:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003974:	682f      	ldr	r7, [r5, #0]
 8003976:	602b      	str	r3, [r5, #0]
 8003978:	d033      	beq.n	80039e2 <__sflush_r+0x9a>
 800397a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800397c:	89a3      	ldrh	r3, [r4, #12]
 800397e:	075a      	lsls	r2, r3, #29
 8003980:	d505      	bpl.n	800398e <__sflush_r+0x46>
 8003982:	6863      	ldr	r3, [r4, #4]
 8003984:	1ac0      	subs	r0, r0, r3
 8003986:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003988:	b10b      	cbz	r3, 800398e <__sflush_r+0x46>
 800398a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800398c:	1ac0      	subs	r0, r0, r3
 800398e:	2300      	movs	r3, #0
 8003990:	4602      	mov	r2, r0
 8003992:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003994:	6a21      	ldr	r1, [r4, #32]
 8003996:	4628      	mov	r0, r5
 8003998:	47b0      	blx	r6
 800399a:	1c43      	adds	r3, r0, #1
 800399c:	89a3      	ldrh	r3, [r4, #12]
 800399e:	d106      	bne.n	80039ae <__sflush_r+0x66>
 80039a0:	6829      	ldr	r1, [r5, #0]
 80039a2:	291d      	cmp	r1, #29
 80039a4:	d84b      	bhi.n	8003a3e <__sflush_r+0xf6>
 80039a6:	4a2b      	ldr	r2, [pc, #172]	; (8003a54 <__sflush_r+0x10c>)
 80039a8:	40ca      	lsrs	r2, r1
 80039aa:	07d6      	lsls	r6, r2, #31
 80039ac:	d547      	bpl.n	8003a3e <__sflush_r+0xf6>
 80039ae:	2200      	movs	r2, #0
 80039b0:	6062      	str	r2, [r4, #4]
 80039b2:	04d9      	lsls	r1, r3, #19
 80039b4:	6922      	ldr	r2, [r4, #16]
 80039b6:	6022      	str	r2, [r4, #0]
 80039b8:	d504      	bpl.n	80039c4 <__sflush_r+0x7c>
 80039ba:	1c42      	adds	r2, r0, #1
 80039bc:	d101      	bne.n	80039c2 <__sflush_r+0x7a>
 80039be:	682b      	ldr	r3, [r5, #0]
 80039c0:	b903      	cbnz	r3, 80039c4 <__sflush_r+0x7c>
 80039c2:	6560      	str	r0, [r4, #84]	; 0x54
 80039c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039c6:	602f      	str	r7, [r5, #0]
 80039c8:	2900      	cmp	r1, #0
 80039ca:	d0ca      	beq.n	8003962 <__sflush_r+0x1a>
 80039cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80039d0:	4299      	cmp	r1, r3
 80039d2:	d002      	beq.n	80039da <__sflush_r+0x92>
 80039d4:	4628      	mov	r0, r5
 80039d6:	f000 f9ad 	bl	8003d34 <_free_r>
 80039da:	2000      	movs	r0, #0
 80039dc:	6360      	str	r0, [r4, #52]	; 0x34
 80039de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039e2:	6a21      	ldr	r1, [r4, #32]
 80039e4:	2301      	movs	r3, #1
 80039e6:	4628      	mov	r0, r5
 80039e8:	47b0      	blx	r6
 80039ea:	1c41      	adds	r1, r0, #1
 80039ec:	d1c6      	bne.n	800397c <__sflush_r+0x34>
 80039ee:	682b      	ldr	r3, [r5, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0c3      	beq.n	800397c <__sflush_r+0x34>
 80039f4:	2b1d      	cmp	r3, #29
 80039f6:	d001      	beq.n	80039fc <__sflush_r+0xb4>
 80039f8:	2b16      	cmp	r3, #22
 80039fa:	d101      	bne.n	8003a00 <__sflush_r+0xb8>
 80039fc:	602f      	str	r7, [r5, #0]
 80039fe:	e7b0      	b.n	8003962 <__sflush_r+0x1a>
 8003a00:	89a3      	ldrh	r3, [r4, #12]
 8003a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a06:	81a3      	strh	r3, [r4, #12]
 8003a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a0c:	690f      	ldr	r7, [r1, #16]
 8003a0e:	2f00      	cmp	r7, #0
 8003a10:	d0a7      	beq.n	8003962 <__sflush_r+0x1a>
 8003a12:	0793      	lsls	r3, r2, #30
 8003a14:	680e      	ldr	r6, [r1, #0]
 8003a16:	bf08      	it	eq
 8003a18:	694b      	ldreq	r3, [r1, #20]
 8003a1a:	600f      	str	r7, [r1, #0]
 8003a1c:	bf18      	it	ne
 8003a1e:	2300      	movne	r3, #0
 8003a20:	eba6 0807 	sub.w	r8, r6, r7
 8003a24:	608b      	str	r3, [r1, #8]
 8003a26:	f1b8 0f00 	cmp.w	r8, #0
 8003a2a:	dd9a      	ble.n	8003962 <__sflush_r+0x1a>
 8003a2c:	4643      	mov	r3, r8
 8003a2e:	463a      	mov	r2, r7
 8003a30:	6a21      	ldr	r1, [r4, #32]
 8003a32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003a34:	4628      	mov	r0, r5
 8003a36:	47b0      	blx	r6
 8003a38:	2800      	cmp	r0, #0
 8003a3a:	dc07      	bgt.n	8003a4c <__sflush_r+0x104>
 8003a3c:	89a3      	ldrh	r3, [r4, #12]
 8003a3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a42:	81a3      	strh	r3, [r4, #12]
 8003a44:	f04f 30ff 	mov.w	r0, #4294967295
 8003a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a4c:	4407      	add	r7, r0
 8003a4e:	eba8 0800 	sub.w	r8, r8, r0
 8003a52:	e7e8      	b.n	8003a26 <__sflush_r+0xde>
 8003a54:	20400001 	.word	0x20400001

08003a58 <_fflush_r>:
 8003a58:	b538      	push	{r3, r4, r5, lr}
 8003a5a:	690b      	ldr	r3, [r1, #16]
 8003a5c:	4605      	mov	r5, r0
 8003a5e:	460c      	mov	r4, r1
 8003a60:	b1db      	cbz	r3, 8003a9a <_fflush_r+0x42>
 8003a62:	b118      	cbz	r0, 8003a6c <_fflush_r+0x14>
 8003a64:	6983      	ldr	r3, [r0, #24]
 8003a66:	b90b      	cbnz	r3, 8003a6c <_fflush_r+0x14>
 8003a68:	f000 f860 	bl	8003b2c <__sinit>
 8003a6c:	4b0c      	ldr	r3, [pc, #48]	; (8003aa0 <_fflush_r+0x48>)
 8003a6e:	429c      	cmp	r4, r3
 8003a70:	d109      	bne.n	8003a86 <_fflush_r+0x2e>
 8003a72:	686c      	ldr	r4, [r5, #4]
 8003a74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a78:	b17b      	cbz	r3, 8003a9a <_fflush_r+0x42>
 8003a7a:	4621      	mov	r1, r4
 8003a7c:	4628      	mov	r0, r5
 8003a7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a82:	f7ff bf61 	b.w	8003948 <__sflush_r>
 8003a86:	4b07      	ldr	r3, [pc, #28]	; (8003aa4 <_fflush_r+0x4c>)
 8003a88:	429c      	cmp	r4, r3
 8003a8a:	d101      	bne.n	8003a90 <_fflush_r+0x38>
 8003a8c:	68ac      	ldr	r4, [r5, #8]
 8003a8e:	e7f1      	b.n	8003a74 <_fflush_r+0x1c>
 8003a90:	4b05      	ldr	r3, [pc, #20]	; (8003aa8 <_fflush_r+0x50>)
 8003a92:	429c      	cmp	r4, r3
 8003a94:	bf08      	it	eq
 8003a96:	68ec      	ldreq	r4, [r5, #12]
 8003a98:	e7ec      	b.n	8003a74 <_fflush_r+0x1c>
 8003a9a:	2000      	movs	r0, #0
 8003a9c:	bd38      	pop	{r3, r4, r5, pc}
 8003a9e:	bf00      	nop
 8003aa0:	080048a0 	.word	0x080048a0
 8003aa4:	080048c0 	.word	0x080048c0
 8003aa8:	08004880 	.word	0x08004880

08003aac <_cleanup_r>:
 8003aac:	4901      	ldr	r1, [pc, #4]	; (8003ab4 <_cleanup_r+0x8>)
 8003aae:	f000 b8a9 	b.w	8003c04 <_fwalk_reent>
 8003ab2:	bf00      	nop
 8003ab4:	08003a59 	.word	0x08003a59

08003ab8 <std.isra.0>:
 8003ab8:	2300      	movs	r3, #0
 8003aba:	b510      	push	{r4, lr}
 8003abc:	4604      	mov	r4, r0
 8003abe:	6003      	str	r3, [r0, #0]
 8003ac0:	6043      	str	r3, [r0, #4]
 8003ac2:	6083      	str	r3, [r0, #8]
 8003ac4:	8181      	strh	r1, [r0, #12]
 8003ac6:	6643      	str	r3, [r0, #100]	; 0x64
 8003ac8:	81c2      	strh	r2, [r0, #14]
 8003aca:	6103      	str	r3, [r0, #16]
 8003acc:	6143      	str	r3, [r0, #20]
 8003ace:	6183      	str	r3, [r0, #24]
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	2208      	movs	r2, #8
 8003ad4:	305c      	adds	r0, #92	; 0x5c
 8003ad6:	f7ff fd49 	bl	800356c <memset>
 8003ada:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <std.isra.0+0x38>)
 8003adc:	6263      	str	r3, [r4, #36]	; 0x24
 8003ade:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <std.isra.0+0x3c>)
 8003ae0:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ae2:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <std.isra.0+0x40>)
 8003ae4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ae6:	4b05      	ldr	r3, [pc, #20]	; (8003afc <std.isra.0+0x44>)
 8003ae8:	6224      	str	r4, [r4, #32]
 8003aea:	6323      	str	r3, [r4, #48]	; 0x30
 8003aec:	bd10      	pop	{r4, pc}
 8003aee:	bf00      	nop
 8003af0:	08004479 	.word	0x08004479
 8003af4:	0800449b 	.word	0x0800449b
 8003af8:	080044d3 	.word	0x080044d3
 8003afc:	080044f7 	.word	0x080044f7

08003b00 <__sfmoreglue>:
 8003b00:	b570      	push	{r4, r5, r6, lr}
 8003b02:	1e4a      	subs	r2, r1, #1
 8003b04:	2568      	movs	r5, #104	; 0x68
 8003b06:	4355      	muls	r5, r2
 8003b08:	460e      	mov	r6, r1
 8003b0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003b0e:	f000 f95f 	bl	8003dd0 <_malloc_r>
 8003b12:	4604      	mov	r4, r0
 8003b14:	b140      	cbz	r0, 8003b28 <__sfmoreglue+0x28>
 8003b16:	2100      	movs	r1, #0
 8003b18:	e880 0042 	stmia.w	r0, {r1, r6}
 8003b1c:	300c      	adds	r0, #12
 8003b1e:	60a0      	str	r0, [r4, #8]
 8003b20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003b24:	f7ff fd22 	bl	800356c <memset>
 8003b28:	4620      	mov	r0, r4
 8003b2a:	bd70      	pop	{r4, r5, r6, pc}

08003b2c <__sinit>:
 8003b2c:	6983      	ldr	r3, [r0, #24]
 8003b2e:	b510      	push	{r4, lr}
 8003b30:	4604      	mov	r4, r0
 8003b32:	bb33      	cbnz	r3, 8003b82 <__sinit+0x56>
 8003b34:	6483      	str	r3, [r0, #72]	; 0x48
 8003b36:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003b38:	6503      	str	r3, [r0, #80]	; 0x50
 8003b3a:	4b12      	ldr	r3, [pc, #72]	; (8003b84 <__sinit+0x58>)
 8003b3c:	4a12      	ldr	r2, [pc, #72]	; (8003b88 <__sinit+0x5c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6282      	str	r2, [r0, #40]	; 0x28
 8003b42:	4298      	cmp	r0, r3
 8003b44:	bf04      	itt	eq
 8003b46:	2301      	moveq	r3, #1
 8003b48:	6183      	streq	r3, [r0, #24]
 8003b4a:	f000 f81f 	bl	8003b8c <__sfp>
 8003b4e:	6060      	str	r0, [r4, #4]
 8003b50:	4620      	mov	r0, r4
 8003b52:	f000 f81b 	bl	8003b8c <__sfp>
 8003b56:	60a0      	str	r0, [r4, #8]
 8003b58:	4620      	mov	r0, r4
 8003b5a:	f000 f817 	bl	8003b8c <__sfp>
 8003b5e:	2200      	movs	r2, #0
 8003b60:	60e0      	str	r0, [r4, #12]
 8003b62:	2104      	movs	r1, #4
 8003b64:	6860      	ldr	r0, [r4, #4]
 8003b66:	f7ff ffa7 	bl	8003ab8 <std.isra.0>
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	2109      	movs	r1, #9
 8003b6e:	68a0      	ldr	r0, [r4, #8]
 8003b70:	f7ff ffa2 	bl	8003ab8 <std.isra.0>
 8003b74:	2202      	movs	r2, #2
 8003b76:	2112      	movs	r1, #18
 8003b78:	68e0      	ldr	r0, [r4, #12]
 8003b7a:	f7ff ff9d 	bl	8003ab8 <std.isra.0>
 8003b7e:	2301      	movs	r3, #1
 8003b80:	61a3      	str	r3, [r4, #24]
 8003b82:	bd10      	pop	{r4, pc}
 8003b84:	0800487c 	.word	0x0800487c
 8003b88:	08003aad 	.word	0x08003aad

08003b8c <__sfp>:
 8003b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8e:	4b1c      	ldr	r3, [pc, #112]	; (8003c00 <__sfp+0x74>)
 8003b90:	681e      	ldr	r6, [r3, #0]
 8003b92:	69b3      	ldr	r3, [r6, #24]
 8003b94:	4607      	mov	r7, r0
 8003b96:	b913      	cbnz	r3, 8003b9e <__sfp+0x12>
 8003b98:	4630      	mov	r0, r6
 8003b9a:	f7ff ffc7 	bl	8003b2c <__sinit>
 8003b9e:	3648      	adds	r6, #72	; 0x48
 8003ba0:	68b4      	ldr	r4, [r6, #8]
 8003ba2:	6873      	ldr	r3, [r6, #4]
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	d503      	bpl.n	8003bb0 <__sfp+0x24>
 8003ba8:	6833      	ldr	r3, [r6, #0]
 8003baa:	b133      	cbz	r3, 8003bba <__sfp+0x2e>
 8003bac:	6836      	ldr	r6, [r6, #0]
 8003bae:	e7f7      	b.n	8003ba0 <__sfp+0x14>
 8003bb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003bb4:	b16d      	cbz	r5, 8003bd2 <__sfp+0x46>
 8003bb6:	3468      	adds	r4, #104	; 0x68
 8003bb8:	e7f4      	b.n	8003ba4 <__sfp+0x18>
 8003bba:	2104      	movs	r1, #4
 8003bbc:	4638      	mov	r0, r7
 8003bbe:	f7ff ff9f 	bl	8003b00 <__sfmoreglue>
 8003bc2:	6030      	str	r0, [r6, #0]
 8003bc4:	2800      	cmp	r0, #0
 8003bc6:	d1f1      	bne.n	8003bac <__sfp+0x20>
 8003bc8:	230c      	movs	r3, #12
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	4604      	mov	r4, r0
 8003bce:	4620      	mov	r0, r4
 8003bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bd6:	81e3      	strh	r3, [r4, #14]
 8003bd8:	2301      	movs	r3, #1
 8003bda:	81a3      	strh	r3, [r4, #12]
 8003bdc:	6665      	str	r5, [r4, #100]	; 0x64
 8003bde:	6025      	str	r5, [r4, #0]
 8003be0:	60a5      	str	r5, [r4, #8]
 8003be2:	6065      	str	r5, [r4, #4]
 8003be4:	6125      	str	r5, [r4, #16]
 8003be6:	6165      	str	r5, [r4, #20]
 8003be8:	61a5      	str	r5, [r4, #24]
 8003bea:	2208      	movs	r2, #8
 8003bec:	4629      	mov	r1, r5
 8003bee:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003bf2:	f7ff fcbb 	bl	800356c <memset>
 8003bf6:	6365      	str	r5, [r4, #52]	; 0x34
 8003bf8:	63a5      	str	r5, [r4, #56]	; 0x38
 8003bfa:	64a5      	str	r5, [r4, #72]	; 0x48
 8003bfc:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003bfe:	e7e6      	b.n	8003bce <__sfp+0x42>
 8003c00:	0800487c 	.word	0x0800487c

08003c04 <_fwalk_reent>:
 8003c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c08:	4680      	mov	r8, r0
 8003c0a:	4689      	mov	r9, r1
 8003c0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003c10:	2600      	movs	r6, #0
 8003c12:	b914      	cbnz	r4, 8003c1a <_fwalk_reent+0x16>
 8003c14:	4630      	mov	r0, r6
 8003c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c1a:	68a5      	ldr	r5, [r4, #8]
 8003c1c:	6867      	ldr	r7, [r4, #4]
 8003c1e:	3f01      	subs	r7, #1
 8003c20:	d501      	bpl.n	8003c26 <_fwalk_reent+0x22>
 8003c22:	6824      	ldr	r4, [r4, #0]
 8003c24:	e7f5      	b.n	8003c12 <_fwalk_reent+0xe>
 8003c26:	89ab      	ldrh	r3, [r5, #12]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d907      	bls.n	8003c3c <_fwalk_reent+0x38>
 8003c2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c30:	3301      	adds	r3, #1
 8003c32:	d003      	beq.n	8003c3c <_fwalk_reent+0x38>
 8003c34:	4629      	mov	r1, r5
 8003c36:	4640      	mov	r0, r8
 8003c38:	47c8      	blx	r9
 8003c3a:	4306      	orrs	r6, r0
 8003c3c:	3568      	adds	r5, #104	; 0x68
 8003c3e:	e7ee      	b.n	8003c1e <_fwalk_reent+0x1a>

08003c40 <__locale_ctype_ptr_l>:
 8003c40:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8003c44:	4770      	bx	lr

08003c46 <__swhatbuf_r>:
 8003c46:	b570      	push	{r4, r5, r6, lr}
 8003c48:	460e      	mov	r6, r1
 8003c4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c4e:	2900      	cmp	r1, #0
 8003c50:	b090      	sub	sp, #64	; 0x40
 8003c52:	4614      	mov	r4, r2
 8003c54:	461d      	mov	r5, r3
 8003c56:	da07      	bge.n	8003c68 <__swhatbuf_r+0x22>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	602b      	str	r3, [r5, #0]
 8003c5c:	89b3      	ldrh	r3, [r6, #12]
 8003c5e:	061a      	lsls	r2, r3, #24
 8003c60:	d410      	bmi.n	8003c84 <__swhatbuf_r+0x3e>
 8003c62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c66:	e00e      	b.n	8003c86 <__swhatbuf_r+0x40>
 8003c68:	aa01      	add	r2, sp, #4
 8003c6a:	f000 fc77 	bl	800455c <_fstat_r>
 8003c6e:	2800      	cmp	r0, #0
 8003c70:	dbf2      	blt.n	8003c58 <__swhatbuf_r+0x12>
 8003c72:	9a02      	ldr	r2, [sp, #8]
 8003c74:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003c78:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003c7c:	425a      	negs	r2, r3
 8003c7e:	415a      	adcs	r2, r3
 8003c80:	602a      	str	r2, [r5, #0]
 8003c82:	e7ee      	b.n	8003c62 <__swhatbuf_r+0x1c>
 8003c84:	2340      	movs	r3, #64	; 0x40
 8003c86:	2000      	movs	r0, #0
 8003c88:	6023      	str	r3, [r4, #0]
 8003c8a:	b010      	add	sp, #64	; 0x40
 8003c8c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003c90 <__smakebuf_r>:
 8003c90:	898b      	ldrh	r3, [r1, #12]
 8003c92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c94:	079d      	lsls	r5, r3, #30
 8003c96:	4606      	mov	r6, r0
 8003c98:	460c      	mov	r4, r1
 8003c9a:	d507      	bpl.n	8003cac <__smakebuf_r+0x1c>
 8003c9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003ca0:	6023      	str	r3, [r4, #0]
 8003ca2:	6123      	str	r3, [r4, #16]
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	6163      	str	r3, [r4, #20]
 8003ca8:	b002      	add	sp, #8
 8003caa:	bd70      	pop	{r4, r5, r6, pc}
 8003cac:	ab01      	add	r3, sp, #4
 8003cae:	466a      	mov	r2, sp
 8003cb0:	f7ff ffc9 	bl	8003c46 <__swhatbuf_r>
 8003cb4:	9900      	ldr	r1, [sp, #0]
 8003cb6:	4605      	mov	r5, r0
 8003cb8:	4630      	mov	r0, r6
 8003cba:	f000 f889 	bl	8003dd0 <_malloc_r>
 8003cbe:	b948      	cbnz	r0, 8003cd4 <__smakebuf_r+0x44>
 8003cc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cc4:	059a      	lsls	r2, r3, #22
 8003cc6:	d4ef      	bmi.n	8003ca8 <__smakebuf_r+0x18>
 8003cc8:	f023 0303 	bic.w	r3, r3, #3
 8003ccc:	f043 0302 	orr.w	r3, r3, #2
 8003cd0:	81a3      	strh	r3, [r4, #12]
 8003cd2:	e7e3      	b.n	8003c9c <__smakebuf_r+0xc>
 8003cd4:	4b0d      	ldr	r3, [pc, #52]	; (8003d0c <__smakebuf_r+0x7c>)
 8003cd6:	62b3      	str	r3, [r6, #40]	; 0x28
 8003cd8:	89a3      	ldrh	r3, [r4, #12]
 8003cda:	6020      	str	r0, [r4, #0]
 8003cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ce0:	81a3      	strh	r3, [r4, #12]
 8003ce2:	9b00      	ldr	r3, [sp, #0]
 8003ce4:	6163      	str	r3, [r4, #20]
 8003ce6:	9b01      	ldr	r3, [sp, #4]
 8003ce8:	6120      	str	r0, [r4, #16]
 8003cea:	b15b      	cbz	r3, 8003d04 <__smakebuf_r+0x74>
 8003cec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cf0:	4630      	mov	r0, r6
 8003cf2:	f000 fc45 	bl	8004580 <_isatty_r>
 8003cf6:	b128      	cbz	r0, 8003d04 <__smakebuf_r+0x74>
 8003cf8:	89a3      	ldrh	r3, [r4, #12]
 8003cfa:	f023 0303 	bic.w	r3, r3, #3
 8003cfe:	f043 0301 	orr.w	r3, r3, #1
 8003d02:	81a3      	strh	r3, [r4, #12]
 8003d04:	89a3      	ldrh	r3, [r4, #12]
 8003d06:	431d      	orrs	r5, r3
 8003d08:	81a5      	strh	r5, [r4, #12]
 8003d0a:	e7cd      	b.n	8003ca8 <__smakebuf_r+0x18>
 8003d0c:	08003aad 	.word	0x08003aad

08003d10 <__ascii_mbtowc>:
 8003d10:	b082      	sub	sp, #8
 8003d12:	b901      	cbnz	r1, 8003d16 <__ascii_mbtowc+0x6>
 8003d14:	a901      	add	r1, sp, #4
 8003d16:	b142      	cbz	r2, 8003d2a <__ascii_mbtowc+0x1a>
 8003d18:	b14b      	cbz	r3, 8003d2e <__ascii_mbtowc+0x1e>
 8003d1a:	7813      	ldrb	r3, [r2, #0]
 8003d1c:	600b      	str	r3, [r1, #0]
 8003d1e:	7812      	ldrb	r2, [r2, #0]
 8003d20:	1c10      	adds	r0, r2, #0
 8003d22:	bf18      	it	ne
 8003d24:	2001      	movne	r0, #1
 8003d26:	b002      	add	sp, #8
 8003d28:	4770      	bx	lr
 8003d2a:	4610      	mov	r0, r2
 8003d2c:	e7fb      	b.n	8003d26 <__ascii_mbtowc+0x16>
 8003d2e:	f06f 0001 	mvn.w	r0, #1
 8003d32:	e7f8      	b.n	8003d26 <__ascii_mbtowc+0x16>

08003d34 <_free_r>:
 8003d34:	b538      	push	{r3, r4, r5, lr}
 8003d36:	4605      	mov	r5, r0
 8003d38:	2900      	cmp	r1, #0
 8003d3a:	d045      	beq.n	8003dc8 <_free_r+0x94>
 8003d3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d40:	1f0c      	subs	r4, r1, #4
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	bfb8      	it	lt
 8003d46:	18e4      	addlt	r4, r4, r3
 8003d48:	f000 fc56 	bl	80045f8 <__malloc_lock>
 8003d4c:	4a1f      	ldr	r2, [pc, #124]	; (8003dcc <_free_r+0x98>)
 8003d4e:	6813      	ldr	r3, [r2, #0]
 8003d50:	4610      	mov	r0, r2
 8003d52:	b933      	cbnz	r3, 8003d62 <_free_r+0x2e>
 8003d54:	6063      	str	r3, [r4, #4]
 8003d56:	6014      	str	r4, [r2, #0]
 8003d58:	4628      	mov	r0, r5
 8003d5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d5e:	f000 bc4c 	b.w	80045fa <__malloc_unlock>
 8003d62:	42a3      	cmp	r3, r4
 8003d64:	d90c      	bls.n	8003d80 <_free_r+0x4c>
 8003d66:	6821      	ldr	r1, [r4, #0]
 8003d68:	1862      	adds	r2, r4, r1
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	bf04      	itt	eq
 8003d6e:	681a      	ldreq	r2, [r3, #0]
 8003d70:	685b      	ldreq	r3, [r3, #4]
 8003d72:	6063      	str	r3, [r4, #4]
 8003d74:	bf04      	itt	eq
 8003d76:	1852      	addeq	r2, r2, r1
 8003d78:	6022      	streq	r2, [r4, #0]
 8003d7a:	6004      	str	r4, [r0, #0]
 8003d7c:	e7ec      	b.n	8003d58 <_free_r+0x24>
 8003d7e:	4613      	mov	r3, r2
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	b10a      	cbz	r2, 8003d88 <_free_r+0x54>
 8003d84:	42a2      	cmp	r2, r4
 8003d86:	d9fa      	bls.n	8003d7e <_free_r+0x4a>
 8003d88:	6819      	ldr	r1, [r3, #0]
 8003d8a:	1858      	adds	r0, r3, r1
 8003d8c:	42a0      	cmp	r0, r4
 8003d8e:	d10b      	bne.n	8003da8 <_free_r+0x74>
 8003d90:	6820      	ldr	r0, [r4, #0]
 8003d92:	4401      	add	r1, r0
 8003d94:	1858      	adds	r0, r3, r1
 8003d96:	4282      	cmp	r2, r0
 8003d98:	6019      	str	r1, [r3, #0]
 8003d9a:	d1dd      	bne.n	8003d58 <_free_r+0x24>
 8003d9c:	6810      	ldr	r0, [r2, #0]
 8003d9e:	6852      	ldr	r2, [r2, #4]
 8003da0:	605a      	str	r2, [r3, #4]
 8003da2:	4401      	add	r1, r0
 8003da4:	6019      	str	r1, [r3, #0]
 8003da6:	e7d7      	b.n	8003d58 <_free_r+0x24>
 8003da8:	d902      	bls.n	8003db0 <_free_r+0x7c>
 8003daa:	230c      	movs	r3, #12
 8003dac:	602b      	str	r3, [r5, #0]
 8003dae:	e7d3      	b.n	8003d58 <_free_r+0x24>
 8003db0:	6820      	ldr	r0, [r4, #0]
 8003db2:	1821      	adds	r1, r4, r0
 8003db4:	428a      	cmp	r2, r1
 8003db6:	bf04      	itt	eq
 8003db8:	6811      	ldreq	r1, [r2, #0]
 8003dba:	6852      	ldreq	r2, [r2, #4]
 8003dbc:	6062      	str	r2, [r4, #4]
 8003dbe:	bf04      	itt	eq
 8003dc0:	1809      	addeq	r1, r1, r0
 8003dc2:	6021      	streq	r1, [r4, #0]
 8003dc4:	605c      	str	r4, [r3, #4]
 8003dc6:	e7c7      	b.n	8003d58 <_free_r+0x24>
 8003dc8:	bd38      	pop	{r3, r4, r5, pc}
 8003dca:	bf00      	nop
 8003dcc:	20000744 	.word	0x20000744

08003dd0 <_malloc_r>:
 8003dd0:	b570      	push	{r4, r5, r6, lr}
 8003dd2:	1ccd      	adds	r5, r1, #3
 8003dd4:	f025 0503 	bic.w	r5, r5, #3
 8003dd8:	3508      	adds	r5, #8
 8003dda:	2d0c      	cmp	r5, #12
 8003ddc:	bf38      	it	cc
 8003dde:	250c      	movcc	r5, #12
 8003de0:	2d00      	cmp	r5, #0
 8003de2:	4606      	mov	r6, r0
 8003de4:	db01      	blt.n	8003dea <_malloc_r+0x1a>
 8003de6:	42a9      	cmp	r1, r5
 8003de8:	d903      	bls.n	8003df2 <_malloc_r+0x22>
 8003dea:	230c      	movs	r3, #12
 8003dec:	6033      	str	r3, [r6, #0]
 8003dee:	2000      	movs	r0, #0
 8003df0:	bd70      	pop	{r4, r5, r6, pc}
 8003df2:	f000 fc01 	bl	80045f8 <__malloc_lock>
 8003df6:	4a23      	ldr	r2, [pc, #140]	; (8003e84 <_malloc_r+0xb4>)
 8003df8:	6814      	ldr	r4, [r2, #0]
 8003dfa:	4621      	mov	r1, r4
 8003dfc:	b991      	cbnz	r1, 8003e24 <_malloc_r+0x54>
 8003dfe:	4c22      	ldr	r4, [pc, #136]	; (8003e88 <_malloc_r+0xb8>)
 8003e00:	6823      	ldr	r3, [r4, #0]
 8003e02:	b91b      	cbnz	r3, 8003e0c <_malloc_r+0x3c>
 8003e04:	4630      	mov	r0, r6
 8003e06:	f000 fb27 	bl	8004458 <_sbrk_r>
 8003e0a:	6020      	str	r0, [r4, #0]
 8003e0c:	4629      	mov	r1, r5
 8003e0e:	4630      	mov	r0, r6
 8003e10:	f000 fb22 	bl	8004458 <_sbrk_r>
 8003e14:	1c43      	adds	r3, r0, #1
 8003e16:	d126      	bne.n	8003e66 <_malloc_r+0x96>
 8003e18:	230c      	movs	r3, #12
 8003e1a:	6033      	str	r3, [r6, #0]
 8003e1c:	4630      	mov	r0, r6
 8003e1e:	f000 fbec 	bl	80045fa <__malloc_unlock>
 8003e22:	e7e4      	b.n	8003dee <_malloc_r+0x1e>
 8003e24:	680b      	ldr	r3, [r1, #0]
 8003e26:	1b5b      	subs	r3, r3, r5
 8003e28:	d41a      	bmi.n	8003e60 <_malloc_r+0x90>
 8003e2a:	2b0b      	cmp	r3, #11
 8003e2c:	d90f      	bls.n	8003e4e <_malloc_r+0x7e>
 8003e2e:	600b      	str	r3, [r1, #0]
 8003e30:	50cd      	str	r5, [r1, r3]
 8003e32:	18cc      	adds	r4, r1, r3
 8003e34:	4630      	mov	r0, r6
 8003e36:	f000 fbe0 	bl	80045fa <__malloc_unlock>
 8003e3a:	f104 000b 	add.w	r0, r4, #11
 8003e3e:	1d23      	adds	r3, r4, #4
 8003e40:	f020 0007 	bic.w	r0, r0, #7
 8003e44:	1ac3      	subs	r3, r0, r3
 8003e46:	d01b      	beq.n	8003e80 <_malloc_r+0xb0>
 8003e48:	425a      	negs	r2, r3
 8003e4a:	50e2      	str	r2, [r4, r3]
 8003e4c:	bd70      	pop	{r4, r5, r6, pc}
 8003e4e:	428c      	cmp	r4, r1
 8003e50:	bf0d      	iteet	eq
 8003e52:	6863      	ldreq	r3, [r4, #4]
 8003e54:	684b      	ldrne	r3, [r1, #4]
 8003e56:	6063      	strne	r3, [r4, #4]
 8003e58:	6013      	streq	r3, [r2, #0]
 8003e5a:	bf18      	it	ne
 8003e5c:	460c      	movne	r4, r1
 8003e5e:	e7e9      	b.n	8003e34 <_malloc_r+0x64>
 8003e60:	460c      	mov	r4, r1
 8003e62:	6849      	ldr	r1, [r1, #4]
 8003e64:	e7ca      	b.n	8003dfc <_malloc_r+0x2c>
 8003e66:	1cc4      	adds	r4, r0, #3
 8003e68:	f024 0403 	bic.w	r4, r4, #3
 8003e6c:	42a0      	cmp	r0, r4
 8003e6e:	d005      	beq.n	8003e7c <_malloc_r+0xac>
 8003e70:	1a21      	subs	r1, r4, r0
 8003e72:	4630      	mov	r0, r6
 8003e74:	f000 faf0 	bl	8004458 <_sbrk_r>
 8003e78:	3001      	adds	r0, #1
 8003e7a:	d0cd      	beq.n	8003e18 <_malloc_r+0x48>
 8003e7c:	6025      	str	r5, [r4, #0]
 8003e7e:	e7d9      	b.n	8003e34 <_malloc_r+0x64>
 8003e80:	bd70      	pop	{r4, r5, r6, pc}
 8003e82:	bf00      	nop
 8003e84:	20000744 	.word	0x20000744
 8003e88:	20000748 	.word	0x20000748

08003e8c <__ssputs_r>:
 8003e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e90:	688e      	ldr	r6, [r1, #8]
 8003e92:	429e      	cmp	r6, r3
 8003e94:	4682      	mov	sl, r0
 8003e96:	460c      	mov	r4, r1
 8003e98:	4691      	mov	r9, r2
 8003e9a:	4698      	mov	r8, r3
 8003e9c:	d835      	bhi.n	8003f0a <__ssputs_r+0x7e>
 8003e9e:	898a      	ldrh	r2, [r1, #12]
 8003ea0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ea4:	d031      	beq.n	8003f0a <__ssputs_r+0x7e>
 8003ea6:	6825      	ldr	r5, [r4, #0]
 8003ea8:	6909      	ldr	r1, [r1, #16]
 8003eaa:	1a6f      	subs	r7, r5, r1
 8003eac:	6965      	ldr	r5, [r4, #20]
 8003eae:	2302      	movs	r3, #2
 8003eb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003eb4:	fb95 f5f3 	sdiv	r5, r5, r3
 8003eb8:	f108 0301 	add.w	r3, r8, #1
 8003ebc:	443b      	add	r3, r7
 8003ebe:	429d      	cmp	r5, r3
 8003ec0:	bf38      	it	cc
 8003ec2:	461d      	movcc	r5, r3
 8003ec4:	0553      	lsls	r3, r2, #21
 8003ec6:	d531      	bpl.n	8003f2c <__ssputs_r+0xa0>
 8003ec8:	4629      	mov	r1, r5
 8003eca:	f7ff ff81 	bl	8003dd0 <_malloc_r>
 8003ece:	4606      	mov	r6, r0
 8003ed0:	b950      	cbnz	r0, 8003ee8 <__ssputs_r+0x5c>
 8003ed2:	230c      	movs	r3, #12
 8003ed4:	f8ca 3000 	str.w	r3, [sl]
 8003ed8:	89a3      	ldrh	r3, [r4, #12]
 8003eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ede:	81a3      	strh	r3, [r4, #12]
 8003ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ee8:	463a      	mov	r2, r7
 8003eea:	6921      	ldr	r1, [r4, #16]
 8003eec:	f7ff fb33 	bl	8003556 <memcpy>
 8003ef0:	89a3      	ldrh	r3, [r4, #12]
 8003ef2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003efa:	81a3      	strh	r3, [r4, #12]
 8003efc:	6126      	str	r6, [r4, #16]
 8003efe:	6165      	str	r5, [r4, #20]
 8003f00:	443e      	add	r6, r7
 8003f02:	1bed      	subs	r5, r5, r7
 8003f04:	6026      	str	r6, [r4, #0]
 8003f06:	60a5      	str	r5, [r4, #8]
 8003f08:	4646      	mov	r6, r8
 8003f0a:	4546      	cmp	r6, r8
 8003f0c:	bf28      	it	cs
 8003f0e:	4646      	movcs	r6, r8
 8003f10:	4632      	mov	r2, r6
 8003f12:	4649      	mov	r1, r9
 8003f14:	6820      	ldr	r0, [r4, #0]
 8003f16:	f000 fb55 	bl	80045c4 <memmove>
 8003f1a:	68a3      	ldr	r3, [r4, #8]
 8003f1c:	1b9b      	subs	r3, r3, r6
 8003f1e:	60a3      	str	r3, [r4, #8]
 8003f20:	6823      	ldr	r3, [r4, #0]
 8003f22:	441e      	add	r6, r3
 8003f24:	6026      	str	r6, [r4, #0]
 8003f26:	2000      	movs	r0, #0
 8003f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f2c:	462a      	mov	r2, r5
 8003f2e:	f000 fb65 	bl	80045fc <_realloc_r>
 8003f32:	4606      	mov	r6, r0
 8003f34:	2800      	cmp	r0, #0
 8003f36:	d1e1      	bne.n	8003efc <__ssputs_r+0x70>
 8003f38:	6921      	ldr	r1, [r4, #16]
 8003f3a:	4650      	mov	r0, sl
 8003f3c:	f7ff fefa 	bl	8003d34 <_free_r>
 8003f40:	e7c7      	b.n	8003ed2 <__ssputs_r+0x46>
	...

08003f44 <_svfiprintf_r>:
 8003f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f48:	b09d      	sub	sp, #116	; 0x74
 8003f4a:	4680      	mov	r8, r0
 8003f4c:	9303      	str	r3, [sp, #12]
 8003f4e:	898b      	ldrh	r3, [r1, #12]
 8003f50:	061c      	lsls	r4, r3, #24
 8003f52:	460d      	mov	r5, r1
 8003f54:	4616      	mov	r6, r2
 8003f56:	d50f      	bpl.n	8003f78 <_svfiprintf_r+0x34>
 8003f58:	690b      	ldr	r3, [r1, #16]
 8003f5a:	b96b      	cbnz	r3, 8003f78 <_svfiprintf_r+0x34>
 8003f5c:	2140      	movs	r1, #64	; 0x40
 8003f5e:	f7ff ff37 	bl	8003dd0 <_malloc_r>
 8003f62:	6028      	str	r0, [r5, #0]
 8003f64:	6128      	str	r0, [r5, #16]
 8003f66:	b928      	cbnz	r0, 8003f74 <_svfiprintf_r+0x30>
 8003f68:	230c      	movs	r3, #12
 8003f6a:	f8c8 3000 	str.w	r3, [r8]
 8003f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f72:	e0c5      	b.n	8004100 <_svfiprintf_r+0x1bc>
 8003f74:	2340      	movs	r3, #64	; 0x40
 8003f76:	616b      	str	r3, [r5, #20]
 8003f78:	2300      	movs	r3, #0
 8003f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8003f7c:	2320      	movs	r3, #32
 8003f7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f82:	2330      	movs	r3, #48	; 0x30
 8003f84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f88:	f04f 0b01 	mov.w	fp, #1
 8003f8c:	4637      	mov	r7, r6
 8003f8e:	463c      	mov	r4, r7
 8003f90:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d13c      	bne.n	8004012 <_svfiprintf_r+0xce>
 8003f98:	ebb7 0a06 	subs.w	sl, r7, r6
 8003f9c:	d00b      	beq.n	8003fb6 <_svfiprintf_r+0x72>
 8003f9e:	4653      	mov	r3, sl
 8003fa0:	4632      	mov	r2, r6
 8003fa2:	4629      	mov	r1, r5
 8003fa4:	4640      	mov	r0, r8
 8003fa6:	f7ff ff71 	bl	8003e8c <__ssputs_r>
 8003faa:	3001      	adds	r0, #1
 8003fac:	f000 80a3 	beq.w	80040f6 <_svfiprintf_r+0x1b2>
 8003fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fb2:	4453      	add	r3, sl
 8003fb4:	9309      	str	r3, [sp, #36]	; 0x24
 8003fb6:	783b      	ldrb	r3, [r7, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 809c 	beq.w	80040f6 <_svfiprintf_r+0x1b2>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc4:	9304      	str	r3, [sp, #16]
 8003fc6:	9307      	str	r3, [sp, #28]
 8003fc8:	9205      	str	r2, [sp, #20]
 8003fca:	9306      	str	r3, [sp, #24]
 8003fcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003fd0:	931a      	str	r3, [sp, #104]	; 0x68
 8003fd2:	2205      	movs	r2, #5
 8003fd4:	7821      	ldrb	r1, [r4, #0]
 8003fd6:	4850      	ldr	r0, [pc, #320]	; (8004118 <_svfiprintf_r+0x1d4>)
 8003fd8:	f7fc f90a 	bl	80001f0 <memchr>
 8003fdc:	1c67      	adds	r7, r4, #1
 8003fde:	9b04      	ldr	r3, [sp, #16]
 8003fe0:	b9d8      	cbnz	r0, 800401a <_svfiprintf_r+0xd6>
 8003fe2:	06d9      	lsls	r1, r3, #27
 8003fe4:	bf44      	itt	mi
 8003fe6:	2220      	movmi	r2, #32
 8003fe8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003fec:	071a      	lsls	r2, r3, #28
 8003fee:	bf44      	itt	mi
 8003ff0:	222b      	movmi	r2, #43	; 0x2b
 8003ff2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ff6:	7822      	ldrb	r2, [r4, #0]
 8003ff8:	2a2a      	cmp	r2, #42	; 0x2a
 8003ffa:	d016      	beq.n	800402a <_svfiprintf_r+0xe6>
 8003ffc:	9a07      	ldr	r2, [sp, #28]
 8003ffe:	2100      	movs	r1, #0
 8004000:	200a      	movs	r0, #10
 8004002:	4627      	mov	r7, r4
 8004004:	3401      	adds	r4, #1
 8004006:	783b      	ldrb	r3, [r7, #0]
 8004008:	3b30      	subs	r3, #48	; 0x30
 800400a:	2b09      	cmp	r3, #9
 800400c:	d951      	bls.n	80040b2 <_svfiprintf_r+0x16e>
 800400e:	b1c9      	cbz	r1, 8004044 <_svfiprintf_r+0x100>
 8004010:	e011      	b.n	8004036 <_svfiprintf_r+0xf2>
 8004012:	2b25      	cmp	r3, #37	; 0x25
 8004014:	d0c0      	beq.n	8003f98 <_svfiprintf_r+0x54>
 8004016:	4627      	mov	r7, r4
 8004018:	e7b9      	b.n	8003f8e <_svfiprintf_r+0x4a>
 800401a:	4a3f      	ldr	r2, [pc, #252]	; (8004118 <_svfiprintf_r+0x1d4>)
 800401c:	1a80      	subs	r0, r0, r2
 800401e:	fa0b f000 	lsl.w	r0, fp, r0
 8004022:	4318      	orrs	r0, r3
 8004024:	9004      	str	r0, [sp, #16]
 8004026:	463c      	mov	r4, r7
 8004028:	e7d3      	b.n	8003fd2 <_svfiprintf_r+0x8e>
 800402a:	9a03      	ldr	r2, [sp, #12]
 800402c:	1d11      	adds	r1, r2, #4
 800402e:	6812      	ldr	r2, [r2, #0]
 8004030:	9103      	str	r1, [sp, #12]
 8004032:	2a00      	cmp	r2, #0
 8004034:	db01      	blt.n	800403a <_svfiprintf_r+0xf6>
 8004036:	9207      	str	r2, [sp, #28]
 8004038:	e004      	b.n	8004044 <_svfiprintf_r+0x100>
 800403a:	4252      	negs	r2, r2
 800403c:	f043 0302 	orr.w	r3, r3, #2
 8004040:	9207      	str	r2, [sp, #28]
 8004042:	9304      	str	r3, [sp, #16]
 8004044:	783b      	ldrb	r3, [r7, #0]
 8004046:	2b2e      	cmp	r3, #46	; 0x2e
 8004048:	d10e      	bne.n	8004068 <_svfiprintf_r+0x124>
 800404a:	787b      	ldrb	r3, [r7, #1]
 800404c:	2b2a      	cmp	r3, #42	; 0x2a
 800404e:	f107 0101 	add.w	r1, r7, #1
 8004052:	d132      	bne.n	80040ba <_svfiprintf_r+0x176>
 8004054:	9b03      	ldr	r3, [sp, #12]
 8004056:	1d1a      	adds	r2, r3, #4
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	9203      	str	r2, [sp, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	bfb8      	it	lt
 8004060:	f04f 33ff 	movlt.w	r3, #4294967295
 8004064:	3702      	adds	r7, #2
 8004066:	9305      	str	r3, [sp, #20]
 8004068:	4c2c      	ldr	r4, [pc, #176]	; (800411c <_svfiprintf_r+0x1d8>)
 800406a:	7839      	ldrb	r1, [r7, #0]
 800406c:	2203      	movs	r2, #3
 800406e:	4620      	mov	r0, r4
 8004070:	f7fc f8be 	bl	80001f0 <memchr>
 8004074:	b138      	cbz	r0, 8004086 <_svfiprintf_r+0x142>
 8004076:	2340      	movs	r3, #64	; 0x40
 8004078:	1b00      	subs	r0, r0, r4
 800407a:	fa03 f000 	lsl.w	r0, r3, r0
 800407e:	9b04      	ldr	r3, [sp, #16]
 8004080:	4303      	orrs	r3, r0
 8004082:	9304      	str	r3, [sp, #16]
 8004084:	3701      	adds	r7, #1
 8004086:	7839      	ldrb	r1, [r7, #0]
 8004088:	4825      	ldr	r0, [pc, #148]	; (8004120 <_svfiprintf_r+0x1dc>)
 800408a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800408e:	2206      	movs	r2, #6
 8004090:	1c7e      	adds	r6, r7, #1
 8004092:	f7fc f8ad 	bl	80001f0 <memchr>
 8004096:	2800      	cmp	r0, #0
 8004098:	d035      	beq.n	8004106 <_svfiprintf_r+0x1c2>
 800409a:	4b22      	ldr	r3, [pc, #136]	; (8004124 <_svfiprintf_r+0x1e0>)
 800409c:	b9fb      	cbnz	r3, 80040de <_svfiprintf_r+0x19a>
 800409e:	9b03      	ldr	r3, [sp, #12]
 80040a0:	3307      	adds	r3, #7
 80040a2:	f023 0307 	bic.w	r3, r3, #7
 80040a6:	3308      	adds	r3, #8
 80040a8:	9303      	str	r3, [sp, #12]
 80040aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040ac:	444b      	add	r3, r9
 80040ae:	9309      	str	r3, [sp, #36]	; 0x24
 80040b0:	e76c      	b.n	8003f8c <_svfiprintf_r+0x48>
 80040b2:	fb00 3202 	mla	r2, r0, r2, r3
 80040b6:	2101      	movs	r1, #1
 80040b8:	e7a3      	b.n	8004002 <_svfiprintf_r+0xbe>
 80040ba:	2300      	movs	r3, #0
 80040bc:	9305      	str	r3, [sp, #20]
 80040be:	4618      	mov	r0, r3
 80040c0:	240a      	movs	r4, #10
 80040c2:	460f      	mov	r7, r1
 80040c4:	3101      	adds	r1, #1
 80040c6:	783a      	ldrb	r2, [r7, #0]
 80040c8:	3a30      	subs	r2, #48	; 0x30
 80040ca:	2a09      	cmp	r2, #9
 80040cc:	d903      	bls.n	80040d6 <_svfiprintf_r+0x192>
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0ca      	beq.n	8004068 <_svfiprintf_r+0x124>
 80040d2:	9005      	str	r0, [sp, #20]
 80040d4:	e7c8      	b.n	8004068 <_svfiprintf_r+0x124>
 80040d6:	fb04 2000 	mla	r0, r4, r0, r2
 80040da:	2301      	movs	r3, #1
 80040dc:	e7f1      	b.n	80040c2 <_svfiprintf_r+0x17e>
 80040de:	ab03      	add	r3, sp, #12
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	462a      	mov	r2, r5
 80040e4:	4b10      	ldr	r3, [pc, #64]	; (8004128 <_svfiprintf_r+0x1e4>)
 80040e6:	a904      	add	r1, sp, #16
 80040e8:	4640      	mov	r0, r8
 80040ea:	f3af 8000 	nop.w
 80040ee:	f1b0 3fff 	cmp.w	r0, #4294967295
 80040f2:	4681      	mov	r9, r0
 80040f4:	d1d9      	bne.n	80040aa <_svfiprintf_r+0x166>
 80040f6:	89ab      	ldrh	r3, [r5, #12]
 80040f8:	065b      	lsls	r3, r3, #25
 80040fa:	f53f af38 	bmi.w	8003f6e <_svfiprintf_r+0x2a>
 80040fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004100:	b01d      	add	sp, #116	; 0x74
 8004102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004106:	ab03      	add	r3, sp, #12
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	462a      	mov	r2, r5
 800410c:	4b06      	ldr	r3, [pc, #24]	; (8004128 <_svfiprintf_r+0x1e4>)
 800410e:	a904      	add	r1, sp, #16
 8004110:	4640      	mov	r0, r8
 8004112:	f000 f881 	bl	8004218 <_printf_i>
 8004116:	e7ea      	b.n	80040ee <_svfiprintf_r+0x1aa>
 8004118:	080048ea 	.word	0x080048ea
 800411c:	080048f0 	.word	0x080048f0
 8004120:	080048f4 	.word	0x080048f4
 8004124:	00000000 	.word	0x00000000
 8004128:	08003e8d 	.word	0x08003e8d

0800412c <_printf_common>:
 800412c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004130:	4691      	mov	r9, r2
 8004132:	461f      	mov	r7, r3
 8004134:	688a      	ldr	r2, [r1, #8]
 8004136:	690b      	ldr	r3, [r1, #16]
 8004138:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800413c:	4293      	cmp	r3, r2
 800413e:	bfb8      	it	lt
 8004140:	4613      	movlt	r3, r2
 8004142:	f8c9 3000 	str.w	r3, [r9]
 8004146:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800414a:	4606      	mov	r6, r0
 800414c:	460c      	mov	r4, r1
 800414e:	b112      	cbz	r2, 8004156 <_printf_common+0x2a>
 8004150:	3301      	adds	r3, #1
 8004152:	f8c9 3000 	str.w	r3, [r9]
 8004156:	6823      	ldr	r3, [r4, #0]
 8004158:	0699      	lsls	r1, r3, #26
 800415a:	bf42      	ittt	mi
 800415c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004160:	3302      	addmi	r3, #2
 8004162:	f8c9 3000 	strmi.w	r3, [r9]
 8004166:	6825      	ldr	r5, [r4, #0]
 8004168:	f015 0506 	ands.w	r5, r5, #6
 800416c:	d107      	bne.n	800417e <_printf_common+0x52>
 800416e:	f104 0a19 	add.w	sl, r4, #25
 8004172:	68e3      	ldr	r3, [r4, #12]
 8004174:	f8d9 2000 	ldr.w	r2, [r9]
 8004178:	1a9b      	subs	r3, r3, r2
 800417a:	429d      	cmp	r5, r3
 800417c:	db29      	blt.n	80041d2 <_printf_common+0xa6>
 800417e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004182:	6822      	ldr	r2, [r4, #0]
 8004184:	3300      	adds	r3, #0
 8004186:	bf18      	it	ne
 8004188:	2301      	movne	r3, #1
 800418a:	0692      	lsls	r2, r2, #26
 800418c:	d42e      	bmi.n	80041ec <_printf_common+0xc0>
 800418e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004192:	4639      	mov	r1, r7
 8004194:	4630      	mov	r0, r6
 8004196:	47c0      	blx	r8
 8004198:	3001      	adds	r0, #1
 800419a:	d021      	beq.n	80041e0 <_printf_common+0xb4>
 800419c:	6823      	ldr	r3, [r4, #0]
 800419e:	68e5      	ldr	r5, [r4, #12]
 80041a0:	f8d9 2000 	ldr.w	r2, [r9]
 80041a4:	f003 0306 	and.w	r3, r3, #6
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	bf08      	it	eq
 80041ac:	1aad      	subeq	r5, r5, r2
 80041ae:	68a3      	ldr	r3, [r4, #8]
 80041b0:	6922      	ldr	r2, [r4, #16]
 80041b2:	bf0c      	ite	eq
 80041b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041b8:	2500      	movne	r5, #0
 80041ba:	4293      	cmp	r3, r2
 80041bc:	bfc4      	itt	gt
 80041be:	1a9b      	subgt	r3, r3, r2
 80041c0:	18ed      	addgt	r5, r5, r3
 80041c2:	f04f 0900 	mov.w	r9, #0
 80041c6:	341a      	adds	r4, #26
 80041c8:	454d      	cmp	r5, r9
 80041ca:	d11b      	bne.n	8004204 <_printf_common+0xd8>
 80041cc:	2000      	movs	r0, #0
 80041ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041d2:	2301      	movs	r3, #1
 80041d4:	4652      	mov	r2, sl
 80041d6:	4639      	mov	r1, r7
 80041d8:	4630      	mov	r0, r6
 80041da:	47c0      	blx	r8
 80041dc:	3001      	adds	r0, #1
 80041de:	d103      	bne.n	80041e8 <_printf_common+0xbc>
 80041e0:	f04f 30ff 	mov.w	r0, #4294967295
 80041e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041e8:	3501      	adds	r5, #1
 80041ea:	e7c2      	b.n	8004172 <_printf_common+0x46>
 80041ec:	18e1      	adds	r1, r4, r3
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	2030      	movs	r0, #48	; 0x30
 80041f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041f6:	4422      	add	r2, r4
 80041f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004200:	3302      	adds	r3, #2
 8004202:	e7c4      	b.n	800418e <_printf_common+0x62>
 8004204:	2301      	movs	r3, #1
 8004206:	4622      	mov	r2, r4
 8004208:	4639      	mov	r1, r7
 800420a:	4630      	mov	r0, r6
 800420c:	47c0      	blx	r8
 800420e:	3001      	adds	r0, #1
 8004210:	d0e6      	beq.n	80041e0 <_printf_common+0xb4>
 8004212:	f109 0901 	add.w	r9, r9, #1
 8004216:	e7d7      	b.n	80041c8 <_printf_common+0x9c>

08004218 <_printf_i>:
 8004218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800421c:	4617      	mov	r7, r2
 800421e:	7e0a      	ldrb	r2, [r1, #24]
 8004220:	b085      	sub	sp, #20
 8004222:	2a6e      	cmp	r2, #110	; 0x6e
 8004224:	4698      	mov	r8, r3
 8004226:	4606      	mov	r6, r0
 8004228:	460c      	mov	r4, r1
 800422a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800422c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004230:	f000 80bc 	beq.w	80043ac <_printf_i+0x194>
 8004234:	d81a      	bhi.n	800426c <_printf_i+0x54>
 8004236:	2a63      	cmp	r2, #99	; 0x63
 8004238:	d02e      	beq.n	8004298 <_printf_i+0x80>
 800423a:	d80a      	bhi.n	8004252 <_printf_i+0x3a>
 800423c:	2a00      	cmp	r2, #0
 800423e:	f000 80c8 	beq.w	80043d2 <_printf_i+0x1ba>
 8004242:	2a58      	cmp	r2, #88	; 0x58
 8004244:	f000 808a 	beq.w	800435c <_printf_i+0x144>
 8004248:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800424c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004250:	e02a      	b.n	80042a8 <_printf_i+0x90>
 8004252:	2a64      	cmp	r2, #100	; 0x64
 8004254:	d001      	beq.n	800425a <_printf_i+0x42>
 8004256:	2a69      	cmp	r2, #105	; 0x69
 8004258:	d1f6      	bne.n	8004248 <_printf_i+0x30>
 800425a:	6821      	ldr	r1, [r4, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004262:	d023      	beq.n	80042ac <_printf_i+0x94>
 8004264:	1d11      	adds	r1, r2, #4
 8004266:	6019      	str	r1, [r3, #0]
 8004268:	6813      	ldr	r3, [r2, #0]
 800426a:	e027      	b.n	80042bc <_printf_i+0xa4>
 800426c:	2a73      	cmp	r2, #115	; 0x73
 800426e:	f000 80b4 	beq.w	80043da <_printf_i+0x1c2>
 8004272:	d808      	bhi.n	8004286 <_printf_i+0x6e>
 8004274:	2a6f      	cmp	r2, #111	; 0x6f
 8004276:	d02a      	beq.n	80042ce <_printf_i+0xb6>
 8004278:	2a70      	cmp	r2, #112	; 0x70
 800427a:	d1e5      	bne.n	8004248 <_printf_i+0x30>
 800427c:	680a      	ldr	r2, [r1, #0]
 800427e:	f042 0220 	orr.w	r2, r2, #32
 8004282:	600a      	str	r2, [r1, #0]
 8004284:	e003      	b.n	800428e <_printf_i+0x76>
 8004286:	2a75      	cmp	r2, #117	; 0x75
 8004288:	d021      	beq.n	80042ce <_printf_i+0xb6>
 800428a:	2a78      	cmp	r2, #120	; 0x78
 800428c:	d1dc      	bne.n	8004248 <_printf_i+0x30>
 800428e:	2278      	movs	r2, #120	; 0x78
 8004290:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004294:	496e      	ldr	r1, [pc, #440]	; (8004450 <_printf_i+0x238>)
 8004296:	e064      	b.n	8004362 <_printf_i+0x14a>
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800429e:	1d11      	adds	r1, r2, #4
 80042a0:	6019      	str	r1, [r3, #0]
 80042a2:	6813      	ldr	r3, [r2, #0]
 80042a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042a8:	2301      	movs	r3, #1
 80042aa:	e0a3      	b.n	80043f4 <_printf_i+0x1dc>
 80042ac:	f011 0f40 	tst.w	r1, #64	; 0x40
 80042b0:	f102 0104 	add.w	r1, r2, #4
 80042b4:	6019      	str	r1, [r3, #0]
 80042b6:	d0d7      	beq.n	8004268 <_printf_i+0x50>
 80042b8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	da03      	bge.n	80042c8 <_printf_i+0xb0>
 80042c0:	222d      	movs	r2, #45	; 0x2d
 80042c2:	425b      	negs	r3, r3
 80042c4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80042c8:	4962      	ldr	r1, [pc, #392]	; (8004454 <_printf_i+0x23c>)
 80042ca:	220a      	movs	r2, #10
 80042cc:	e017      	b.n	80042fe <_printf_i+0xe6>
 80042ce:	6820      	ldr	r0, [r4, #0]
 80042d0:	6819      	ldr	r1, [r3, #0]
 80042d2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80042d6:	d003      	beq.n	80042e0 <_printf_i+0xc8>
 80042d8:	1d08      	adds	r0, r1, #4
 80042da:	6018      	str	r0, [r3, #0]
 80042dc:	680b      	ldr	r3, [r1, #0]
 80042de:	e006      	b.n	80042ee <_printf_i+0xd6>
 80042e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80042e4:	f101 0004 	add.w	r0, r1, #4
 80042e8:	6018      	str	r0, [r3, #0]
 80042ea:	d0f7      	beq.n	80042dc <_printf_i+0xc4>
 80042ec:	880b      	ldrh	r3, [r1, #0]
 80042ee:	4959      	ldr	r1, [pc, #356]	; (8004454 <_printf_i+0x23c>)
 80042f0:	2a6f      	cmp	r2, #111	; 0x6f
 80042f2:	bf14      	ite	ne
 80042f4:	220a      	movne	r2, #10
 80042f6:	2208      	moveq	r2, #8
 80042f8:	2000      	movs	r0, #0
 80042fa:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80042fe:	6865      	ldr	r5, [r4, #4]
 8004300:	60a5      	str	r5, [r4, #8]
 8004302:	2d00      	cmp	r5, #0
 8004304:	f2c0 809c 	blt.w	8004440 <_printf_i+0x228>
 8004308:	6820      	ldr	r0, [r4, #0]
 800430a:	f020 0004 	bic.w	r0, r0, #4
 800430e:	6020      	str	r0, [r4, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d13f      	bne.n	8004394 <_printf_i+0x17c>
 8004314:	2d00      	cmp	r5, #0
 8004316:	f040 8095 	bne.w	8004444 <_printf_i+0x22c>
 800431a:	4675      	mov	r5, lr
 800431c:	2a08      	cmp	r2, #8
 800431e:	d10b      	bne.n	8004338 <_printf_i+0x120>
 8004320:	6823      	ldr	r3, [r4, #0]
 8004322:	07da      	lsls	r2, r3, #31
 8004324:	d508      	bpl.n	8004338 <_printf_i+0x120>
 8004326:	6923      	ldr	r3, [r4, #16]
 8004328:	6862      	ldr	r2, [r4, #4]
 800432a:	429a      	cmp	r2, r3
 800432c:	bfde      	ittt	le
 800432e:	2330      	movle	r3, #48	; 0x30
 8004330:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004334:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004338:	ebae 0305 	sub.w	r3, lr, r5
 800433c:	6123      	str	r3, [r4, #16]
 800433e:	f8cd 8000 	str.w	r8, [sp]
 8004342:	463b      	mov	r3, r7
 8004344:	aa03      	add	r2, sp, #12
 8004346:	4621      	mov	r1, r4
 8004348:	4630      	mov	r0, r6
 800434a:	f7ff feef 	bl	800412c <_printf_common>
 800434e:	3001      	adds	r0, #1
 8004350:	d155      	bne.n	80043fe <_printf_i+0x1e6>
 8004352:	f04f 30ff 	mov.w	r0, #4294967295
 8004356:	b005      	add	sp, #20
 8004358:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800435c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004360:	493c      	ldr	r1, [pc, #240]	; (8004454 <_printf_i+0x23c>)
 8004362:	6822      	ldr	r2, [r4, #0]
 8004364:	6818      	ldr	r0, [r3, #0]
 8004366:	f012 0f80 	tst.w	r2, #128	; 0x80
 800436a:	f100 0504 	add.w	r5, r0, #4
 800436e:	601d      	str	r5, [r3, #0]
 8004370:	d001      	beq.n	8004376 <_printf_i+0x15e>
 8004372:	6803      	ldr	r3, [r0, #0]
 8004374:	e002      	b.n	800437c <_printf_i+0x164>
 8004376:	0655      	lsls	r5, r2, #25
 8004378:	d5fb      	bpl.n	8004372 <_printf_i+0x15a>
 800437a:	8803      	ldrh	r3, [r0, #0]
 800437c:	07d0      	lsls	r0, r2, #31
 800437e:	bf44      	itt	mi
 8004380:	f042 0220 	orrmi.w	r2, r2, #32
 8004384:	6022      	strmi	r2, [r4, #0]
 8004386:	b91b      	cbnz	r3, 8004390 <_printf_i+0x178>
 8004388:	6822      	ldr	r2, [r4, #0]
 800438a:	f022 0220 	bic.w	r2, r2, #32
 800438e:	6022      	str	r2, [r4, #0]
 8004390:	2210      	movs	r2, #16
 8004392:	e7b1      	b.n	80042f8 <_printf_i+0xe0>
 8004394:	4675      	mov	r5, lr
 8004396:	fbb3 f0f2 	udiv	r0, r3, r2
 800439a:	fb02 3310 	mls	r3, r2, r0, r3
 800439e:	5ccb      	ldrb	r3, [r1, r3]
 80043a0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80043a4:	4603      	mov	r3, r0
 80043a6:	2800      	cmp	r0, #0
 80043a8:	d1f5      	bne.n	8004396 <_printf_i+0x17e>
 80043aa:	e7b7      	b.n	800431c <_printf_i+0x104>
 80043ac:	6808      	ldr	r0, [r1, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	6949      	ldr	r1, [r1, #20]
 80043b2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80043b6:	d004      	beq.n	80043c2 <_printf_i+0x1aa>
 80043b8:	1d10      	adds	r0, r2, #4
 80043ba:	6018      	str	r0, [r3, #0]
 80043bc:	6813      	ldr	r3, [r2, #0]
 80043be:	6019      	str	r1, [r3, #0]
 80043c0:	e007      	b.n	80043d2 <_printf_i+0x1ba>
 80043c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043c6:	f102 0004 	add.w	r0, r2, #4
 80043ca:	6018      	str	r0, [r3, #0]
 80043cc:	6813      	ldr	r3, [r2, #0]
 80043ce:	d0f6      	beq.n	80043be <_printf_i+0x1a6>
 80043d0:	8019      	strh	r1, [r3, #0]
 80043d2:	2300      	movs	r3, #0
 80043d4:	6123      	str	r3, [r4, #16]
 80043d6:	4675      	mov	r5, lr
 80043d8:	e7b1      	b.n	800433e <_printf_i+0x126>
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	1d11      	adds	r1, r2, #4
 80043de:	6019      	str	r1, [r3, #0]
 80043e0:	6815      	ldr	r5, [r2, #0]
 80043e2:	6862      	ldr	r2, [r4, #4]
 80043e4:	2100      	movs	r1, #0
 80043e6:	4628      	mov	r0, r5
 80043e8:	f7fb ff02 	bl	80001f0 <memchr>
 80043ec:	b108      	cbz	r0, 80043f2 <_printf_i+0x1da>
 80043ee:	1b40      	subs	r0, r0, r5
 80043f0:	6060      	str	r0, [r4, #4]
 80043f2:	6863      	ldr	r3, [r4, #4]
 80043f4:	6123      	str	r3, [r4, #16]
 80043f6:	2300      	movs	r3, #0
 80043f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043fc:	e79f      	b.n	800433e <_printf_i+0x126>
 80043fe:	6923      	ldr	r3, [r4, #16]
 8004400:	462a      	mov	r2, r5
 8004402:	4639      	mov	r1, r7
 8004404:	4630      	mov	r0, r6
 8004406:	47c0      	blx	r8
 8004408:	3001      	adds	r0, #1
 800440a:	d0a2      	beq.n	8004352 <_printf_i+0x13a>
 800440c:	6823      	ldr	r3, [r4, #0]
 800440e:	079b      	lsls	r3, r3, #30
 8004410:	d507      	bpl.n	8004422 <_printf_i+0x20a>
 8004412:	2500      	movs	r5, #0
 8004414:	f104 0919 	add.w	r9, r4, #25
 8004418:	68e3      	ldr	r3, [r4, #12]
 800441a:	9a03      	ldr	r2, [sp, #12]
 800441c:	1a9b      	subs	r3, r3, r2
 800441e:	429d      	cmp	r5, r3
 8004420:	db05      	blt.n	800442e <_printf_i+0x216>
 8004422:	68e0      	ldr	r0, [r4, #12]
 8004424:	9b03      	ldr	r3, [sp, #12]
 8004426:	4298      	cmp	r0, r3
 8004428:	bfb8      	it	lt
 800442a:	4618      	movlt	r0, r3
 800442c:	e793      	b.n	8004356 <_printf_i+0x13e>
 800442e:	2301      	movs	r3, #1
 8004430:	464a      	mov	r2, r9
 8004432:	4639      	mov	r1, r7
 8004434:	4630      	mov	r0, r6
 8004436:	47c0      	blx	r8
 8004438:	3001      	adds	r0, #1
 800443a:	d08a      	beq.n	8004352 <_printf_i+0x13a>
 800443c:	3501      	adds	r5, #1
 800443e:	e7eb      	b.n	8004418 <_printf_i+0x200>
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1a7      	bne.n	8004394 <_printf_i+0x17c>
 8004444:	780b      	ldrb	r3, [r1, #0]
 8004446:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800444a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800444e:	e765      	b.n	800431c <_printf_i+0x104>
 8004450:	0800490c 	.word	0x0800490c
 8004454:	080048fb 	.word	0x080048fb

08004458 <_sbrk_r>:
 8004458:	b538      	push	{r3, r4, r5, lr}
 800445a:	4c06      	ldr	r4, [pc, #24]	; (8004474 <_sbrk_r+0x1c>)
 800445c:	2300      	movs	r3, #0
 800445e:	4605      	mov	r5, r0
 8004460:	4608      	mov	r0, r1
 8004462:	6023      	str	r3, [r4, #0]
 8004464:	f7fe ff20 	bl	80032a8 <_sbrk>
 8004468:	1c43      	adds	r3, r0, #1
 800446a:	d102      	bne.n	8004472 <_sbrk_r+0x1a>
 800446c:	6823      	ldr	r3, [r4, #0]
 800446e:	b103      	cbz	r3, 8004472 <_sbrk_r+0x1a>
 8004470:	602b      	str	r3, [r5, #0]
 8004472:	bd38      	pop	{r3, r4, r5, pc}
 8004474:	200018d0 	.word	0x200018d0

08004478 <__sread>:
 8004478:	b510      	push	{r4, lr}
 800447a:	460c      	mov	r4, r1
 800447c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004480:	f000 f8e2 	bl	8004648 <_read_r>
 8004484:	2800      	cmp	r0, #0
 8004486:	bfab      	itete	ge
 8004488:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800448a:	89a3      	ldrhlt	r3, [r4, #12]
 800448c:	181b      	addge	r3, r3, r0
 800448e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004492:	bfac      	ite	ge
 8004494:	6563      	strge	r3, [r4, #84]	; 0x54
 8004496:	81a3      	strhlt	r3, [r4, #12]
 8004498:	bd10      	pop	{r4, pc}

0800449a <__swrite>:
 800449a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800449e:	461f      	mov	r7, r3
 80044a0:	898b      	ldrh	r3, [r1, #12]
 80044a2:	05db      	lsls	r3, r3, #23
 80044a4:	4605      	mov	r5, r0
 80044a6:	460c      	mov	r4, r1
 80044a8:	4616      	mov	r6, r2
 80044aa:	d505      	bpl.n	80044b8 <__swrite+0x1e>
 80044ac:	2302      	movs	r3, #2
 80044ae:	2200      	movs	r2, #0
 80044b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044b4:	f000 f874 	bl	80045a0 <_lseek_r>
 80044b8:	89a3      	ldrh	r3, [r4, #12]
 80044ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044c2:	81a3      	strh	r3, [r4, #12]
 80044c4:	4632      	mov	r2, r6
 80044c6:	463b      	mov	r3, r7
 80044c8:	4628      	mov	r0, r5
 80044ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044ce:	f000 b823 	b.w	8004518 <_write_r>

080044d2 <__sseek>:
 80044d2:	b510      	push	{r4, lr}
 80044d4:	460c      	mov	r4, r1
 80044d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044da:	f000 f861 	bl	80045a0 <_lseek_r>
 80044de:	1c43      	adds	r3, r0, #1
 80044e0:	89a3      	ldrh	r3, [r4, #12]
 80044e2:	bf15      	itete	ne
 80044e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80044e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80044ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80044ee:	81a3      	strheq	r3, [r4, #12]
 80044f0:	bf18      	it	ne
 80044f2:	81a3      	strhne	r3, [r4, #12]
 80044f4:	bd10      	pop	{r4, pc}

080044f6 <__sclose>:
 80044f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044fa:	f000 b81f 	b.w	800453c <_close_r>

080044fe <__ascii_wctomb>:
 80044fe:	b149      	cbz	r1, 8004514 <__ascii_wctomb+0x16>
 8004500:	2aff      	cmp	r2, #255	; 0xff
 8004502:	bf85      	ittet	hi
 8004504:	238a      	movhi	r3, #138	; 0x8a
 8004506:	6003      	strhi	r3, [r0, #0]
 8004508:	700a      	strbls	r2, [r1, #0]
 800450a:	f04f 30ff 	movhi.w	r0, #4294967295
 800450e:	bf98      	it	ls
 8004510:	2001      	movls	r0, #1
 8004512:	4770      	bx	lr
 8004514:	4608      	mov	r0, r1
 8004516:	4770      	bx	lr

08004518 <_write_r>:
 8004518:	b538      	push	{r3, r4, r5, lr}
 800451a:	4c07      	ldr	r4, [pc, #28]	; (8004538 <_write_r+0x20>)
 800451c:	4605      	mov	r5, r0
 800451e:	4608      	mov	r0, r1
 8004520:	4611      	mov	r1, r2
 8004522:	2200      	movs	r2, #0
 8004524:	6022      	str	r2, [r4, #0]
 8004526:	461a      	mov	r2, r3
 8004528:	f7fe fcbe 	bl	8002ea8 <_write>
 800452c:	1c43      	adds	r3, r0, #1
 800452e:	d102      	bne.n	8004536 <_write_r+0x1e>
 8004530:	6823      	ldr	r3, [r4, #0]
 8004532:	b103      	cbz	r3, 8004536 <_write_r+0x1e>
 8004534:	602b      	str	r3, [r5, #0]
 8004536:	bd38      	pop	{r3, r4, r5, pc}
 8004538:	200018d0 	.word	0x200018d0

0800453c <_close_r>:
 800453c:	b538      	push	{r3, r4, r5, lr}
 800453e:	4c06      	ldr	r4, [pc, #24]	; (8004558 <_close_r+0x1c>)
 8004540:	2300      	movs	r3, #0
 8004542:	4605      	mov	r5, r0
 8004544:	4608      	mov	r0, r1
 8004546:	6023      	str	r3, [r4, #0]
 8004548:	f7fe fec8 	bl	80032dc <_close>
 800454c:	1c43      	adds	r3, r0, #1
 800454e:	d102      	bne.n	8004556 <_close_r+0x1a>
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	b103      	cbz	r3, 8004556 <_close_r+0x1a>
 8004554:	602b      	str	r3, [r5, #0]
 8004556:	bd38      	pop	{r3, r4, r5, pc}
 8004558:	200018d0 	.word	0x200018d0

0800455c <_fstat_r>:
 800455c:	b538      	push	{r3, r4, r5, lr}
 800455e:	4c07      	ldr	r4, [pc, #28]	; (800457c <_fstat_r+0x20>)
 8004560:	2300      	movs	r3, #0
 8004562:	4605      	mov	r5, r0
 8004564:	4608      	mov	r0, r1
 8004566:	4611      	mov	r1, r2
 8004568:	6023      	str	r3, [r4, #0]
 800456a:	f7fe feba 	bl	80032e2 <_fstat>
 800456e:	1c43      	adds	r3, r0, #1
 8004570:	d102      	bne.n	8004578 <_fstat_r+0x1c>
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	b103      	cbz	r3, 8004578 <_fstat_r+0x1c>
 8004576:	602b      	str	r3, [r5, #0]
 8004578:	bd38      	pop	{r3, r4, r5, pc}
 800457a:	bf00      	nop
 800457c:	200018d0 	.word	0x200018d0

08004580 <_isatty_r>:
 8004580:	b538      	push	{r3, r4, r5, lr}
 8004582:	4c06      	ldr	r4, [pc, #24]	; (800459c <_isatty_r+0x1c>)
 8004584:	2300      	movs	r3, #0
 8004586:	4605      	mov	r5, r0
 8004588:	4608      	mov	r0, r1
 800458a:	6023      	str	r3, [r4, #0]
 800458c:	f7fe feae 	bl	80032ec <_isatty>
 8004590:	1c43      	adds	r3, r0, #1
 8004592:	d102      	bne.n	800459a <_isatty_r+0x1a>
 8004594:	6823      	ldr	r3, [r4, #0]
 8004596:	b103      	cbz	r3, 800459a <_isatty_r+0x1a>
 8004598:	602b      	str	r3, [r5, #0]
 800459a:	bd38      	pop	{r3, r4, r5, pc}
 800459c:	200018d0 	.word	0x200018d0

080045a0 <_lseek_r>:
 80045a0:	b538      	push	{r3, r4, r5, lr}
 80045a2:	4c07      	ldr	r4, [pc, #28]	; (80045c0 <_lseek_r+0x20>)
 80045a4:	4605      	mov	r5, r0
 80045a6:	4608      	mov	r0, r1
 80045a8:	4611      	mov	r1, r2
 80045aa:	2200      	movs	r2, #0
 80045ac:	6022      	str	r2, [r4, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	f7fe fe9e 	bl	80032f0 <_lseek>
 80045b4:	1c43      	adds	r3, r0, #1
 80045b6:	d102      	bne.n	80045be <_lseek_r+0x1e>
 80045b8:	6823      	ldr	r3, [r4, #0]
 80045ba:	b103      	cbz	r3, 80045be <_lseek_r+0x1e>
 80045bc:	602b      	str	r3, [r5, #0]
 80045be:	bd38      	pop	{r3, r4, r5, pc}
 80045c0:	200018d0 	.word	0x200018d0

080045c4 <memmove>:
 80045c4:	4288      	cmp	r0, r1
 80045c6:	b510      	push	{r4, lr}
 80045c8:	eb01 0302 	add.w	r3, r1, r2
 80045cc:	d803      	bhi.n	80045d6 <memmove+0x12>
 80045ce:	1e42      	subs	r2, r0, #1
 80045d0:	4299      	cmp	r1, r3
 80045d2:	d10c      	bne.n	80045ee <memmove+0x2a>
 80045d4:	bd10      	pop	{r4, pc}
 80045d6:	4298      	cmp	r0, r3
 80045d8:	d2f9      	bcs.n	80045ce <memmove+0xa>
 80045da:	1881      	adds	r1, r0, r2
 80045dc:	1ad2      	subs	r2, r2, r3
 80045de:	42d3      	cmn	r3, r2
 80045e0:	d100      	bne.n	80045e4 <memmove+0x20>
 80045e2:	bd10      	pop	{r4, pc}
 80045e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045e8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80045ec:	e7f7      	b.n	80045de <memmove+0x1a>
 80045ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045f2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80045f6:	e7eb      	b.n	80045d0 <memmove+0xc>

080045f8 <__malloc_lock>:
 80045f8:	4770      	bx	lr

080045fa <__malloc_unlock>:
 80045fa:	4770      	bx	lr

080045fc <_realloc_r>:
 80045fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fe:	4607      	mov	r7, r0
 8004600:	4614      	mov	r4, r2
 8004602:	460e      	mov	r6, r1
 8004604:	b921      	cbnz	r1, 8004610 <_realloc_r+0x14>
 8004606:	4611      	mov	r1, r2
 8004608:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800460c:	f7ff bbe0 	b.w	8003dd0 <_malloc_r>
 8004610:	b922      	cbnz	r2, 800461c <_realloc_r+0x20>
 8004612:	f7ff fb8f 	bl	8003d34 <_free_r>
 8004616:	4625      	mov	r5, r4
 8004618:	4628      	mov	r0, r5
 800461a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800461c:	f000 f826 	bl	800466c <_malloc_usable_size_r>
 8004620:	4284      	cmp	r4, r0
 8004622:	d90f      	bls.n	8004644 <_realloc_r+0x48>
 8004624:	4621      	mov	r1, r4
 8004626:	4638      	mov	r0, r7
 8004628:	f7ff fbd2 	bl	8003dd0 <_malloc_r>
 800462c:	4605      	mov	r5, r0
 800462e:	2800      	cmp	r0, #0
 8004630:	d0f2      	beq.n	8004618 <_realloc_r+0x1c>
 8004632:	4631      	mov	r1, r6
 8004634:	4622      	mov	r2, r4
 8004636:	f7fe ff8e 	bl	8003556 <memcpy>
 800463a:	4631      	mov	r1, r6
 800463c:	4638      	mov	r0, r7
 800463e:	f7ff fb79 	bl	8003d34 <_free_r>
 8004642:	e7e9      	b.n	8004618 <_realloc_r+0x1c>
 8004644:	4635      	mov	r5, r6
 8004646:	e7e7      	b.n	8004618 <_realloc_r+0x1c>

08004648 <_read_r>:
 8004648:	b538      	push	{r3, r4, r5, lr}
 800464a:	4c07      	ldr	r4, [pc, #28]	; (8004668 <_read_r+0x20>)
 800464c:	4605      	mov	r5, r0
 800464e:	4608      	mov	r0, r1
 8004650:	4611      	mov	r1, r2
 8004652:	2200      	movs	r2, #0
 8004654:	6022      	str	r2, [r4, #0]
 8004656:	461a      	mov	r2, r3
 8004658:	f7fe fe18 	bl	800328c <_read>
 800465c:	1c43      	adds	r3, r0, #1
 800465e:	d102      	bne.n	8004666 <_read_r+0x1e>
 8004660:	6823      	ldr	r3, [r4, #0]
 8004662:	b103      	cbz	r3, 8004666 <_read_r+0x1e>
 8004664:	602b      	str	r3, [r5, #0]
 8004666:	bd38      	pop	{r3, r4, r5, pc}
 8004668:	200018d0 	.word	0x200018d0

0800466c <_malloc_usable_size_r>:
 800466c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004670:	2800      	cmp	r0, #0
 8004672:	f1a0 0004 	sub.w	r0, r0, #4
 8004676:	bfbc      	itt	lt
 8004678:	580b      	ldrlt	r3, [r1, r0]
 800467a:	18c0      	addlt	r0, r0, r3
 800467c:	4770      	bx	lr
	...

08004680 <_init>:
 8004680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004682:	bf00      	nop
 8004684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004686:	bc08      	pop	{r3}
 8004688:	469e      	mov	lr, r3
 800468a:	4770      	bx	lr

0800468c <_fini>:
 800468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468e:	bf00      	nop
 8004690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004692:	bc08      	pop	{r3}
 8004694:	469e      	mov	lr, r3
 8004696:	4770      	bx	lr
